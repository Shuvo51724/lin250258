{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n","size_bytes":81},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/pages/work-flow.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Trash2, Edit2, X, Briefcase } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport DashboardHeader from \"@/components/DashboardHeader\";\nimport Footer from \"@/components/Footer\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface Job {\n  id: string;\n  name: string;\n}\n\ninterface PostType {\n  id: string;\n  name: string;\n  jobs: Job[];\n}\n\ninterface Note {\n  id: string;\n  to: string;\n  for: string;\n  message: string;\n  createdBy: string;\n  createdAt: string;\n}\n\nexport default function WorkFlow() {\n  const [postTypes, setPostTypes] = useState<PostType[]>([]);\n  const [notes, setNotes] = useState<Note[]>([]);\n  const [activePostType, setActivePostType] = useState<string | null>(null);\n  const [newPostTypeName, setNewPostTypeName] = useState(\"\");\n  const [newJobName, setNewJobName] = useState(\"\");\n  const [newNoteTo, setNewNoteTo] = useState(\"\");\n  const [newNoteFor, setNewNoteFor] = useState(\"\");\n  const [newNoteMessage, setNewNoteMessage] = useState(\"\");\n  const [editingNote, setEditingNote] = useState<Note | null>(null);\n  const [editingPostType, setEditingPostType] = useState<PostType | null>(null);\n  const [editingJob, setEditingJob] = useState<{ job: Job; postTypeId: string } | null>(null);\n  const [deleteTarget, setDeleteTarget] = useState<{ type: \"postType\" | \"job\" | \"note\"; id: string; postTypeId?: string } | null>(null);\n  const [showAddPostTypeDialog, setShowAddPostTypeDialog] = useState(false);\n  const [showAddJobDialog, setShowAddJobDialog] = useState(false);\n  const { toast } = useToast();\n  const { hasPermission, userId, userRole } = useAuth();\n  const canEdit = userRole === \"admin\" || hasPermission(\"canEditWorkFlow\") || hasPermission(\"canAddWorkFlow\");\n\n  useEffect(() => {\n    const loadData = () => {\n      try {\n        const storedPostTypes = localStorage.getItem(\"dob_work_categories\");\n        const storedNotes = localStorage.getItem(\"dob_work_notes\");\n        \n        if (storedPostTypes) {\n          setPostTypes(JSON.parse(storedPostTypes));\n        }\n        if (storedNotes) {\n          setNotes(JSON.parse(storedNotes));\n        }\n      } catch (error) {\n        console.error(\"Failed to load work flow data:\", error);\n      }\n    };\n    loadData();\n  }, []);\n\n  const savePostTypes = (newPostTypes: PostType[]) => {\n    setPostTypes(newPostTypes);\n    localStorage.setItem(\"dob_work_categories\", JSON.stringify(newPostTypes));\n  };\n\n  const saveNotes = (newNotes: Note[]) => {\n    setNotes(newNotes);\n    localStorage.setItem(\"dob_work_notes\", JSON.stringify(newNotes));\n  };\n\n  const handleAddPostType = () => {\n    if (!newPostTypeName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Post Type name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newPostType: PostType = {\n      id: Date.now().toString(),\n      name: newPostTypeName.trim(),\n      jobs: [],\n    };\n\n    savePostTypes([...postTypes, newPostType]);\n    setNewPostTypeName(\"\");\n    setShowAddPostTypeDialog(false);\n    toast({\n      title: \"Success\",\n      description: \"Post Type added successfully\",\n    });\n  };\n\n  const handleUpdatePostType = () => {\n    if (!editingPostType || !editingPostType.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Post Type name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const updatedPostTypes = postTypes.map(pt => \n      pt.id === editingPostType.id ? editingPostType : pt\n    );\n    savePostTypes(updatedPostTypes);\n    setEditingPostType(null);\n    toast({\n      title: \"Success\",\n      description: \"Post Type updated successfully\",\n    });\n  };\n\n  const handleDeletePostType = () => {\n    if (!deleteTarget || deleteTarget.type !== \"postType\") return;\n    \n    const newPostTypes = postTypes.filter(pt => pt.id !== deleteTarget.id);\n    savePostTypes(newPostTypes);\n    setDeleteTarget(null);\n    if (activePostType === deleteTarget.id) {\n      setActivePostType(null);\n    }\n    toast({\n      title: \"Success\",\n      description: \"Post Type deleted successfully\",\n    });\n  };\n\n  const handleAddJob = () => {\n    if (!activePostType || !newJobName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Job name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newPostTypes = postTypes.map(pt => {\n      if (pt.id === activePostType) {\n        return {\n          ...pt,\n          jobs: [...pt.jobs, { id: Date.now().toString(), name: newJobName.trim() }],\n        };\n      }\n      return pt;\n    });\n\n    savePostTypes(newPostTypes);\n    setNewJobName(\"\");\n    setShowAddJobDialog(false);\n    toast({\n      title: \"Success\",\n      description: \"Job added successfully\",\n    });\n  };\n\n  const handleUpdateJob = () => {\n    if (!editingJob || !editingJob.job.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Job name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const updatedPostTypes = postTypes.map(pt => {\n      if (pt.id === editingJob.postTypeId) {\n        return {\n          ...pt,\n          jobs: pt.jobs.map(j => j.id === editingJob.job.id ? editingJob.job : j),\n        };\n      }\n      return pt;\n    });\n    savePostTypes(updatedPostTypes);\n    setEditingJob(null);\n    toast({\n      title: \"Success\",\n      description: \"Job updated successfully\",\n    });\n  };\n\n  const handleDeleteJob = () => {\n    if (!deleteTarget || deleteTarget.type !== \"job\" || !deleteTarget.postTypeId) return;\n\n    const newPostTypes = postTypes.map(pt => {\n      if (pt.id === deleteTarget.postTypeId) {\n        return {\n          ...pt,\n          jobs: pt.jobs.filter(j => j.id !== deleteTarget.id),\n        };\n      }\n      return pt;\n    });\n\n    savePostTypes(newPostTypes);\n    setDeleteTarget(null);\n    toast({\n      title: \"Success\",\n      description: \"Job deleted successfully\",\n    });\n  };\n\n  const handleAddNote = () => {\n    if (!newNoteTo.trim() || !newNoteFor.trim() || !newNoteMessage.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"All fields (To, For, and Message) are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newNote: Note = {\n      id: Date.now().toString(),\n      to: newNoteTo.trim(),\n      for: newNoteFor.trim(),\n      message: newNoteMessage.trim(),\n      createdBy: userId || \"Unknown\",\n      createdAt: new Date().toISOString(),\n    };\n\n    saveNotes([...notes, newNote]);\n    setNewNoteTo(\"\");\n    setNewNoteFor(\"\");\n    setNewNoteMessage(\"\");\n    toast({\n      title: \"Success\",\n      description: \"Note added successfully\",\n    });\n  };\n\n  const handleUpdateNote = () => {\n    if (!editingNote) return;\n\n    const updatedNotes = notes.map(note => \n      note.id === editingNote.id ? editingNote : note\n    );\n    saveNotes(updatedNotes);\n    setEditingNote(null);\n    toast({\n      title: \"Success\",\n      description: \"Note updated successfully\",\n    });\n  };\n\n  const handleDeleteNote = () => {\n    if (!deleteTarget || deleteTarget.type !== \"note\") return;\n\n    const newNotes = notes.filter(n => n.id !== deleteTarget.id);\n    saveNotes(newNotes);\n    setDeleteTarget(null);\n    toast({\n      title: \"Success\",\n      description: \"Note deleted successfully\",\n    });\n  };\n\n  const activePost = postTypes.find(pt => pt.id === activePostType);\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gradient-to-br from-gray-50 to-gray-100\">\n      <DashboardHeader />\n      \n      <main className=\"flex-grow w-full px-4 sm:px-6 lg:px-8 py-6 lg:py-10\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-10 text-center\">\n            <h1 className=\"text-4xl lg:text-5xl font-bold bg-gradient-to-r from-red-600 to-red-500 bg-clip-text text-transparent mb-3\">\n              Work Flow\n            </h1>\n            <p className=\"text-gray-600 text-lg\">Manage your team's workflow and collaboration</p>\n          </div>\n\n          {canEdit && !activePostType && (\n            <div className=\"mb-8 flex justify-center\">\n              <Dialog open={showAddPostTypeDialog} onOpenChange={setShowAddPostTypeDialog}>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-gradient-to-r from-red-600 to-red-500 hover:from-red-700 hover:to-red-600 text-white px-8 py-6 text-lg font-semibold rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\">\n                    <Plus className=\"mr-2 h-5 w-5\" />\n                    Add New Post Type\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle className=\"text-2xl\">Add New Post Type</DialogTitle>\n                  </DialogHeader>\n                  <Input\n                    placeholder=\"e.g., Desk Reporter, Video Editor\"\n                    value={newPostTypeName}\n                    onChange={(e) => setNewPostTypeName(e.target.value)}\n                    onKeyDown={(e) => e.key === \"Enter\" && handleAddPostType()}\n                    className=\"text-lg py-6\"\n                  />\n                  <DialogFooter>\n                    <Button onClick={handleAddPostType} className=\"w-full bg-red-600 hover:bg-red-700\">\n                      Add Post Type\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            </div>\n          )}\n\n          <div className=\"mb-16\">\n            {!activePostType ? (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {postTypes.map((postType, index) => (\n                  <div\n                    key={postType.id}\n                    className=\"group relative bg-white rounded-2xl p-6 shadow-lg hover:shadow-2xl transition-all duration-300 hover:-translate-y-1 border border-gray-100\"\n                    style={{\n                      animation: `fadeInUp 0.5s ease-out ${index * 0.1}s both`\n                    }}\n                  >\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"h-12 w-12 rounded-xl bg-gradient-to-br from-red-500 to-red-600 flex items-center justify-center\">\n                        <Briefcase className=\"h-6 w-6 text-white\" />\n                      </div>\n                      {canEdit && (\n                        <div className=\"flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                className=\"h-8 w-8 rounded-lg hover:bg-blue-50 hover:text-blue-600\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  setEditingPostType({ ...postType });\n                                }}\n                              >\n                                <Edit2 className=\"h-4 w-4\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Edit Post Type</DialogTitle>\n                              </DialogHeader>\n                              <Input\n                                placeholder=\"Post type name\"\n                                value={editingPostType?.name || \"\"}\n                                onChange={(e) => setEditingPostType(editingPostType ? { ...editingPostType, name: e.target.value } : null)}\n                                className=\"py-6\"\n                              />\n                              <DialogFooter>\n                                <Button onClick={handleUpdatePostType} className=\"bg-red-600 hover:bg-red-700\">\n                                  Save Changes\n                                </Button>\n                              </DialogFooter>\n                            </DialogContent>\n                          </Dialog>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8 rounded-lg hover:bg-red-50 hover:text-red-600\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setDeleteTarget({ type: \"postType\", id: postType.id });\n                            }}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                    <h3 className=\"text-xl font-bold text-gray-800 mb-2\">{postType.name}</h3>\n                    <p className=\"text-sm text-gray-500 mb-4\">\n                      {postType.jobs.length} {postType.jobs.length === 1 ? 'job' : 'jobs'}\n                    </p>\n                    <Button\n                      onClick={() => setActivePostType(postType.id)}\n                      className=\"w-full bg-gradient-to-r from-red-600 to-red-500 hover:from-red-700 hover:to-red-600 text-white rounded-xl py-5 font-semibold transition-all duration-300\"\n                    >\n                      View Details\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"bg-white rounded-3xl shadow-2xl p-8 lg:p-12 relative overflow-hidden\">\n                <div className=\"absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-red-100 to-transparent rounded-full blur-3xl opacity-50\"></div>\n                \n                <div className=\"relative\">\n                  <div className=\"flex items-center justify-between mb-8\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"h-16 w-16 rounded-2xl bg-gradient-to-br from-red-500 to-red-600 flex items-center justify-center shadow-lg\">\n                        <Briefcase className=\"h-8 w-8 text-white\" />\n                      </div>\n                      <div>\n                        <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-800\">{activePost?.name}</h2>\n                        <p className=\"text-gray-500 mt-1\">{activePost?.jobs.length || 0} jobs in this category</p>\n                      </div>\n                    </div>\n                    <Button\n                      onClick={() => setActivePostType(null)}\n                      variant=\"ghost\"\n                      className=\"h-12 w-12 rounded-xl hover:bg-gray-100\"\n                    >\n                      <X className=\"h-6 w-6\" />\n                    </Button>\n                  </div>\n\n                  {canEdit && (\n                    <div className=\"mb-8\">\n                      <Button\n                        onClick={() => setShowAddJobDialog(true)}\n                        className=\"bg-gradient-to-r from-green-600 to-green-500 hover:from-green-700 hover:to-green-600 text-white px-6 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300\"\n                      >\n                        <Plus className=\"mr-2 h-5 w-5\" />\n                        Add New Job\n                      </Button>\n                    </div>\n                  )}\n\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {activePost?.jobs.map((job, index) => (\n                      <div\n                        key={job.id}\n                        className=\"group relative bg-gradient-to-br from-gray-50 to-white rounded-2xl p-6 border-2 border-gray-200 hover:border-red-300 transition-all duration-300 hover:shadow-lg\"\n                        style={{\n                          animation: `slideIn 0.4s ease-out ${index * 0.1}s both`\n                        }}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <div className=\"h-2 w-2 rounded-full bg-red-500\"></div>\n                              <span className=\"text-xs font-semibold text-gray-500 uppercase tracking-wide\">Job</span>\n                            </div>\n                            <h4 className=\"text-lg font-bold text-gray-800\">{job.name}</h4>\n                          </div>\n                          {canEdit && (\n                            <div className=\"flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button\n                                    size=\"icon\"\n                                    variant=\"ghost\"\n                                    className=\"h-8 w-8 rounded-lg hover:bg-blue-50 hover:text-blue-600\"\n                                    onClick={() => setEditingJob({ job: { ...job }, postTypeId: activePostType })}\n                                  >\n                                    <Edit2 className=\"h-4 w-4\" />\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent>\n                                  <DialogHeader>\n                                    <DialogTitle>Edit Job</DialogTitle>\n                                  </DialogHeader>\n                                  <Input\n                                    placeholder=\"Job name\"\n                                    value={editingJob?.job.name || \"\"}\n                                    onChange={(e) => setEditingJob(editingJob ? { ...editingJob, job: { ...editingJob.job, name: e.target.value } } : null)}\n                                    className=\"py-6\"\n                                  />\n                                  <DialogFooter>\n                                    <Button onClick={handleUpdateJob} className=\"bg-red-600 hover:bg-red-700\">\n                                      Save Changes\n                                    </Button>\n                                  </DialogFooter>\n                                </DialogContent>\n                              </Dialog>\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                className=\"h-8 w-8 rounded-lg hover:bg-red-50 hover:text-red-600\"\n                                onClick={() => setDeleteTarget({ type: \"job\", id: job.id, postTypeId: activePostType })}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                    {activePost?.jobs.length === 0 && (\n                      <div className=\"col-span-full text-center py-12\">\n                        <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-gray-100 mb-4\">\n                          <Briefcase className=\"h-8 w-8 text-gray-400\" />\n                        </div>\n                        <p className=\"text-gray-500 text-lg\">No jobs yet. Add your first job to get started!</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"mb-8\">\n            <div className=\"mb-8 text-center\">\n              <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-800 mb-2\">Team Notes</h2>\n              <p className=\"text-gray-600\">Collaborate and share important messages</p>\n            </div>\n            \n            <div className=\"mb-8 max-w-2xl mx-auto\">\n              <div className=\"bg-white rounded-2xl p-6 lg:p-8 shadow-lg border border-gray-100\">\n                <h3 className=\"text-xl font-bold text-gray-800 mb-6\">Create New Note</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-semibold text-gray-700 mb-2 block\">To:</label>\n                    <Input\n                      placeholder=\"Person Name\"\n                      value={newNoteTo}\n                      onChange={(e) => setNewNoteTo(e.target.value)}\n                      className=\"py-6 text-lg\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-semibold text-gray-700 mb-2 block\">For:</label>\n                    <Input\n                      placeholder=\"Person Name\"\n                      value={newNoteFor}\n                      onChange={(e) => setNewNoteFor(e.target.value)}\n                      className=\"py-6 text-lg\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-semibold text-gray-700 mb-2 block\">Message:</label>\n                    <Textarea\n                      placeholder=\"Enter your message here...\"\n                      value={newNoteMessage}\n                      onChange={(e) => setNewNoteMessage(e.target.value)}\n                      rows={4}\n                      className=\"text-lg\"\n                    />\n                  </div>\n                  <Button \n                    onClick={handleAddNote} \n                    className=\"w-full bg-gradient-to-r from-red-600 to-red-500 hover:from-red-700 hover:to-red-600 text-white py-6 text-lg font-semibold rounded-xl shadow-lg hover:shadow-xl transition-all duration-300\"\n                  >\n                    <Plus className=\"mr-2 h-5 w-5\" />\n                    Add Note\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {notes.map((note, index) => (\n                <div\n                  key={note.id}\n                  className=\"group relative bg-gradient-to-br from-yellow-50 to-yellow-100 rounded-2xl p-6 shadow-md hover:shadow-xl border-2 border-yellow-200 transition-all duration-300 hover:-translate-y-1\"\n                  style={{\n                    animation: `fadeInUp 0.5s ease-out ${index * 0.1}s both`\n                  }}\n                >\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"inline-block bg-yellow-300 px-3 py-1 rounded-lg mb-2\">\n                        <span className=\"text-xs font-bold text-yellow-800 uppercase tracking-wide\">Note</span>\n                      </div>\n                      <h4 className=\"text-lg font-bold text-gray-800\">To: {note.to}</h4>\n                      <h4 className=\"text-lg font-bold text-gray-800\">For: {note.for}</h4>\n                    </div>\n                    <div className=\"flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8 rounded-lg hover:bg-yellow-200\"\n                            onClick={() => setEditingNote({ ...note })}\n                          >\n                            <Edit2 className=\"h-4 w-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Edit Note</DialogTitle>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div>\n                              <label className=\"text-sm font-semibold text-gray-700 mb-2 block\">To:</label>\n                              <Input\n                                placeholder=\"Person Name\"\n                                value={editingNote?.to || \"\"}\n                                onChange={(e) => setEditingNote(editingNote ? { ...editingNote, to: e.target.value } : null)}\n                                className=\"py-6\"\n                              />\n                            </div>\n                            <div>\n                              <label className=\"text-sm font-semibold text-gray-700 mb-2 block\">For:</label>\n                              <Input\n                                placeholder=\"Person Name\"\n                                value={editingNote?.for || \"\"}\n                                onChange={(e) => setEditingNote(editingNote ? { ...editingNote, for: e.target.value } : null)}\n                                className=\"py-6\"\n                              />\n                            </div>\n                            <div>\n                              <label className=\"text-sm font-semibold text-gray-700 mb-2 block\">Message:</label>\n                              <Textarea\n                                placeholder=\"Enter your message here...\"\n                                value={editingNote?.message || \"\"}\n                                onChange={(e) => setEditingNote(editingNote ? { ...editingNote, message: e.target.value } : null)}\n                                rows={4}\n                              />\n                            </div>\n                          </div>\n                          <DialogFooter>\n                            <Button onClick={handleUpdateNote} className=\"bg-red-600 hover:bg-red-700\">\n                              Save Changes\n                            </Button>\n                          </DialogFooter>\n                        </DialogContent>\n                      </Dialog>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"h-8 w-8 rounded-lg hover:bg-red-50 hover:text-red-600\"\n                        onClick={() => setDeleteTarget({ type: \"note\", id: note.id })}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <p className=\"text-gray-700 mb-4 whitespace-pre-wrap leading-relaxed\">{note.message}</p>\n                  <div className=\"flex items-center gap-2 text-xs text-gray-600\">\n                    <span className=\"font-semibold\">{note.createdBy}</span>\n                    <span>•</span>\n                    <span>{new Date(note.createdAt).toLocaleDateString()}</span>\n                  </div>\n                </div>\n              ))}\n              {notes.length === 0 && (\n                <div className=\"col-span-full text-center py-12\">\n                  <p className=\"text-gray-500 text-lg\">No notes yet. Create your first note above!</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Dialog open={showAddJobDialog} onOpenChange={setShowAddJobDialog}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl\">Add New Job</DialogTitle>\n            <p className=\"text-gray-600\">Add a new job to {activePost?.name}</p>\n          </DialogHeader>\n          <Input\n            placeholder=\"Enter job name\"\n            value={newJobName}\n            onChange={(e) => setNewJobName(e.target.value)}\n            onKeyDown={(e) => e.key === \"Enter\" && handleAddJob()}\n            className=\"text-lg py-6\"\n          />\n          <DialogFooter>\n            <Button onClick={handleAddJob} className=\"w-full bg-red-600 hover:bg-red-700 py-6\">\n              Add Job\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <AlertDialog open={deleteTarget !== null} onOpenChange={() => setDeleteTarget(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete the {deleteTarget?.type === \"postType\" ? \"Post Type and all its jobs\" : deleteTarget?.type}.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => {\n                if (deleteTarget?.type === \"postType\") handleDeletePostType();\n                else if (deleteTarget?.type === \"job\") handleDeleteJob();\n                else if (deleteTarget?.type === \"note\") handleDeleteNote();\n              }}\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <Footer />\n\n      <style>{`\n        @keyframes fadeInUp {\n          from {\n            opacity: 0;\n            transform: translateY(20px);\n          }\n          to {\n            opacity: 1;\n            transform: translateY(0);\n          }\n        }\n\n        @keyframes slideIn {\n          from {\n            opacity: 0;\n            transform: translateX(-20px);\n          }\n          to {\n            opacity: 1;\n            transform: translateX(0);\n          }\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":30246},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ChatBox.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useChat } from '@/contexts/ChatContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { format } from 'date-fns';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardHeader, CardContent, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport {\n  MessageCircle,\n  X,\n  Send,\n  Paperclip,\n  Users,\n  Pin,\n  MoreVertical,\n  Ban,\n  VolumeX,\n  Trash2,\n  Check,\n  CheckCheck,\n} from 'lucide-react';\n\ninterface ChatBoxProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ChatBox({ isOpen, onClose }: ChatBoxProps) {\n  const { user } = useAuth();\n  const {\n    messages,\n    onlineUsers,\n    isConnected,\n    settings,\n    sendMessage,\n    sendTypingIndicator,\n    markMessageAsRead,\n    pinMessage,\n    blockUser,\n    muteUser,\n    isUserBlocked,\n    isUserMuted,\n  } = useChat();\n\n  const [messageInput, setMessageInput] = useState('');\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [showUserList, setShowUserList] = useState(false);\n  const [blockDialogUser, setBlockDialogUser] = useState<{ userId: string; userName: string } | null>(null);\n  const [muteDialogUser, setMuteDialogUser] = useState<{ userId: string; userName: string } | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (isOpen && user) {\n      const unreadMessages = messages.filter(\n        msg => msg.userId !== user.userId && !msg.readBy.includes(user.userId)\n      );\n      unreadMessages.forEach(msg => markMessageAsRead(msg.id));\n    }\n  }, [isOpen, messages, user, markMessageAsRead]);\n\n  const handleSendMessage = () => {\n    if (!messageInput.trim() && !selectedFile) return;\n    \n    if (settings.moderatorOnlyMode && user?.role !== 'admin' && user?.role !== 'moderator') {\n      return;\n    }\n\n    if (user && isUserMuted(user.userId)) {\n      return;\n    }\n\n    sendMessage(messageInput, selectedFile || undefined);\n    setMessageInput('');\n    setSelectedFile(null);\n  };\n\n  const handleInputChange = (value: string) => {\n    setMessageInput(value);\n\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n\n    sendTypingIndicator(true);\n\n    typingTimeoutRef.current = setTimeout(() => {\n      sendTypingIndicator(false);\n    }, 1000);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (file.size > 5 * 1024 * 1024) {\n        alert('File size must be less than 5MB');\n        return;\n      }\n      setSelectedFile(file);\n    }\n  };\n\n  const handlePinMessage = (messageId: string, isPinned: boolean) => {\n    if (user?.role === 'admin') {\n      pinMessage(messageId, !isPinned);\n    }\n  };\n\n  const handleBlockUser = (userId: string, userName: string) => {\n    setBlockDialogUser({ userId, userName });\n  };\n\n  const handleMuteUser = (userId: string, userName: string) => {\n    setMuteDialogUser({ userId, userName });\n  };\n\n  const confirmBlockUser = () => {\n    if (blockDialogUser && user?.role === 'admin') {\n      blockUser(blockDialogUser.userId, blockDialogUser.userName);\n      setBlockDialogUser(null);\n    }\n  };\n\n  const confirmMuteUser = () => {\n    if (muteDialogUser && user?.role === 'admin') {\n      muteUser(muteDialogUser.userId, muteDialogUser.userName);\n      setMuteDialogUser(null);\n    }\n  };\n\n  const pinnedMessages = messages.filter(msg => msg.isPinned);\n  const regularMessages = messages.filter(msg => !msg.isPinned);\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      <Card className=\"fixed bottom-4 right-4 w-96 h-[600px] shadow-2xl z-50 flex flex-col\">\n        <CardHeader className=\"flex flex-row items-center justify-between p-4 border-b\">\n          <div className=\"flex items-center gap-2\">\n            <MessageCircle className=\"h-5 w-5\" />\n            <CardTitle className=\"text-lg\">Chat Box</CardTitle>\n            {isConnected && (\n              <Badge variant=\"outline\" className=\"bg-green-100 text-green-800 border-green-300\">\n                <span className=\"w-2 h-2 bg-green-500 rounded-full mr-1\"></span>\n                Online\n              </Badge>\n            )}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowUserList(!showUserList)}\n            >\n              <Users className=\"h-4 w-4\" />\n              <span className=\"ml-1 text-xs\">{onlineUsers.length}</span>\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"flex-1 p-0 overflow-hidden flex flex-col\">\n          {showUserList ? (\n            <ScrollArea className=\"flex-1 p-4\">\n              <h3 className=\"font-semibold mb-2\">Online Users ({onlineUsers.length})</h3>\n              <div className=\"space-y-2\">\n                {onlineUsers.map(onlineUser => (\n                  <div key={onlineUser.userId} className=\"flex items-center justify-between p-2 rounded hover:bg-gray-100\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"w-2 h-2 bg-green-500 rounded-full\"></span>\n                      <span className=\"font-medium\">{onlineUser.userName}</span>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {onlineUser.userRole}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n          ) : (\n            <>\n              <ScrollArea className=\"flex-1 p-4\">\n                {pinnedMessages.length > 0 && (\n                  <>\n                    <div className=\"mb-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Pin className=\"h-4 w-4 text-yellow-600\" />\n                        <span className=\"text-sm font-semibold text-yellow-600\">Pinned Messages</span>\n                      </div>\n                      {pinnedMessages.map(msg => (\n                        <div key={msg.id} className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-2\">\n                          <MessageItem\n                            message={msg}\n                            currentUserId={user?.userId || ''}\n                            isAdmin={user?.role === 'admin'}\n                            onPin={handlePinMessage}\n                            onBlock={handleBlockUser}\n                            onMute={handleMuteUser}\n                            isBlocked={isUserBlocked(msg.userId)}\n                            isMuted={isUserMuted(msg.userId)}\n                          />\n                        </div>\n                      ))}\n                    </div>\n                    <Separator className=\"my-4\" />\n                  </>\n                )}\n\n                <div className=\"space-y-3\">\n                  {regularMessages.map(msg => (\n                    <MessageItem\n                      key={msg.id}\n                      message={msg}\n                      currentUserId={user?.userId || ''}\n                      isAdmin={user?.role === 'admin'}\n                      onPin={handlePinMessage}\n                      onBlock={handleBlockUser}\n                      onMute={handleMuteUser}\n                      isBlocked={isUserBlocked(msg.userId)}\n                      isMuted={isUserMuted(msg.userId)}\n                    />\n                  ))}\n                </div>\n                <div ref={messagesEndRef} />\n              </ScrollArea>\n\n              <div className=\"border-t p-4\">\n                {settings.moderatorOnlyMode && user?.role !== 'admin' && user?.role !== 'moderator' && (\n                  <div className=\"mb-2 p-2 bg-yellow-100 text-yellow-800 text-sm rounded\">\n                    Only moderators can send messages right now\n                  </div>\n                )}\n                {user && isUserMuted(user.userId) && (\n                  <div className=\"mb-2 p-2 bg-red-100 text-red-800 text-sm rounded\">\n                    You have been muted and cannot send messages\n                  </div>\n                )}\n                {selectedFile && (\n                  <div className=\"mb-2 p-2 bg-gray-100 rounded flex items-center justify-between\">\n                    <span className=\"text-sm truncate\">{selectedFile.name}</span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setSelectedFile(null)}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                )}\n                <div className=\"flex gap-2\">\n                  {settings.fileSharingEnabled && (\n                    <>\n                      <input\n                        ref={fileInputRef}\n                        type=\"file\"\n                        className=\"hidden\"\n                        onChange={handleFileSelect}\n                        accept=\"image/*,.pdf,.doc,.docx,.xls,.xlsx\"\n                      />\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => fileInputRef.current?.click()}\n                        disabled={!isConnected || (user && isUserMuted(user.userId))}\n                      >\n                        <Paperclip className=\"h-4 w-4\" />\n                      </Button>\n                    </>\n                  )}\n                  <Input\n                    value={messageInput}\n                    onChange={(e) => handleInputChange(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                    placeholder=\"Type a message...\"\n                    disabled={!isConnected || (user && isUserMuted(user.userId))}\n                  />\n                  <Button\n                    onClick={handleSendMessage}\n                    disabled={!isConnected || (!messageInput.trim() && !selectedFile) || (user && isUserMuted(user.userId))}\n                  >\n                    <Send className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      <AlertDialog open={!!blockDialogUser} onOpenChange={() => setBlockDialogUser(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Block User</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to block {blockDialogUser?.userName}? They will not be able to send messages.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={confirmBlockUser}>Block</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <AlertDialog open={!!muteDialogUser} onOpenChange={() => setMuteDialogUser(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Mute User</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to mute {muteDialogUser?.userName}? They will not be able to send messages.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={confirmMuteUser}>Mute</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n\ninterface MessageItemProps {\n  message: any;\n  currentUserId: string;\n  isAdmin: boolean;\n  onPin: (messageId: string, isPinned: boolean) => void;\n  onBlock: (userId: string, userName: string) => void;\n  onMute: (userId: string, userName: string) => void;\n  isBlocked: boolean;\n  isMuted: boolean;\n}\n\nfunction MessageItem({\n  message,\n  currentUserId,\n  isAdmin,\n  onPin,\n  onBlock,\n  onMute,\n  isBlocked,\n  isMuted,\n}: MessageItemProps) {\n  const isOwnMessage = message.userId === currentUserId;\n\n  return (\n    <div className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}>\n      <div className={`max-w-[75%] ${isOwnMessage ? 'bg-blue-500 text-white' : 'bg-gray-100'} rounded-lg p-3`}>\n        <div className=\"flex items-center justify-between gap-2 mb-1\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"font-semibold text-sm\">{message.userName}</span>\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {message.userRole}\n            </Badge>\n            {isBlocked && <Badge variant=\"destructive\" className=\"text-xs\">Blocked</Badge>}\n            {isMuted && <Badge variant=\"outline\" className=\"text-xs\">Muted</Badge>}\n          </div>\n          {isAdmin && !isOwnMessage && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n                  <MoreVertical className=\"h-3 w-3\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent>\n                <DropdownMenuItem onClick={() => onPin(message.id, message.isPinned)}>\n                  <Pin className=\"h-4 w-4 mr-2\" />\n                  {message.isPinned ? 'Unpin' : 'Pin'} Message\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => onBlock(message.userId, message.userName)}>\n                  <Ban className=\"h-4 w-4 mr-2\" />\n                  Block User\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => onMute(message.userId, message.userName)}>\n                  <VolumeX className=\"h-4 w-4 mr-2\" />\n                  Mute User\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n\n        {message.fileUrl && (\n          <div className=\"mb-2\">\n            {message.fileType?.startsWith('image/') ? (\n              <img\n                src={message.fileUrl}\n                alt={message.fileName}\n                className=\"max-w-full rounded\"\n              />\n            ) : (\n              <a\n                href={message.fileUrl}\n                download={message.fileName}\n                className=\"flex items-center gap-2 p-2 bg-white/10 rounded\"\n              >\n                <Paperclip className=\"h-4 w-4\" />\n                <span className=\"text-sm truncate\">{message.fileName}</span>\n              </a>\n            )}\n          </div>\n        )}\n\n        <p className=\"text-sm whitespace-pre-wrap break-words\">{message.message}</p>\n\n        <div className=\"flex items-center justify-between mt-1\">\n          <span className=\"text-xs opacity-70\">\n            {format(new Date(message.timestamp), 'HH:mm')}\n          </span>\n          {isOwnMessage && (\n            <span className=\"text-xs opacity-70\">\n              {message.readBy.length > 1 ? (\n                <CheckCheck className=\"h-3 w-3 inline\" />\n              ) : (\n                <Check className=\"h-3 w-3 inline\" />\n              )}\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16248},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// Performance Entry Schema\nexport const performanceEntrySchema = z.object({\n  id: z.string(),\n  date: z.string().optional().or(z.literal(\"\")), // Date field for the entry\n  link: z.string().url().optional().or(z.literal(\"\")),\n  title: z.string().optional().or(z.literal(\"\")),\n  views: z.number().optional(),\n  reach: z.number().optional(),\n  engagement: z.number().optional(),\n  voiceArtist: z.string().optional().or(z.literal(\"\")),\n  scriptWriter: z.string().optional().or(z.literal(\"\")),\n  videoEditor: z.string().optional().or(z.literal(\"\")),\n  topicSelector: z.string().optional().or(z.literal(\"\")),\n  mojoReporter: z.string().optional().or(z.literal(\"\")),\n  jelaReporter: z.string().optional().or(z.literal(\"\")),\n  photoCard: z.string().optional().or(z.literal(\"\")),\n  seo: z.string().optional().or(z.literal(\"\")),\n  websiteNews: z.string().optional().or(z.literal(\"\")),\n  contentStatus: z.enum([\n    \"writing\",\n    \"footage\",\n    \"voiceover\",\n    \"thumbnail\",\n    \"editing\",\n    \"ready\",\n    \"alldone\",\n    \"published\"\n  ]).optional(),\n  createdAt: z.string(), // ISO date string\n});\n\nexport const insertPerformanceEntrySchema = performanceEntrySchema.omit({ id: true, createdAt: true });\n\nexport type PerformanceEntry = z.infer<typeof performanceEntrySchema>;\nexport type InsertPerformanceEntry = z.infer<typeof insertPerformanceEntrySchema>;\n\n// Admin Settings Schema\nexport const adminSettingsSchema = z.object({\n  currentMonth: z.string(), // Format: \"YYYY-MM\"\n  employeeOfMonthMessage: z.string(),\n});\n\nexport type AdminSettings = z.infer<typeof adminSettingsSchema>;\n\n// YouTube Video Info Response\nexport const youtubeVideoInfoSchema = z.object({\n  title: z.string(),\n  views: z.number(),\n});\n\nexport type YouTubeVideoInfo = z.infer<typeof youtubeVideoInfoSchema>;\n\n// Employee Data Schema\nexport const employeeSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Name is required\"),\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n  designation: z.string().optional().or(z.literal(\"\")),\n  holiday: z.string().optional().or(z.literal(\"\")),\n  salary: z.string().optional().or(z.literal(\"\")),\n  address: z.string().optional().or(z.literal(\"\")),\n  phoneNumber: z.string().optional().or(z.literal(\"\")),\n  officeShift: z.string().optional().or(z.literal(\"\")),\n  officeInTime: z.string().optional().or(z.literal(\"\")),\n  officeOutTime: z.string().optional().or(z.literal(\"\")),\n  remarks: z.string().optional().or(z.literal(\"\")),\n  createdAt: z.string(),\n});\n\nexport const insertEmployeeSchema = employeeSchema.omit({ id: true, createdAt: true });\n\nexport type Employee = z.infer<typeof employeeSchema>;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\n\n// Jela Reporter Data Schema\nexport const jelaReporterSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Name is required\"),\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n  designation: z.string().optional().or(z.literal(\"\")),\n  address: z.string().optional().or(z.literal(\"\")),\n  phoneNumber: z.string().optional().or(z.literal(\"\")),\n  remarks: z.string().optional().or(z.literal(\"\")),\n  createdAt: z.string(),\n});\n\nexport const insertJelaReporterSchema = jelaReporterSchema.omit({ id: true, createdAt: true });\n\nexport type JelaReporter = z.infer<typeof jelaReporterSchema>;\nexport type InsertJelaReporter = z.infer<typeof insertJelaReporterSchema>;\n\n// Super Moderator Schema with permissions\nexport const superModeratorPermissionsSchema = z.object({\n  canViewDashboard: z.boolean().default(true),\n  canAddDashboard: z.boolean().default(false),\n  canEditDashboard: z.boolean().default(false),\n  canDeleteDashboard: z.boolean().default(false),\n  canViewVoiceArtist: z.boolean().default(true),\n  canAddVoiceArtist: z.boolean().default(false),\n  canEditVoiceArtist: z.boolean().default(false),\n  canDeleteVoiceArtist: z.boolean().default(false),\n  canViewAttendance: z.boolean().default(true),\n  canAddAttendance: z.boolean().default(false),\n  canEditAttendance: z.boolean().default(false),\n  canDeleteAttendance: z.boolean().default(false),\n  canViewWorkFlow: z.boolean().default(true),\n  canAddWorkFlow: z.boolean().default(false),\n  canEditWorkFlow: z.boolean().default(false),\n  canDeleteWorkFlow: z.boolean().default(false),\n  canViewVideoUpload: z.boolean().default(true),\n  canAddVideoUpload: z.boolean().default(false),\n  canEditVideoUpload: z.boolean().default(false),\n  canDeleteVideoUpload: z.boolean().default(false),\n  canViewComplaintBox: z.boolean().default(true),\n  canAddComplaintBox: z.boolean().default(false),\n  canViewRequisition: z.boolean().default(true),\n  canAddRequisition: z.boolean().default(false),\n  canEditRequisition: z.boolean().default(false),\n  canDeleteRequisition: z.boolean().default(false),\n  canViewExpense: z.boolean().default(true),\n  canAddExpense: z.boolean().default(false),\n  canEditExpense: z.boolean().default(false),\n  canDeleteExpense: z.boolean().default(false),\n});\n\nexport const superModeratorSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Name is required\"),\n  userId: z.string().min(1, \"User ID is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  permissions: superModeratorPermissionsSchema,\n  createdAt: z.string(),\n});\n\nexport type SuperModeratorPermissions = z.infer<typeof superModeratorPermissionsSchema>;\nexport type SuperModerator = z.infer<typeof superModeratorSchema>;\n\n// Complaint Box Schema\nexport const complaintSchema = z.object({\n  id: z.string(),\n  title: z.string().min(1, \"Title is required\"),\n  message: z.string().min(1, \"Message is required\"),\n  submittedBy: z.string(),\n  submittedByRole: z.string(),\n  status: z.enum([\"pending\", \"in-progress\", \"resolved\", \"closed\"]),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]).default(\"medium\"),\n  replies: z.array(z.object({\n    id: z.string(),\n    message: z.string(),\n    repliedBy: z.string(),\n    repliedByRole: z.string(),\n    timestamp: z.string(),\n  })),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\nexport type Complaint = z.infer<typeof complaintSchema>;\n\n// Requisition Sheet Schema\nexport const requisitionItemSchema = z.object({\n  id: z.string(),\n  sl: z.number(),\n  department: z.string(),\n  itemDescription: z.string(),\n  justification: z.string(),\n  quantity: z.number(),\n  unit: z.number(),\n  price: z.number(),\n  remarks: z.string().optional().or(z.literal(\"\")),\n});\n\nexport const requisitionSheetSchema = z.object({\n  id: z.string(),\n  month: z.string(),\n  year: z.string(),\n  items: z.array(requisitionItemSchema),\n  totalAmount: z.number(),\n  createdBy: z.string(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\nexport type RequisitionItem = z.infer<typeof requisitionItemSchema>;\nexport type RequisitionSheet = z.infer<typeof requisitionSheetSchema>;\n\n// Expense Sheet Schema\nexport const expenseItemSchema = z.object({\n  id: z.string(),\n  sl: z.number(),\n  details: z.string(),\n  amount: z.number(),\n});\n\nexport const expenseSheetSchema = z.object({\n  id: z.string(),\n  month: z.string(),\n  year: z.string(),\n  items: z.array(expenseItemSchema),\n  totalAmount: z.number(),\n  paidAmount: z.number(),\n  dueAmount: z.number(),\n  paidLabel: z.string().optional().or(z.literal(\"\")),\n  dueLabel: z.string().optional().or(z.literal(\"\")),\n  date: z.string(),\n  createdBy: z.string(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\nexport type ExpenseItem = z.infer<typeof expenseItemSchema>;\nexport type ExpenseSheet = z.infer<typeof expenseSheetSchema>;\n\n// Chat Box Schemas\nexport const chatMessageSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  userName: z.string(),\n  userRole: z.string(),\n  message: z.string(),\n  timestamp: z.string(),\n  fileUrl: z.string().optional(),\n  fileName: z.string().optional(),\n  fileType: z.string().optional(),\n  isPinned: z.boolean().default(false),\n  readBy: z.array(z.string()).default([]),\n  replyTo: z.object({\n    messageId: z.string(),\n    userName: z.string(),\n    message: z.string(),\n  }).optional(),\n  mentions: z.array(z.string()).default([]),\n});\n\nexport const chatUserStatusSchema = z.object({\n  userId: z.string(),\n  userName: z.string(),\n  userRole: z.string(),\n  status: z.enum([\"online\", \"offline\"]),\n  lastSeen: z.string(),\n});\n\nexport const chatSettingsSchema = z.object({\n  enabled: z.boolean().default(false),\n  fileSharingEnabled: z.boolean().default(true),\n  moderatorOnlyMode: z.boolean().default(false),\n});\n\nexport const blockedUserSchema = z.object({\n  userId: z.string(),\n  userName: z.string(),\n  blockedBy: z.string(),\n  blockedAt: z.string(),\n  reason: z.string().optional(),\n});\n\nexport const mutedUserSchema = z.object({\n  userId: z.string(),\n  userName: z.string(),\n  mutedBy: z.string(),\n  mutedAt: z.string(),\n  mutedUntil: z.string().optional(),\n});\n\nexport type ChatMessage = z.infer<typeof chatMessageSchema>;\nexport type ChatUserStatus = z.infer<typeof chatUserStatusSchema>;\nexport type ChatSettings = z.infer<typeof chatSettingsSchema>;\nexport type BlockedUser = z.infer<typeof blockedUserSchema>;\nexport type MutedUser = z.infer<typeof mutedUserSchema>;\n\n// WebSocket Message Types\nexport type WSMessage = \n  | { type: 'chat_message'; data: ChatMessage }\n  | { type: 'user_status'; data: ChatUserStatus }\n  | { type: 'message_read'; data: { messageId: string; userId: string } }\n  | { type: 'message_pinned'; data: { messageId: string; isPinned: boolean } }\n  | { type: 'user_blocked'; data: { userId: string } }\n  | { type: 'user_unblocked'; data: { userId: string } }\n  | { type: 'user_muted'; data: { userId: string } }\n  | { type: 'user_unmuted'; data: { userId: string } }\n  | { type: 'chat_cleared'; data: { clearedBy: string } }\n  | { type: 'user_typing'; data: { userId: string; userName: string; isTyping: boolean } }\n  | { type: 'request_user_list'; data: {} }\n  | { type: 'user_list'; data: ChatUserStatus[] };\n","size_bytes":9877},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  darkMode: [\"class\"],\n  content: [\n    \"./client/index.html\",\n    \"./client/src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\"\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\"\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\"\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\"\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\"\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\"\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\"\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\"\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\"\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\"\n        }\n      }\n    }\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}\n","size_bytes":2197},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/pages/video-upload-time.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, Trash2, Edit2, Printer } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport DashboardHeader from \"@/components/DashboardHeader\";\nimport Footer from \"@/components/Footer\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\ninterface UploadSchedule {\n  id: string;\n  videoCategory: string;\n  channelYT: string;\n  pageFB: string;\n  deliverTime: string;\n  uploadTime: string;\n}\n\nexport default function VideoUploadTime() {\n  const [schedules, setSchedules] = useState<UploadSchedule[]>([]);\n  const [editingSchedule, setEditingSchedule] = useState<UploadSchedule | null>(null);\n  const [isAddingNew, setIsAddingNew] = useState(false);\n  const [deleteId, setDeleteId] = useState<string | null>(null);\n  const { toast } = useToast();\n  const { hasPermission, userRole } = useAuth();\n  const canEdit = userRole === \"admin\" || hasPermission(\"canEditVideoUpload\") || hasPermission(\"canAddVideoUpload\");\n\n  const [formData, setFormData] = useState<Omit<UploadSchedule, \"id\">>({\n    videoCategory: \"\",\n    channelYT: \"\",\n    pageFB: \"\",\n    deliverTime: \"\",\n    uploadTime: \"\",\n  });\n\n  useEffect(() => {\n    const loadData = () => {\n      try {\n        const stored = localStorage.getItem(\"dob_upload_schedules\");\n        if (stored) {\n          setSchedules(JSON.parse(stored));\n        }\n      } catch (error) {\n        console.error(\"Failed to load upload schedules:\", error);\n      }\n    };\n    loadData();\n  }, []);\n\n  const saveSchedules = (newSchedules: UploadSchedule[]) => {\n    setSchedules(newSchedules);\n    localStorage.setItem(\"dob_upload_schedules\", JSON.stringify(newSchedules));\n  };\n\n  const handleAdd = () => {\n    if (!formData.videoCategory.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Video Category is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newSchedule: UploadSchedule = {\n      id: Date.now().toString(),\n      ...formData,\n    };\n\n    saveSchedules([...schedules, newSchedule]);\n    setFormData({\n      videoCategory: \"\",\n      channelYT: \"\",\n      pageFB: \"\",\n      deliverTime: \"\",\n      uploadTime: \"\",\n    });\n    setIsAddingNew(false);\n    toast({\n      title: \"Success\",\n      description: \"Upload schedule added successfully\",\n    });\n  };\n\n  const handleUpdate = () => {\n    if (!editingSchedule) return;\n\n    if (!formData.videoCategory.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Video Category is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const updatedSchedules = schedules.map(schedule =>\n      schedule.id === editingSchedule.id\n        ? { ...editingSchedule, ...formData }\n        : schedule\n    );\n\n    saveSchedules(updatedSchedules);\n    setEditingSchedule(null);\n    setFormData({\n      videoCategory: \"\",\n      channelYT: \"\",\n      pageFB: \"\",\n      deliverTime: \"\",\n      uploadTime: \"\",\n    });\n    toast({\n      title: \"Success\",\n      description: \"Upload schedule updated successfully\",\n    });\n  };\n\n  const handleDelete = () => {\n    if (!deleteId) return;\n\n    const newSchedules = schedules.filter(s => s.id !== deleteId);\n    saveSchedules(newSchedules);\n    setDeleteId(null);\n    toast({\n      title: \"Success\",\n      description: \"Upload schedule deleted successfully\",\n    });\n  };\n\n  const handleEdit = (schedule: UploadSchedule) => {\n    setEditingSchedule(schedule);\n    setFormData({\n      videoCategory: schedule.videoCategory,\n      channelYT: schedule.channelYT,\n      pageFB: schedule.pageFB,\n      deliverTime: schedule.deliverTime,\n      uploadTime: schedule.uploadTime,\n    });\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const resetForm = () => {\n    setFormData({\n      videoCategory: \"\",\n      channelYT: \"\",\n      pageFB: \"\",\n      deliverTime: \"\",\n      uploadTime: \"\",\n    });\n    setIsAddingNew(false);\n    setEditingSchedule(null);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      <DashboardHeader />\n      \n      <main className=\"flex-grow w-full px-6 py-6\">\n        <div className=\"mb-8 flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">Video Upload Time</h1>\n            <p className=\"text-muted-foreground\">Manage daily upload schedule for all video categories</p>\n          </div>\n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\" onClick={handlePrint}>\n              <Printer className=\"mr-2 h-4 w-4\" />\n              Print\n            </Button>\n            {canEdit && (\n              <Dialog open={isAddingNew} onOpenChange={setIsAddingNew}>\n                <DialogTrigger asChild>\n                  <Button>\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Add Schedule\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Add Upload Schedule</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Video Category *</label>\n                      <Input\n                        placeholder=\"e.g., News, Entertainment, Sports\"\n                        value={formData.videoCategory}\n                        onChange={(e) => setFormData({ ...formData, videoCategory: e.target.value })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Channel (YouTube)</label>\n                      <Input\n                        placeholder=\"YouTube upload time\"\n                        value={formData.channelYT}\n                        onChange={(e) => setFormData({ ...formData, channelYT: e.target.value })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Page (Facebook)</label>\n                      <Input\n                        placeholder=\"Facebook upload time\"\n                        value={formData.pageFB}\n                        onChange={(e) => setFormData({ ...formData, pageFB: e.target.value })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Script/Footage Deliver Time</label>\n                      <Input\n                        placeholder=\"e.g., 10:00 AM\"\n                        value={formData.deliverTime}\n                        onChange={(e) => setFormData({ ...formData, deliverTime: e.target.value })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Upload Time</label>\n                      <Input\n                        placeholder=\"e.g., 2:00 PM\"\n                        value={formData.uploadTime}\n                        onChange={(e) => setFormData({ ...formData, uploadTime: e.target.value })}\n                      />\n                    </div>\n                  </div>\n                  <DialogFooter>\n                    <Button variant=\"outline\" onClick={resetForm}>Cancel</Button>\n                    <Button onClick={handleAdd}>Add Schedule</Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            )}\n          </div>\n        </div>\n\n        <div className=\"bg-card rounded-lg border border-card-border overflow-hidden\">\n          <div className=\"print-header hidden print:block p-6 text-center border-b\">\n            <h2 className=\"text-2xl font-bold\">Daily Our Bangladesh</h2>\n            <h3 className=\"text-xl\">Video Upload Time Schedule</h3>\n          </div>\n\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-muted/50\">\n                  <TableHead className=\"font-bold\">Video Category</TableHead>\n                  <TableHead className=\"font-bold\">Channel (YT)</TableHead>\n                  <TableHead className=\"font-bold\">Page (FB)</TableHead>\n                  <TableHead className=\"font-bold\">Script/Footage Deliver Time</TableHead>\n                  <TableHead className=\"font-bold\">Upload Time</TableHead>\n                  {canEdit && <TableHead className=\"font-bold print:hidden\">Actions</TableHead>}\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {schedules.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={canEdit ? 6 : 5} className=\"text-center text-muted-foreground py-8\">\n                      No upload schedules added yet\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  schedules.map((schedule) => (\n                    <TableRow key={schedule.id} className=\"hover:bg-muted/30\">\n                      <TableCell className=\"font-medium\">{schedule.videoCategory}</TableCell>\n                      <TableCell>{schedule.channelYT || \"-\"}</TableCell>\n                      <TableCell>{schedule.pageFB || \"-\"}</TableCell>\n                      <TableCell>{schedule.deliverTime || \"-\"}</TableCell>\n                      <TableCell>{schedule.uploadTime || \"-\"}</TableCell>\n                      {canEdit && (\n                        <TableCell className=\"print:hidden\">\n                          <div className=\"flex gap-2\">\n                            {canEdit && (\n                              <Dialog \n                                open={editingSchedule?.id === schedule.id} \n                                onOpenChange={(open) => {\n                                  if (!open) {\n                                    setEditingSchedule(null);\n                                    resetForm();\n                                  }\n                                }}\n                              >\n                                <DialogTrigger asChild>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"icon\"\n                                    onClick={() => handleEdit(schedule)}\n                                  >\n                                    <Edit2 className=\"h-4 w-4\" />\n                                  </Button>\n                                </DialogTrigger>\n                              <DialogContent className=\"max-w-2xl\">\n                                <DialogHeader>\n                                  <DialogTitle>Edit Upload Schedule</DialogTitle>\n                                </DialogHeader>\n                                <div className=\"space-y-4\">\n                                  <div>\n                                    <label className=\"text-sm font-medium mb-2 block\">Video Category *</label>\n                                    <Input\n                                      placeholder=\"e.g., News, Entertainment, Sports\"\n                                      value={formData.videoCategory}\n                                      onChange={(e) => setFormData({ ...formData, videoCategory: e.target.value })}\n                                    />\n                                  </div>\n                                  <div>\n                                    <label className=\"text-sm font-medium mb-2 block\">Channel (YouTube)</label>\n                                    <Input\n                                      placeholder=\"YouTube upload time\"\n                                      value={formData.channelYT}\n                                      onChange={(e) => setFormData({ ...formData, channelYT: e.target.value })}\n                                    />\n                                  </div>\n                                  <div>\n                                    <label className=\"text-sm font-medium mb-2 block\">Page (Facebook)</label>\n                                    <Input\n                                      placeholder=\"Facebook upload time\"\n                                      value={formData.pageFB}\n                                      onChange={(e) => setFormData({ ...formData, pageFB: e.target.value })}\n                                    />\n                                  </div>\n                                  <div>\n                                    <label className=\"text-sm font-medium mb-2 block\">Script/Footage Deliver Time</label>\n                                    <Input\n                                      placeholder=\"e.g., 10:00 AM\"\n                                      value={formData.deliverTime}\n                                      onChange={(e) => setFormData({ ...formData, deliverTime: e.target.value })}\n                                    />\n                                  </div>\n                                  <div>\n                                    <label className=\"text-sm font-medium mb-2 block\">Upload Time</label>\n                                    <Input\n                                      placeholder=\"e.g., 2:00 PM\"\n                                      value={formData.uploadTime}\n                                      onChange={(e) => setFormData({ ...formData, uploadTime: e.target.value })}\n                                    />\n                                  </div>\n                                </div>\n                                <DialogFooter>\n                                  <Button variant=\"outline\" onClick={resetForm}>Cancel</Button>\n                                  <Button onClick={handleUpdate}>Save Changes</Button>\n                                </DialogFooter>\n                              </DialogContent>\n                            </Dialog>\n                            )}\n                            {canEdit && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={() => setDeleteId(schedule.id)}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            )}\n                          </div>\n                        </TableCell>\n                      )}\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n      </main>\n\n      <AlertDialog open={deleteId !== null} onOpenChange={() => setDeleteId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete the upload schedule.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <Footer />\n\n      <style>{`\n        @media print {\n          .print\\\\:hidden {\n            display: none !important;\n          }\n          .print\\\\:block {\n            display: block !important;\n          }\n          .print-header {\n            display: block !important;\n          }\n          body {\n            background: white !important;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":16183},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/pages/expense-sheet.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Trash2, Printer, Download, Calendar } from \"lucide-react\";\nimport DashboardHeader from \"@/components/DashboardHeader\";\nimport Footer from \"@/components/Footer\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport type { ExpenseSheet, ExpenseItem } from \"@shared/schema\";\nimport * as XLSX from \"xlsx\";\nimport { format } from \"date-fns\";\n\nexport default function ExpenseSheetPage() {\n  const { toast } = useToast();\n  const { user, userRole } = useAuth();\n  const isAdmin = userRole === \"admin\";\n\n  const [sheets, setSheets] = useState<ExpenseSheet[]>([]);\n  const [selectedMonth, setSelectedMonth] = useState<string>(new Date().toISOString().slice(0, 7));\n  const [currentSheet, setCurrentSheet] = useState<ExpenseSheet | null>(null);\n  const [sheetDate, setSheetDate] = useState<string>(new Date().toISOString().slice(0, 10));\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"dob_expense_sheets\");\n    if (stored) {\n      setSheets(JSON.parse(stored));\n    }\n  }, []);\n\n  useEffect(() => {\n    const [year, month] = selectedMonth.split(\"-\");\n    const existing = sheets.find(s => s.month === month && s.year === year);\n    \n    if (existing) {\n      const needsUpdate = !existing.paidLabel || !existing.dueLabel;\n      const updatedExisting = {\n        ...existing,\n        paidLabel: existing.paidLabel || \"Paid\",\n        dueLabel: existing.dueLabel || \"Due\",\n      };\n      \n      if (needsUpdate) {\n        const updatedSheets = sheets.map(s => \n          s.id === existing.id ? updatedExisting : s\n        );\n        setSheets(updatedSheets);\n        localStorage.setItem(\"dob_expense_sheets\", JSON.stringify(updatedSheets));\n      }\n      \n      setCurrentSheet(updatedExisting);\n      setSheetDate(existing.date);\n    } else {\n      const newSheet: ExpenseSheet = {\n        id: crypto.randomUUID(),\n        month: month,\n        year: year,\n        items: [],\n        totalAmount: 0,\n        paidAmount: 0,\n        dueAmount: 0,\n        paidLabel: \"Paid\",\n        dueLabel: \"Due\",\n        date: sheetDate,\n        createdBy: user?.name || user?.userId || \"Unknown\",\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n      setCurrentSheet(newSheet);\n    }\n  }, [selectedMonth, sheets, user, sheetDate]);\n\n  const saveSheet = (sheet: ExpenseSheet) => {\n    const updated = sheets.filter(s => s.id !== sheet.id);\n    const newSheets = [...updated, sheet];\n    setSheets(newSheets);\n    localStorage.setItem(\"dob_expense_sheets\", JSON.stringify(newSheets));\n    setCurrentSheet(sheet);\n  };\n\n  const handleAddItem = () => {\n    if (!currentSheet) return;\n\n    const newItem: ExpenseItem = {\n      id: crypto.randomUUID(),\n      sl: currentSheet.items.length + 1,\n      details: \"\",\n      amount: 0,\n    };\n\n    const updatedSheet = {\n      ...currentSheet,\n      items: [...currentSheet.items, newItem],\n      updatedAt: new Date().toISOString(),\n    };\n\n    saveSheet(updatedSheet);\n\n    toast({\n      title: \"Item Added\",\n      description: \"New expense item added\",\n    });\n  };\n\n  const handleUpdateItem = (itemId: string, field: keyof ExpenseItem, value: any) => {\n    if (!currentSheet) return;\n\n    const updatedItems = currentSheet.items.map(item => \n      item.id === itemId ? { ...item, [field]: value } : item\n    );\n\n    const totalAmount = updatedItems.reduce((sum, item) => sum + item.amount, 0);\n    const dueAmount = totalAmount - currentSheet.paidAmount;\n\n    const updatedSheet = {\n      ...currentSheet,\n      items: updatedItems,\n      totalAmount,\n      dueAmount,\n      updatedAt: new Date().toISOString(),\n    };\n\n    saveSheet(updatedSheet);\n  };\n\n  const handleUpdatePaid = (paid: number) => {\n    if (!currentSheet) return;\n\n    const dueAmount = currentSheet.totalAmount - paid;\n\n    const updatedSheet = {\n      ...currentSheet,\n      paidAmount: paid,\n      dueAmount,\n      updatedAt: new Date().toISOString(),\n    };\n\n    saveSheet(updatedSheet);\n  };\n\n  const handleUpdateDue = (due: number) => {\n    if (!currentSheet) return;\n\n    const paidAmount = currentSheet.totalAmount - due;\n\n    const updatedSheet = {\n      ...currentSheet,\n      paidAmount,\n      dueAmount: due,\n      updatedAt: new Date().toISOString(),\n    };\n\n    saveSheet(updatedSheet);\n  };\n\n  const handleUpdatePaidLabel = (label: string) => {\n    if (!currentSheet) return;\n\n    const updatedSheet = {\n      ...currentSheet,\n      paidLabel: label,\n      updatedAt: new Date().toISOString(),\n    };\n\n    saveSheet(updatedSheet);\n  };\n\n  const handleUpdateDueLabel = (label: string) => {\n    if (!currentSheet) return;\n\n    const updatedSheet = {\n      ...currentSheet,\n      dueLabel: label,\n      updatedAt: new Date().toISOString(),\n    };\n\n    saveSheet(updatedSheet);\n  };\n\n  const handleUpdateDate = (date: string) => {\n    if (!currentSheet) return;\n\n    const updatedSheet = {\n      ...currentSheet,\n      date,\n      updatedAt: new Date().toISOString(),\n    };\n\n    saveSheet(updatedSheet);\n    setSheetDate(date);\n  };\n\n  const handleDeleteItem = (itemId: string) => {\n    if (!currentSheet) return;\n\n    const updatedItems = currentSheet.items\n      .filter(item => item.id !== itemId)\n      .map((item, index) => ({ ...item, sl: index + 1 }));\n\n    const totalAmount = updatedItems.reduce((sum, item) => sum + item.amount, 0);\n    const dueAmount = totalAmount - currentSheet.paidAmount;\n\n    const updatedSheet = {\n      ...currentSheet,\n      items: updatedItems,\n      totalAmount,\n      dueAmount,\n      updatedAt: new Date().toISOString(),\n    };\n\n    saveSheet(updatedSheet);\n\n    toast({\n      title: \"Item Deleted\",\n      description: \"Expense item removed\",\n    });\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const handleExportExcel = () => {\n    if (!currentSheet || currentSheet.items.length === 0) {\n      toast({\n        title: \"No Data\",\n        description: \"Add items before exporting\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data = currentSheet.items.map(item => ({\n      \"SL\": item.sl,\n      \"Details\": item.details,\n      \"Taka\": item.amount,\n    }));\n\n    data.push(\n      { \"SL\": \"\", \"Details\": \"Total\", \"Taka\": currentSheet.totalAmount } as any,\n      { \"SL\": \"\", \"Details\": currentSheet.paidLabel || \"Paid\", \"Taka\": currentSheet.paidAmount } as any,\n      { \"SL\": \"\", \"Details\": currentSheet.dueLabel || \"Due\", \"Taka\": currentSheet.dueAmount } as any,\n    );\n\n    const ws = XLSX.utils.json_to_sheet(data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"Expenses\");\n    XLSX.writeFile(wb, `Expense_Sheet_${currentSheet.month}_${currentSheet.year}.xlsx`);\n\n    toast({\n      title: \"Excel Exported\",\n      description: \"Expense sheet has been exported\",\n    });\n  };\n\n  const monthName = useMemo(() => {\n    if (!currentSheet) return \"\";\n    const date = new Date(`${currentSheet.year}-${currentSheet.month}-01`);\n    return date.toLocaleDateString(\"en-US\", { month: \"long\", year: \"numeric\" });\n  }, [currentSheet]);\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      <DashboardHeader />\n      <div className=\"w-full px-6 py-6 flex-1\">\n        <div className=\"max-w-5xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\">Expense Sheet</h1>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Track monthly expenses and payments\n              </p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={handlePrint} className=\"gap-2 print:hidden\">\n                <Printer className=\"w-4 h-4\" />\n                Print\n              </Button>\n              <Button variant=\"outline\" onClick={handleExportExcel} className=\"gap-2 print:hidden\">\n                <Download className=\"w-4 h-4\" />\n                Export Excel\n              </Button>\n            </div>\n          </div>\n\n          <Card className=\"mb-6 shadow-sm print:hidden\">\n            <CardHeader>\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5 text-primary\" />\n                <CardTitle className=\"text-lg\">Select Month</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <Input\n                type=\"month\"\n                value={selectedMonth}\n                onChange={(e) => setSelectedMonth(e.target.value)}\n                className=\"max-w-xs\"\n              />\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\">\n            <CardHeader className=\"print:pb-2\">\n              <CardTitle className=\"text-xl text-center\">\n                Daily Our Bangladesh – Expense Month of {monthName}\n              </CardTitle>\n              <CardDescription className=\"text-center print:hidden\">\n                Prepared by: {currentSheet?.createdBy}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full border-collapse\">\n                  <thead>\n                    <tr className=\"border-b-2 border-border\">\n                      <th className=\"p-3 text-left text-sm font-semibold w-16\">SL</th>\n                      <th className=\"p-3 text-left text-sm font-semibold\">Details</th>\n                      <th className=\"p-3 text-left text-sm font-semibold w-32\">Taka</th>\n                      <th className=\"p-3 text-center w-16 print:hidden\">Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {currentSheet?.items.map((item) => (\n                      <tr key={item.id} className=\"border-b border-border hover:bg-muted/50\">\n                        <td className=\"p-2 text-sm\">{item.sl}</td>\n                        <td className=\"p-2\">\n                          <Input\n                            value={item.details}\n                            onChange={(e) => handleUpdateItem(item.id, \"details\", e.target.value)}\n                            className=\"h-8 text-sm\"\n                            placeholder=\"Expense details\"\n                          />\n                        </td>\n                        <td className=\"p-2\">\n                          <Input\n                            type=\"number\"\n                            value={item.amount || \"\"}\n                            onChange={(e) => handleUpdateItem(item.id, \"amount\", parseFloat(e.target.value) || 0)}\n                            className=\"h-8 text-sm\"\n                            placeholder=\"0\"\n                          />\n                        </td>\n                        <td className=\"p-2 text-center print:hidden\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteItem(item.id)}\n                            className=\"h-8 w-8 p-0\"\n                          >\n                            <Trash2 className=\"w-4 h-4 text-destructive\" />\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                  <tfoot className=\"border-t-2 border-border\">\n                    <tr className=\"bg-muted/30\">\n                      <td className=\"p-3\" colSpan={2}>\n                        <span className=\"font-bold text-base\">Total</span>\n                      </td>\n                      <td className=\"p-3 font-bold text-lg\">\n                        {currentSheet?.totalAmount.toFixed(2)}\n                      </td>\n                      <td className=\"print:hidden\"></td>\n                    </tr>\n                    <tr className=\"bg-muted/20\">\n                      <td className=\"p-3\" colSpan={2}>\n                        <Input\n                          type=\"text\"\n                          value={currentSheet?.paidLabel || \"Paid\"}\n                          onChange={(e) => handleUpdatePaidLabel(e.target.value)}\n                          className=\"h-9 font-semibold print:hidden\"\n                          placeholder=\"Enter label (e.g., Paid)\"\n                          data-testid=\"input-paid-label\"\n                        />\n                        <span className=\"hidden print:inline-block font-semibold\">\n                          {currentSheet?.paidLabel || \"Paid\"}\n                        </span>\n                      </td>\n                      <td className=\"p-3\">\n                        <Input\n                          type=\"number\"\n                          value={currentSheet?.paidAmount || \"\"}\n                          onChange={(e) => handleUpdatePaid(parseFloat(e.target.value) || 0)}\n                          className=\"h-9 font-semibold print:hidden\"\n                          placeholder=\"0\"\n                          data-testid=\"input-paid\"\n                        />\n                        <span className=\"hidden print:inline-block font-semibold\">\n                          {currentSheet?.paidAmount.toFixed(2)}\n                        </span>\n                      </td>\n                      <td className=\"print:hidden\"></td>\n                    </tr>\n                    <tr className=\"bg-muted/10\">\n                      <td className=\"p-3\" colSpan={2}>\n                        <Input\n                          type=\"text\"\n                          value={currentSheet?.dueLabel || \"Due\"}\n                          onChange={(e) => handleUpdateDueLabel(e.target.value)}\n                          className=\"h-9 font-semibold print:hidden\"\n                          placeholder=\"Enter label (e.g., Due)\"\n                          data-testid=\"input-due-label\"\n                        />\n                        <span className=\"hidden print:inline-block font-semibold\">\n                          {currentSheet?.dueLabel || \"Due\"}\n                        </span>\n                      </td>\n                      <td className=\"p-3\">\n                        <Input\n                          type=\"number\"\n                          value={currentSheet?.dueAmount || \"\"}\n                          onChange={(e) => handleUpdateDue(parseFloat(e.target.value) || 0)}\n                          className=\"h-9 font-semibold text-destructive print:hidden\"\n                          placeholder=\"0\"\n                          data-testid=\"input-due\"\n                        />\n                        <span className=\"hidden print:inline-block font-bold text-lg text-destructive\">\n                          {currentSheet?.dueAmount.toFixed(2)}\n                        </span>\n                      </td>\n                      <td className=\"print:hidden\"></td>\n                    </tr>\n                  </tfoot>\n                </table>\n              </div>\n\n              <div className=\"flex justify-between items-center pt-4 border-t\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm font-medium\">Date:</span>\n                  <Input\n                    type=\"date\"\n                    value={sheetDate}\n                    onChange={(e) => handleUpdateDate(e.target.value)}\n                    className=\"h-8 w-40 print:hidden\"\n                  />\n                  <span className=\"hidden print:inline-block text-sm\">\n                    {format(new Date(sheetDate), \"dd/MM/yyyy\")}\n                  </span>\n                </div>\n                <Button onClick={handleAddItem} className=\"gap-2 print:hidden\">\n                  <Plus className=\"w-4 h-4\" />\n                  Add Item\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      <Footer />\n\n      <style>{`\n        @media print {\n          .print\\\\:hidden {\n            display: none !important;\n          }\n          .print\\\\:inline-block {\n            display: inline-block !important;\n          }\n          body {\n            print-color-adjust: exact;\n            -webkit-print-color-adjust: exact;\n          }\n          @page {\n            margin: 1cm;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":16566},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/pages/requisition-sheet.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Trash2, Printer, Download, Calendar } from \"lucide-react\";\nimport DashboardHeader from \"@/components/DashboardHeader\";\nimport Footer from \"@/components/Footer\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport type { RequisitionSheet, RequisitionItem } from \"@shared/schema\";\nimport * as XLSX from \"xlsx\";\n\nexport default function RequisitionSheetPage() {\n  const { toast } = useToast();\n  const { user, userRole } = useAuth();\n  const isAdmin = userRole === \"admin\";\n\n  const [sheets, setSheets] = useState<RequisitionSheet[]>([]);\n  const [selectedMonth, setSelectedMonth] = useState<string>(new Date().toISOString().slice(0, 7));\n  const [currentSheet, setCurrentSheet] = useState<RequisitionSheet | null>(null);\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"dob_requisition_sheets\");\n    if (stored) {\n      setSheets(JSON.parse(stored));\n    }\n  }, []);\n\n  useEffect(() => {\n    const [year, month] = selectedMonth.split(\"-\");\n    const existing = sheets.find(s => s.month === month && s.year === year);\n    \n    if (existing) {\n      setCurrentSheet(existing);\n    } else {\n      const newSheet: RequisitionSheet = {\n        id: crypto.randomUUID(),\n        month: month,\n        year: year,\n        items: [],\n        totalAmount: 0,\n        createdBy: user?.name || user?.userId || \"Unknown\",\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n      setCurrentSheet(newSheet);\n    }\n  }, [selectedMonth, sheets, user]);\n\n  const saveSheet = (sheet: RequisitionSheet) => {\n    const updated = sheets.filter(s => s.id !== sheet.id);\n    const newSheets = [...updated, sheet];\n    setSheets(newSheets);\n    localStorage.setItem(\"dob_requisition_sheets\", JSON.stringify(newSheets));\n    setCurrentSheet(sheet);\n  };\n\n  const handleAddItem = () => {\n    if (!currentSheet) return;\n\n    const newItem: RequisitionItem = {\n      id: crypto.randomUUID(),\n      sl: currentSheet.items.length + 1,\n      department: \"\",\n      itemDescription: \"\",\n      justification: \"\",\n      quantity: 0,\n      unit: 0,\n      price: 0,\n      remarks: \"\",\n    };\n\n    const updatedSheet = {\n      ...currentSheet,\n      items: [...currentSheet.items, newItem],\n      updatedAt: new Date().toISOString(),\n    };\n\n    saveSheet(updatedSheet);\n\n    toast({\n      title: \"Item Added\",\n      description: \"New requisition item added\",\n    });\n  };\n\n  const handleUpdateItem = (itemId: string, field: keyof RequisitionItem, value: any) => {\n    if (!currentSheet) return;\n\n    const updatedItems = currentSheet.items.map(item => {\n      if (item.id === itemId) {\n        const updated = { ...item, [field]: value };\n        if (field === \"quantity\" || field === \"unit\") {\n          updated.price = updated.quantity * updated.unit;\n        }\n        return updated;\n      }\n      return item;\n    });\n\n    const totalAmount = updatedItems.reduce((sum, item) => sum + item.price, 0);\n\n    const updatedSheet = {\n      ...currentSheet,\n      items: updatedItems,\n      totalAmount,\n      updatedAt: new Date().toISOString(),\n    };\n\n    saveSheet(updatedSheet);\n  };\n\n  const handleDeleteItem = (itemId: string) => {\n    if (!currentSheet) return;\n\n    const updatedItems = currentSheet.items\n      .filter(item => item.id !== itemId)\n      .map((item, index) => ({ ...item, sl: index + 1 }));\n\n    const totalAmount = updatedItems.reduce((sum, item) => sum + item.price, 0);\n\n    const updatedSheet = {\n      ...currentSheet,\n      items: updatedItems,\n      totalAmount,\n      updatedAt: new Date().toISOString(),\n    };\n\n    saveSheet(updatedSheet);\n\n    toast({\n      title: \"Item Deleted\",\n      description: \"Requisition item removed\",\n    });\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const handleExportExcel = () => {\n    if (!currentSheet || currentSheet.items.length === 0) {\n      toast({\n        title: \"No Data\",\n        description: \"Add items before exporting\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data = currentSheet.items.map(item => ({\n      \"SL\": item.sl,\n      \"Department\": item.department,\n      \"Item Description\": item.itemDescription,\n      \"Justification\": item.justification,\n      \"QTY\": item.quantity,\n      \"Unit (৳)\": item.unit,\n      \"Price (৳)\": item.price,\n      \"Remarks\": item.remarks || \"\",\n    }));\n\n    data.push({\n      \"SL\": \"\",\n      \"Department\": \"\",\n      \"Item Description\": \"\",\n      \"Justification\": \"\",\n      \"QTY\": \"\",\n      \"Unit (৳)\": \"Total:\",\n      \"Price (৳)\": currentSheet.totalAmount,\n      \"Remarks\": \"\",\n    } as any);\n\n    const ws = XLSX.utils.json_to_sheet(data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"Requisition\");\n    XLSX.writeFile(wb, `Requisition_Sheet_${currentSheet.month}_${currentSheet.year}.xlsx`);\n\n    toast({\n      title: \"Excel Exported\",\n      description: \"Requisition sheet has been exported\",\n    });\n  };\n\n  const monthName = useMemo(() => {\n    if (!currentSheet) return \"\";\n    const date = new Date(`${currentSheet.year}-${currentSheet.month}-01`);\n    return date.toLocaleDateString(\"en-US\", { month: \"long\", year: \"numeric\" });\n  }, [currentSheet]);\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      <DashboardHeader />\n      <div className=\"w-full px-6 py-6 flex-1\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\">Requisition Sheet - 2025</h1>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Manage department requisitions and budgets\n              </p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={handlePrint} className=\"gap-2 print:hidden\">\n                <Printer className=\"w-4 h-4\" />\n                Print\n              </Button>\n              <Button variant=\"outline\" onClick={handleExportExcel} className=\"gap-2 print:hidden\">\n                <Download className=\"w-4 h-4\" />\n                Export Excel\n              </Button>\n            </div>\n          </div>\n\n          <Card className=\"mb-6 shadow-sm print:hidden\">\n            <CardHeader>\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5 text-primary\" />\n                <CardTitle className=\"text-lg\">Select Month</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <Input\n                type=\"month\"\n                value={selectedMonth}\n                onChange={(e) => setSelectedMonth(e.target.value)}\n                className=\"max-w-xs\"\n              />\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\">\n            <CardHeader className=\"print:pb-2\">\n              <CardTitle className=\"text-xl text-center\">\n                Daily Our Bangladesh - Requisition for {monthName}\n              </CardTitle>\n              <CardDescription className=\"text-center print:hidden\">\n                Submitted by: {currentSheet?.createdBy}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full border-collapse\">\n                  <thead>\n                    <tr className=\"border-b-2 border-border\">\n                      <th className=\"p-3 text-left text-sm font-semibold w-12\">SL</th>\n                      <th className=\"p-3 text-left text-sm font-semibold min-w-[120px]\">Department</th>\n                      <th className=\"p-3 text-left text-sm font-semibold min-w-[200px]\">Item Description</th>\n                      <th className=\"p-3 text-left text-sm font-semibold min-w-[150px]\">Justification</th>\n                      <th className=\"p-3 text-left text-sm font-semibold w-20\">QTY</th>\n                      <th className=\"p-3 text-left text-sm font-semibold w-24\">Unit(৳)</th>\n                      <th className=\"p-3 text-left text-sm font-semibold w-28\">Price(৳)</th>\n                      <th className=\"p-3 text-left text-sm font-semibold min-w-[120px]\">Remarks</th>\n                      <th className=\"p-3 text-center w-16 print:hidden\">Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {currentSheet?.items.map((item) => (\n                      <tr key={item.id} className=\"border-b border-border hover:bg-muted/50\">\n                        <td className=\"p-2 text-sm\">{item.sl}</td>\n                        <td className=\"p-2\">\n                          <Input\n                            value={item.department}\n                            onChange={(e) => handleUpdateItem(item.id, \"department\", e.target.value)}\n                            className=\"h-8 text-sm\"\n                            placeholder=\"Department\"\n                          />\n                        </td>\n                        <td className=\"p-2\">\n                          <Input\n                            value={item.itemDescription}\n                            onChange={(e) => handleUpdateItem(item.id, \"itemDescription\", e.target.value)}\n                            className=\"h-8 text-sm\"\n                            placeholder=\"Item description\"\n                          />\n                        </td>\n                        <td className=\"p-2\">\n                          <Input\n                            value={item.justification}\n                            onChange={(e) => handleUpdateItem(item.id, \"justification\", e.target.value)}\n                            className=\"h-8 text-sm\"\n                            placeholder=\"Justification\"\n                          />\n                        </td>\n                        <td className=\"p-2\">\n                          <Input\n                            type=\"number\"\n                            value={item.quantity || \"\"}\n                            onChange={(e) => handleUpdateItem(item.id, \"quantity\", parseFloat(e.target.value) || 0)}\n                            className=\"h-8 text-sm\"\n                            placeholder=\"0\"\n                          />\n                        </td>\n                        <td className=\"p-2\">\n                          <Input\n                            type=\"number\"\n                            value={item.unit || \"\"}\n                            onChange={(e) => handleUpdateItem(item.id, \"unit\", parseFloat(e.target.value) || 0)}\n                            className=\"h-8 text-sm\"\n                            placeholder=\"0\"\n                          />\n                        </td>\n                        <td className=\"p-2\">\n                          <div className=\"h-8 flex items-center text-sm font-semibold\">\n                            {item.price.toFixed(2)}\n                          </div>\n                        </td>\n                        <td className=\"p-2\">\n                          <Input\n                            value={item.remarks || \"\"}\n                            onChange={(e) => handleUpdateItem(item.id, \"remarks\", e.target.value)}\n                            className=\"h-8 text-sm\"\n                            placeholder=\"Remarks\"\n                          />\n                        </td>\n                        <td className=\"p-2 text-center print:hidden\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteItem(item.id)}\n                            className=\"h-8 w-8 p-0\"\n                          >\n                            <Trash2 className=\"w-4 h-4 text-destructive\" />\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                  <tfoot>\n                    <tr className=\"border-t-2 border-border bg-muted/30\">\n                      <td colSpan={6} className=\"p-3 text-right font-semibold\">Total Amount (৳):</td>\n                      <td className=\"p-3 text-left font-bold text-lg\">\n                        {currentSheet?.totalAmount.toFixed(2)}\n                      </td>\n                      <td colSpan={2}></td>\n                    </tr>\n                  </tfoot>\n                </table>\n              </div>\n\n              <div className=\"flex justify-center print:hidden\">\n                <Button onClick={handleAddItem} className=\"gap-2\">\n                  <Plus className=\"w-4 h-4\" />\n                  Add Item\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      <Footer />\n\n      <style>{`\n        @media print {\n          .print\\\\:hidden {\n            display: none !important;\n          }\n          body {\n            print-color-adjust: exact;\n            -webkit-print-color-adjust: exact;\n          }\n          @page {\n            margin: 1cm;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":13529},"client/src/contexts/ChatContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport { nanoid } from 'nanoid';\nimport type { ChatMessage, ChatUserStatus, WSMessage, ChatSettings, BlockedUser, MutedUser } from '@shared/schema';\nimport { useAuth } from './AuthContext';\n\ninterface ChatContextType {\n  messages: ChatMessage[];\n  onlineUsers: ChatUserStatus[];\n  isConnected: boolean;\n  settings: ChatSettings;\n  blockedUsers: BlockedUser[];\n  mutedUsers: MutedUser[];\n  sendMessage: (message: string, file?: File, replyTo?: { messageId: string; userName: string; message: string }, mentions?: string[]) => void;\n  sendTypingIndicator: (isTyping: boolean) => void;\n  markMessageAsRead: (messageId: string) => void;\n  pinMessage: (messageId: string, isPinned: boolean) => void;\n  blockUser: (userId: string, userName: string, reason?: string) => void;\n  muteUser: (userId: string, userName: string, duration?: string) => void;\n  unblockUser: (userId: string) => void;\n  unmuteUser: (userId: string) => void;\n  clearAllMessages: () => void;\n  clearUserMessages: (userId: string) => void;\n  updateSettings: (newSettings: Partial<ChatSettings>) => void;\n  isUserBlocked: (userId: string) => boolean;\n  isUserMuted: (userId: string) => boolean;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\nexport function ChatProvider({ children }: { children: React.ReactNode }) {\n  const { user } = useAuth();\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [onlineUsers, setOnlineUsers] = useState<ChatUserStatus[]>([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const [settings, setSettings] = useState<ChatSettings>({\n    enabled: false,\n    fileSharingEnabled: true,\n    moderatorOnlyMode: false,\n  });\n  const [blockedUsers, setBlockedUsers] = useState<BlockedUser[]>([]);\n  const [mutedUsers, setMutedUsers] = useState<MutedUser[]>([]);\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    const storedMessages = localStorage.getItem('dob_chat_messages');\n    if (storedMessages) {\n      setMessages(JSON.parse(storedMessages));\n    }\n\n    const storedSettings = localStorage.getItem('dob_chat_settings');\n    if (storedSettings) {\n      setSettings(JSON.parse(storedSettings));\n    }\n\n    const storedBlocked = localStorage.getItem('dob_chat_blocked_users');\n    if (storedBlocked) {\n      setBlockedUsers(JSON.parse(storedBlocked));\n    }\n\n    const storedMuted = localStorage.getItem('dob_chat_muted_users');\n    if (storedMuted) {\n      setMutedUsers(JSON.parse(storedMuted));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('dob_chat_messages', JSON.stringify(messages));\n  }, [messages]);\n\n  useEffect(() => {\n    localStorage.setItem('dob_chat_settings', JSON.stringify(settings));\n  }, [settings]);\n\n  useEffect(() => {\n    localStorage.setItem('dob_chat_blocked_users', JSON.stringify(blockedUsers));\n  }, [blockedUsers]);\n\n  useEffect(() => {\n    localStorage.setItem('dob_chat_muted_users', JSON.stringify(mutedUsers));\n  }, [mutedUsers]);\n\n  const connectWebSocket = useCallback(() => {\n    if (!user || !settings.enabled) return;\n\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n\n    try {\n      const ws = new WebSocket(wsUrl);\n\n      ws.onopen = () => {\n        console.log('WebSocket connected');\n        setIsConnected(true);\n        \n        const statusMessage: WSMessage = {\n          type: 'user_status',\n          data: {\n            userId: user.userId,\n            userName: user.name || user.userId,\n            userRole: user.role,\n            status: 'online',\n            lastSeen: new Date().toISOString(),\n          }\n        };\n        ws.send(JSON.stringify(statusMessage));\n\n        const requestUserList: WSMessage = {\n          type: 'request_user_list',\n          data: {}\n        };\n        ws.send(JSON.stringify(requestUserList));\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const message: WSMessage = JSON.parse(event.data);\n\n          switch (message.type) {\n            case 'chat_message':\n              setMessages(prev => [...prev, message.data]);\n              break;\n\n            case 'user_status':\n              setOnlineUsers(prev => {\n                const filtered = prev.filter(u => u.userId !== message.data.userId);\n                if (message.data.status === 'online') {\n                  return [...filtered, message.data];\n                }\n                return filtered;\n              });\n              break;\n\n            case 'user_list':\n              setOnlineUsers(message.data);\n              break;\n\n            case 'message_read':\n              setMessages(prev => prev.map(msg => \n                msg.id === message.data.messageId\n                  ? { ...msg, readBy: [...new Set([...msg.readBy, message.data.userId])] }\n                  : msg\n              ));\n              break;\n\n            case 'message_pinned':\n              setMessages(prev => prev.map(msg =>\n                msg.id === message.data.messageId\n                  ? { ...msg, isPinned: message.data.isPinned }\n                  : msg\n              ));\n              break;\n\n            case 'user_blocked':\n              setBlockedUsers(prev => {\n                if (prev.some(u => u.userId === message.data.userId)) {\n                  return prev;\n                }\n                return [...prev, {\n                  userId: message.data.userId,\n                  userName: '',\n                  blockedBy: 'admin',\n                  blockedAt: new Date().toISOString(),\n                }];\n              });\n              break;\n\n            case 'user_unblocked':\n              setBlockedUsers(prev => prev.filter(u => u.userId !== message.data.userId));\n              break;\n\n            case 'user_muted':\n              setMutedUsers(prev => {\n                if (prev.some(u => u.userId === message.data.userId)) {\n                  return prev;\n                }\n                return [...prev, {\n                  userId: message.data.userId,\n                  userName: '',\n                  mutedBy: 'admin',\n                  mutedAt: new Date().toISOString(),\n                }];\n              });\n              break;\n\n            case 'user_unmuted':\n              setMutedUsers(prev => prev.filter(u => u.userId !== message.data.userId));\n              break;\n\n            case 'chat_cleared':\n              setMessages([]);\n              break;\n\n            default:\n              break;\n          }\n        } catch (error) {\n          console.error('Error processing WebSocket message:', error);\n        }\n      };\n\n      ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        setIsConnected(false);\n        setOnlineUsers([]);\n        \n        reconnectTimeoutRef.current = setTimeout(() => {\n          connectWebSocket();\n        }, 3000);\n      };\n\n      ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n\n      wsRef.current = ws;\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n    }\n  }, [user, settings.enabled]);\n\n  useEffect(() => {\n    connectWebSocket();\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n    };\n  }, [connectWebSocket]);\n\n  const sendMessage = useCallback((message: string, file?: File, replyTo?: { messageId: string; userName: string; message: string }, mentions?: string[]) => {\n    if (!wsRef.current || !user) return;\n\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const chatMessage: ChatMessage = {\n          id: nanoid(),\n          userId: user.userId,\n          userName: user.name || user.userId,\n          userRole: user.role,\n          message,\n          timestamp: new Date().toISOString(),\n          fileUrl: e.target?.result as string,\n          fileName: file.name,\n          fileType: file.type,\n          isPinned: false,\n          readBy: [user.userId],\n          replyTo,\n          mentions: mentions || [],\n        };\n\n        setMessages(prev => [...prev, chatMessage]);\n\n        const wsMessage: WSMessage = {\n          type: 'chat_message',\n          data: chatMessage,\n        };\n\n        wsRef.current?.send(JSON.stringify(wsMessage));\n      };\n      reader.readAsDataURL(file);\n    } else {\n      const chatMessage: ChatMessage = {\n        id: nanoid(),\n        userId: user.userId,\n        userName: user.name || user.userId,\n        userRole: user.role,\n        message,\n        timestamp: new Date().toISOString(),\n        isPinned: false,\n        readBy: [user.userId],\n        replyTo,\n        mentions: mentions || [],\n      };\n\n      setMessages(prev => [...prev, chatMessage]);\n\n      const wsMessage: WSMessage = {\n        type: 'chat_message',\n        data: chatMessage,\n      };\n\n      wsRef.current.send(JSON.stringify(wsMessage));\n    }\n  }, [user]);\n\n  const sendTypingIndicator = useCallback((isTyping: boolean) => {\n    if (!wsRef.current || !user) return;\n\n    const message: WSMessage = {\n      type: 'user_typing',\n      data: {\n        userId: user.userId,\n        userName: user.name || user.userId,\n        isTyping,\n      }\n    };\n\n    wsRef.current.send(JSON.stringify(message));\n  }, [user]);\n\n  const markMessageAsRead = useCallback((messageId: string) => {\n    if (!wsRef.current || !user) return;\n\n    const message: WSMessage = {\n      type: 'message_read',\n      data: { messageId, userId: user.userId }\n    };\n\n    wsRef.current.send(JSON.stringify(message));\n  }, [user]);\n\n  const pinMessage = useCallback((messageId: string, isPinned: boolean) => {\n    if (!wsRef.current || !user || user.role !== 'admin') return;\n\n    const message: WSMessage = {\n      type: 'message_pinned',\n      data: { messageId, isPinned }\n    };\n\n    wsRef.current.send(JSON.stringify(message));\n  }, [user]);\n\n  const blockUser = useCallback((userId: string, userName: string, reason?: string) => {\n    if (!user || user.role !== 'admin') return;\n\n    const blockedUser: BlockedUser = {\n      userId,\n      userName,\n      blockedBy: user.userId,\n      blockedAt: new Date().toISOString(),\n      reason,\n    };\n\n    setBlockedUsers(prev => [...prev, blockedUser]);\n\n    if (wsRef.current) {\n      const message: WSMessage = {\n        type: 'user_blocked',\n        data: { userId }\n      };\n      wsRef.current.send(JSON.stringify(message));\n    }\n  }, [user]);\n\n  const muteUser = useCallback((userId: string, userName: string, duration?: string) => {\n    if (!user || user.role !== 'admin') return;\n\n    const mutedUser: MutedUser = {\n      userId,\n      userName,\n      mutedBy: user.userId,\n      mutedAt: new Date().toISOString(),\n      mutedUntil: duration,\n    };\n\n    setMutedUsers(prev => [...prev, mutedUser]);\n\n    if (wsRef.current) {\n      const message: WSMessage = {\n        type: 'user_muted',\n        data: { userId }\n      };\n      wsRef.current.send(JSON.stringify(message));\n    }\n  }, [user]);\n\n  const unblockUser = useCallback((userId: string) => {\n    setBlockedUsers(prev => prev.filter(u => u.userId !== userId));\n\n    if (wsRef.current) {\n      const message: WSMessage = {\n        type: 'user_unblocked',\n        data: { userId }\n      };\n      wsRef.current.send(JSON.stringify(message));\n    }\n  }, []);\n\n  const unmuteUser = useCallback((userId: string) => {\n    setMutedUsers(prev => prev.filter(u => u.userId !== userId));\n\n    if (wsRef.current) {\n      const message: WSMessage = {\n        type: 'user_unmuted',\n        data: { userId }\n      };\n      wsRef.current.send(JSON.stringify(message));\n    }\n  }, []);\n\n  const clearAllMessages = useCallback(() => {\n    if (!user || user.role !== 'admin') return;\n\n    setMessages([]);\n\n    if (wsRef.current) {\n      const message: WSMessage = {\n        type: 'chat_cleared',\n        data: { clearedBy: user.userId }\n      };\n      wsRef.current.send(JSON.stringify(message));\n    }\n  }, [user]);\n\n  const clearUserMessages = useCallback((userId: string) => {\n    if (!user || user.role !== 'admin') return;\n    setMessages(prev => prev.filter(msg => msg.userId !== userId));\n  }, [user]);\n\n  const updateSettings = useCallback((newSettings: Partial<ChatSettings>) => {\n    setSettings(prev => ({ ...prev, ...newSettings }));\n  }, []);\n\n  const isUserBlocked = useCallback((userId: string) => {\n    return blockedUsers.some(u => u.userId === userId);\n  }, [blockedUsers]);\n\n  const isUserMuted = useCallback((userId: string) => {\n    return mutedUsers.some(u => u.userId === userId);\n  }, [mutedUsers]);\n\n  const value: ChatContextType = {\n    messages,\n    onlineUsers,\n    isConnected,\n    settings,\n    blockedUsers,\n    mutedUsers,\n    sendMessage,\n    sendTypingIndicator,\n    markMessageAsRead,\n    pinMessage,\n    blockUser,\n    muteUser,\n    unblockUser,\n    unmuteUser,\n    clearAllMessages,\n    clearUserMessages,\n    updateSettings,\n    isUserBlocked,\n    isUserMuted,\n  };\n\n  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;\n}\n\nexport function useChat() {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n}\n","size_bytes":13428},"client/src/lib/exportToExcel.ts":{"content":"import * as XLSX from 'xlsx';\nimport { PerformanceEntry } from '@shared/schema';\nimport { format } from 'date-fns';\n\nimport type { ContentStatus } from '@/components/ContentStatusBadge';\n\nconst STATUS_LABELS: Record<ContentStatus, string> = {\n  writing: '📝 Writing Processing',\n  footage: '🎥 Footage Downloading',\n  voiceover: '🎙️ Voice Over',\n  thumbnail: '🖼️ Thumbnail Make',\n  editing: '✂️ Editing',\n  ready: '✅ Ready',\n  alldone: '🚀 All Done',\n  published: '🌐 Published',\n};\n\nexport function exportToExcel(entries: PerformanceEntry[]) {\n  const data = entries.map((entry, index) => ({\n    'SL': index + 1,\n    'Link': entry.link || '',\n    'Title': entry.title || '',\n    'Views': entry.views || '',\n    'Reach': entry.reach || '',\n    'Engagement': entry.engagement || '',\n    'Voice Artist': entry.voiceArtist || '',\n    'Script Writer': entry.scriptWriter || '',\n    'Video Editor': entry.videoEditor || '',\n    'Topic Selector': entry.topicSelector || '',\n    'Mojo Reporter': entry.mojoReporter || '',\n    'Jela Reporter': entry.jelaReporter || '',\n    'Photo Card': entry.photoCard || '',\n    'SEO': entry.seo || '',\n    'Website News': entry.websiteNews || '',\n    'Content Status': entry.contentStatus ? STATUS_LABELS[entry.contentStatus] || entry.contentStatus : '',\n    'Created Date': format(new Date(entry.createdAt), 'yyyy-MM-dd HH:mm'),\n  }));\n\n  const worksheet = XLSX.utils.json_to_sheet(data);\n  \n  const colWidths = [\n    { wch: 5 },  // SL\n    { wch: 50 }, // Link\n    { wch: 40 }, // Title\n    { wch: 12 }, // Views\n    { wch: 12 }, // Reach\n    { wch: 12 }, // Engagement\n    { wch: 20 }, // Voice Artist\n    { wch: 20 }, // Script Writer\n    { wch: 20 }, // Video Editor\n    { wch: 20 }, // Topic Selector\n    { wch: 20 }, // Mojo Reporter\n    { wch: 20 }, // Jela Reporter\n    { wch: 20 }, // Photo Card\n    { wch: 15 }, // SEO\n    { wch: 20 }, // Website News\n    { wch: 25 }, // Content Status\n    { wch: 20 }, // Created Date\n  ];\n  worksheet['!cols'] = colWidths;\n\n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Performance Data');\n\n  const fileName = `DOB_Performance_${format(new Date(), 'yyyy-MM-dd')}.xlsx`;\n  XLSX.writeFile(workbook, fileName);\n}\n","size_bytes":2259},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/EditableTable.tsx":{"content":"import { useState } from \"react\";\nimport { PerformanceEntry } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Trash2, Loader2, ExternalLink } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ContentStatusBadge, { type ContentStatus } from \"@/components/ContentStatusBadge\";\n\ninterface EditableTableProps {\n  entries: PerformanceEntry[];\n  onUpdateEntry: (id: string, updates: Partial<PerformanceEntry>) => void;\n  onDeleteEntry: (id: string) => void;\n  canDelete?: boolean;\n}\n\ninterface EditingCell {\n  entryId: string;\n  field: keyof PerformanceEntry;\n}\n\nexport default function EditableTable({ entries, onUpdateEntry, onDeleteEntry, canDelete = true }: EditableTableProps) {\n  const [editingCell, setEditingCell] = useState<EditingCell | null>(null);\n  const [editValue, setEditValue] = useState(\"\");\n  const [fetchingLinks, setFetchingLinks] = useState<Set<string>>(new Set());\n  const { toast } = useToast();\n\n  const handleCellClick = (entryId: string, field: keyof PerformanceEntry, currentValue: any) => {\n    if (field === \"id\" || field === \"createdAt\") return;\n    \n    setEditingCell({ entryId, field });\n    // Format date for date input\n    if (field === \"date\") {\n      setEditValue(currentValue || \"\");\n    } else {\n      setEditValue(currentValue?.toString() || \"\");\n    }\n  };\n\n  const handleCellBlur = () => {\n    if (editingCell) {\n      const { entryId, field } = editingCell;\n      \n      let value: any = editValue;\n      if (field === \"views\" || field === \"reach\" || field === \"engagement\") {\n        value = editValue ? parseFloat(editValue) : undefined;\n      }\n\n      onUpdateEntry(entryId, { [field]: value });\n      setEditingCell(null);\n    }\n  };\n\n  const handleLinkChange = async (entryId: string, link: string) => {\n    onUpdateEntry(entryId, { link });\n\n    if (link && (link.includes(\"youtube.com\") || link.includes(\"youtu.be\"))) {\n      setFetchingLinks(new Set(fetchingLinks).add(entryId));\n\n      try {\n        const response = await fetch(\"/api/youtube/video-info\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ url: link }),\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          onUpdateEntry(entryId, {\n            title: data.title,\n            views: data.views,\n          });\n          toast({\n            title: \"YouTube Data Fetched\",\n            description: \"Title and views updated successfully\",\n          });\n        } else {\n          toast({\n            title: \"Failed to Fetch\",\n            description: \"Could not retrieve YouTube video data\",\n            variant: \"destructive\",\n          });\n        }\n      } catch (error) {\n        console.error(\"Error fetching YouTube data:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to connect to YouTube API\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setFetchingLinks((prev) => {\n          const next = new Set(prev);\n          next.delete(entryId);\n          return next;\n        });\n      }\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleCellBlur();\n    } else if (e.key === \"Escape\") {\n      setEditingCell(null);\n    }\n  };\n\n  const isEditing = (entryId: string, field: keyof PerformanceEntry) => {\n    return editingCell?.entryId === entryId && editingCell?.field === field;\n  };\n\n  const renderCell = (entry: PerformanceEntry, field: keyof PerformanceEntry) => {\n    const value = entry[field];\n    const isFetching = fetchingLinks.has(entry.id);\n\n    if (isEditing(entry.id, field)) {\n      // Use date input type for date field\n      if (field === \"date\") {\n        return (\n          <Input\n            type=\"date\"\n            autoFocus\n            value={editValue}\n            onChange={(e) => setEditValue(e.target.value)}\n            onBlur={handleCellBlur}\n            onKeyDown={handleKeyDown}\n            className=\"h-10 text-sm\"\n            data-testid={`input-${field}-${entry.id}`}\n          />\n        );\n      }\n      \n      return (\n        <Input\n          autoFocus\n          value={editValue}\n          onChange={(e) => setEditValue(e.target.value)}\n          onBlur={handleCellBlur}\n          onKeyDown={handleKeyDown}\n          className=\"h-10 text-sm\"\n          data-testid={`input-${field}-${entry.id}`}\n        />\n      );\n    }\n\n    if (field === \"link\" && value) {\n      return (\n        <div className=\"flex items-center gap-2\">\n          <span className=\"truncate text-sm\">{value as string}</span>\n          {isFetching ? (\n            <Loader2 className=\"w-4 h-4 animate-spin text-primary\" />\n          ) : (\n            <a\n              href={value as string}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-primary hover:text-primary/80\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <ExternalLink className=\"w-4 h-4\" />\n            </a>\n          )}\n        </div>\n      );\n    }\n\n    return (\n      <span className=\"text-sm\">\n        {value !== undefined && value !== null && value !== \"\" ? value.toString() : \"-\"}\n      </span>\n    );\n  };\n\n  if (entries.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-16 text-center\">\n        <div className=\"w-16 h-16 rounded-full bg-muted flex items-center justify-center mb-4\">\n          <Trash2 className=\"w-8 h-8 text-muted-foreground\" />\n        </div>\n        <h3 className=\"font-medium text-lg mb-2\">No entries yet</h3>\n        <p className=\"text-sm text-muted-foreground\">Click \"Add New Entry\" to get started</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"border rounded-lg shadow-sm overflow-hidden\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-muted/50 border-b-2\">\n            <tr>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground w-16\">SL</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-36 bg-blue-50/50\">Date</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-64\">Link</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-48\">Title</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-32\">Views</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-32\">Reach</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-32\">Engagement</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-32\">Voice Artist</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-32\">Script Writer</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-32\">Video Editor</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-32\">Topic Selector</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-32\">Mojo Reporter</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-32\">Jela Reporter</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-32\">Photo Card</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-32\">SEO</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-32\">Website News</th>\n              <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide text-foreground min-w-48 bg-purple-50/50\">Content Status</th>\n              {canDelete && <th className=\"px-4 py-3 text-center text-xs font-semibold uppercase tracking-wide text-foreground w-20\">Actions</th>}\n            </tr>\n          </thead>\n          <tbody className=\"bg-card divide-y\">\n            {entries.map((entry, index) => (\n              <tr key={entry.id} className=\"hover:bg-muted/30 transition-colors\" data-testid={`row-entry-${index}`}>\n                <td className=\"px-4 py-3 text-sm font-medium text-muted-foreground\">{index + 1}</td>\n                <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50 bg-blue-50/30\" onClick={() => handleCellClick(entry.id, \"date\", entry.date)}>\n                  {renderCell(entry, \"date\")}\n                </td>\n                <td\n                  className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\"\n                  onClick={() => handleCellClick(entry.id, \"link\", entry.link)}\n                  onBlur={() => {\n                    if (isEditing(entry.id, \"link\")) {\n                      handleLinkChange(entry.id, editValue);\n                      setEditingCell(null);\n                    }\n                  }}\n                >\n                  {renderCell(entry, \"link\")}\n                </td>\n                <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(entry.id, \"title\", entry.title)}>\n                  {renderCell(entry, \"title\")}\n                </td>\n                <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(entry.id, \"views\", entry.views)}>\n                  {renderCell(entry, \"views\")}\n                </td>\n                <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(entry.id, \"reach\", entry.reach)}>\n                  {renderCell(entry, \"reach\")}\n                </td>\n                <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(entry.id, \"engagement\", entry.engagement)}>\n                  {renderCell(entry, \"engagement\")}\n                </td>\n                <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(entry.id, \"voiceArtist\", entry.voiceArtist)}>\n                  {renderCell(entry, \"voiceArtist\")}\n                </td>\n                <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(entry.id, \"scriptWriter\", entry.scriptWriter)}>\n                  {renderCell(entry, \"scriptWriter\")}\n                </td>\n                <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(entry.id, \"videoEditor\", entry.videoEditor)}>\n                  {renderCell(entry, \"videoEditor\")}\n                </td>\n                <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(entry.id, \"topicSelector\", entry.topicSelector)}>\n                  {renderCell(entry, \"topicSelector\")}\n                </td>\n                <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(entry.id, \"mojoReporter\", entry.mojoReporter)}>\n                  {renderCell(entry, \"mojoReporter\")}\n                </td>\n                <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(entry.id, \"jelaReporter\", entry.jelaReporter)}>\n                  {renderCell(entry, \"jelaReporter\")}\n                </td>\n                <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(entry.id, \"photoCard\", entry.photoCard)}>\n                  {renderCell(entry, \"photoCard\")}\n                </td>\n                <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(entry.id, \"seo\", entry.seo)}>\n                  {renderCell(entry, \"seo\")}\n                </td>\n                <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(entry.id, \"websiteNews\", entry.websiteNews)}>\n                  {renderCell(entry, \"websiteNews\")}\n                </td>\n                <td className=\"px-4 py-3 bg-purple-50/30\">\n                  <ContentStatusBadge\n                    status={entry.contentStatus}\n                    onStatusChange={(status: ContentStatus) => onUpdateEntry(entry.id, { contentStatus: status })}\n                  />\n                </td>\n                {canDelete && (\n                  <td className=\"px-4 py-3 text-center\">\n                    <Button\n                      onClick={() => onDeleteEntry(entry.id)}\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"h-8 w-8 text-destructive hover:text-destructive hover:bg-destructive/10\"\n                      data-testid={`button-delete-${index}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </td>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13421},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect } from \"react\";\n\nexport type UserRole = \"admin\" | \"moderator\" | \"superModerator\";\n\ninterface User {\n  userId: string;\n  role: UserRole;\n  name?: string;\n}\n\ninterface Moderator {\n  id: string;\n  name: string;\n  userId: string;\n  password: string;\n  createdAt: string;\n}\n\ninterface SuperModerator {\n  id: string;\n  name: string;\n  userId: string;\n  password: string;\n  permissions: any;\n  createdAt: string;\n}\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  user: User | null;\n  userRole: UserRole | null;\n  userId: string | null;\n  login: (userId: string, password: string) => Promise<{ success: boolean; message?: string }>;\n  logout: () => void;\n  hasPermission: (permission: string) => boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    const authStatus = localStorage.getItem(\"msbd_authenticated\");\n    const storedUser = localStorage.getItem(\"msbd_user\");\n    if (authStatus === \"true\" && storedUser) {\n      setIsAuthenticated(true);\n      setUser(JSON.parse(storedUser));\n    }\n  }, []);\n\n  const getUserIP = async (): Promise<string | null> => {\n    try {\n      const response = await fetch(\"https://api.ipify.org?format=json\");\n      const data = await response.json();\n      return data.ip;\n    } catch (error) {\n      console.error(\"Failed to fetch IP address:\", error);\n      return null;\n    }\n  };\n\n  const checkIPAccess = async (): Promise<{ allowed: boolean; message?: string }> => {\n    const ipAccessSettings = localStorage.getItem(\"dob_ip_access\");\n    if (!ipAccessSettings) {\n      return { allowed: true };\n    }\n\n    const { enabled, allowedIPs } = JSON.parse(ipAccessSettings);\n    \n    if (!enabled || allowedIPs.length === 0) {\n      return { allowed: true };\n    }\n\n    const userIP = await getUserIP();\n    \n    if (!userIP) {\n      return { \n        allowed: false, \n        message: \"Unable to verify IP address. Please try again.\" \n      };\n    }\n\n    const isAllowed = allowedIPs.includes(userIP);\n    \n    if (!isAllowed) {\n      return { \n        allowed: false, \n        message: `Access denied: your IP (${userIP}) is not authorized` \n      };\n    }\n\n    return { allowed: true };\n  };\n\n  const login = async (userId: string, password: string): Promise<{ success: boolean; message?: string }> => {\n    const ipCheck = await checkIPAccess();\n    if (!ipCheck.allowed) {\n      return { success: false, message: ipCheck.message };\n    }\n\n    const storedAdmin = localStorage.getItem(\"dob_admin_credentials\");\n    const adminCreds = storedAdmin \n      ? JSON.parse(storedAdmin) \n      : { userId: \"MDBD51724\", password: \"shuvo@282##\" };\n\n    if (userId === adminCreds.userId && password === adminCreds.password) {\n      const userData: User = {\n        userId: adminCreds.userId,\n        role: \"admin\",\n        name: \"Administrator\",\n      };\n      setIsAuthenticated(true);\n      setUser(userData);\n      localStorage.setItem(\"msbd_authenticated\", \"true\");\n      localStorage.setItem(\"msbd_user\", JSON.stringify(userData));\n      return { success: true };\n    }\n\n    const storedSuperMods = localStorage.getItem(\"dob_super_moderators\");\n    if (storedSuperMods) {\n      const superModerators: SuperModerator[] = JSON.parse(storedSuperMods);\n      const superMod = superModerators.find(\n        (sm) => sm.userId === userId && sm.password === password\n      );\n\n      if (superMod) {\n        const userData: User = {\n          userId: superMod.userId,\n          role: \"superModerator\",\n          name: superMod.name,\n        };\n        setIsAuthenticated(true);\n        setUser(userData);\n        localStorage.setItem(\"msbd_authenticated\", \"true\");\n        localStorage.setItem(\"msbd_user\", JSON.stringify(userData));\n        localStorage.setItem(\"msbd_super_mod_permissions\", JSON.stringify(superMod.permissions));\n        return { success: true };\n      }\n    }\n\n    const storedMods = localStorage.getItem(\"dob_moderators\");\n    if (storedMods) {\n      const moderators: Moderator[] = JSON.parse(storedMods);\n      const moderator = moderators.find(\n        (mod) => mod.userId === userId && mod.password === password\n      );\n\n      if (moderator) {\n        const userData: User = {\n          userId: moderator.userId,\n          role: \"moderator\",\n          name: moderator.name,\n        };\n        setIsAuthenticated(true);\n        setUser(userData);\n        localStorage.setItem(\"msbd_authenticated\", \"true\");\n        localStorage.setItem(\"msbd_user\", JSON.stringify(userData));\n        return { success: true };\n      }\n    }\n\n    if (userId === \"DOB\" && password === \"dob2.0\") {\n      const userData: User = {\n        userId: \"DOB\",\n        role: \"moderator\",\n        name: \"Default Moderator\",\n      };\n      setIsAuthenticated(true);\n      setUser(userData);\n      localStorage.setItem(\"msbd_authenticated\", \"true\");\n      localStorage.setItem(\"msbd_user\", JSON.stringify(userData));\n      return { success: true };\n    }\n\n    return { success: false, message: \"Invalid credentials\" };\n  };\n\n  const logout = () => {\n    setIsAuthenticated(false);\n    setUser(null);\n    localStorage.removeItem(\"msbd_authenticated\");\n    localStorage.removeItem(\"msbd_user\");\n    localStorage.removeItem(\"msbd_super_mod_permissions\");\n  };\n\n  const hasPermission = (permission: string): boolean => {\n    if (!user) return false;\n    \n    if (user.role === \"admin\") return true;\n    \n    if (user.role === \"superModerator\") {\n      const permissions = localStorage.getItem(\"msbd_super_mod_permissions\");\n      if (permissions) {\n        const perms = JSON.parse(permissions);\n        if (permission === \"admin\") {\n          return false;\n        }\n        \n        if (permission === \"delete\") {\n          return perms.canDeleteDashboard === true;\n        }\n        \n        return perms[permission] === true;\n      }\n      return false;\n    }\n    \n    if (permission === \"admin\") return false;\n    \n    const moderatorPermissions = [\"add\", \"edit\", \"delete\"];\n    return moderatorPermissions.includes(permission);\n  };\n\n  return (\n    <AuthContext.Provider \n      value={{ \n        isAuthenticated, \n        user, \n        userRole: user?.role || null,\n        userId: user?.userId || null,\n        login, \n        logout,\n        hasPermission \n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":6741},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ContentStatusBadge.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport type ContentStatus = \n  | \"writing\" \n  | \"footage\" \n  | \"voiceover\" \n  | \"thumbnail\" \n  | \"editing\" \n  | \"ready\" \n  | \"alldone\" \n  | \"published\";\n\ninterface StatusConfig {\n  label: string;\n  emoji: string;\n  color: string;\n  bgColor: string;\n  borderColor: string;\n}\n\nconst STATUS_CONFIG: Record<ContentStatus, StatusConfig> = {\n  writing: {\n    label: \"Writing Processing\",\n    emoji: \"📝\",\n    color: \"text-gray-700\",\n    bgColor: \"bg-gray-100\",\n    borderColor: \"border-gray-300\",\n  },\n  footage: {\n    label: \"Footage Downloading\",\n    emoji: \"🎥\",\n    color: \"text-blue-700\",\n    bgColor: \"bg-blue-100\",\n    borderColor: \"border-blue-300\",\n  },\n  voiceover: {\n    label: \"Voice Over\",\n    emoji: \"🎙️\",\n    color: \"text-orange-700\",\n    bgColor: \"bg-orange-100\",\n    borderColor: \"border-orange-300\",\n  },\n  thumbnail: {\n    label: \"Thumbnail Make\",\n    emoji: \"🖼️\",\n    color: \"text-pink-700\",\n    bgColor: \"bg-pink-100\",\n    borderColor: \"border-pink-300\",\n  },\n  editing: {\n    label: \"Editing\",\n    emoji: \"✂️\",\n    color: \"text-purple-700\",\n    bgColor: \"bg-purple-100\",\n    borderColor: \"border-purple-300\",\n  },\n  ready: {\n    label: \"Ready\",\n    emoji: \"✅\",\n    color: \"text-green-700\",\n    bgColor: \"bg-green-100\",\n    borderColor: \"border-green-300\",\n  },\n  alldone: {\n    label: \"All Done\",\n    emoji: \"🚀\",\n    color: \"text-emerald-700\",\n    bgColor: \"bg-emerald-100\",\n    borderColor: \"border-emerald-300\",\n  },\n  published: {\n    label: \"Published\",\n    emoji: \"🌐\",\n    color: \"text-teal-700\",\n    bgColor: \"bg-teal-100\",\n    borderColor: \"border-teal-300\",\n  },\n};\n\ninterface ContentStatusBadgeProps {\n  status?: ContentStatus;\n  onStatusChange: (status: ContentStatus) => void;\n}\n\nexport default function ContentStatusBadge({ status, onStatusChange }: ContentStatusBadgeProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const currentStatus = status || \"writing\";\n  const config = STATUS_CONFIG[currentStatus];\n\n  return (\n    <Select\n      value={currentStatus}\n      onValueChange={(value) => onStatusChange(value as ContentStatus)}\n      open={isOpen}\n      onOpenChange={setIsOpen}\n    >\n      <SelectTrigger \n        className={`h-auto w-full max-w-[200px] border ${config.borderColor} ${config.bgColor} hover:opacity-80 transition-opacity`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <SelectValue>\n          <div className=\"flex items-center gap-2 py-1\">\n            <span className=\"text-base\">{config.emoji}</span>\n            <span className={`text-xs font-medium ${config.color}`}>\n              {config.label}\n            </span>\n          </div>\n        </SelectValue>\n      </SelectTrigger>\n      <SelectContent onClick={(e) => e.stopPropagation()}>\n        {Object.entries(STATUS_CONFIG).map(([key, value]) => (\n          <SelectItem key={key} value={key} className=\"cursor-pointer\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-base\">{value.emoji}</span>\n              <span className=\"text-sm\">{value.label}</span>\n            </div>\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n","size_bytes":3350},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/DashboardHeader.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LogOut, Shield, UserCog } from \"lucide-react\";\n\nexport default function DashboardHeader() {\n  const [location, setLocation] = useLocation();\n  const { logout, user, userRole } = useAuth();\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/login\");\n  };\n\n  const getFeatureToggles = () => {\n    const stored = localStorage.getItem(\"dob_feature_toggles\");\n    if (stored) {\n      return JSON.parse(stored);\n    }\n    return { \n      voiceArtistEnabled: true, \n      attendanceEnabled: true,\n      workFlowEnabled: true,\n      videoUploadTimeEnabled: true\n    };\n  };\n\n  const featureToggles = getFeatureToggles();\n\n  const allTabs = [\n    { path: \"/\", label: \"Dashboard\", requiredRole: null, feature: null },\n    { path: \"/chat-box\", label: \"Chat Box\", requiredRole: null, feature: null },\n    { path: \"/voice-artist\", label: \"Voice Artist\", requiredRole: null, feature: \"voiceArtist\" },\n    { path: \"/attendance\", label: \"Attendance\", requiredRole: null, feature: \"attendance\" },\n    { path: \"/work-flow\", label: \"Work Flow\", requiredRole: null, feature: \"workFlow\" },\n    { path: \"/video-upload-time\", label: \"Video Upload\", requiredRole: null, feature: \"videoUploadTime\" },\n    { path: \"/complaint-box\", label: \"Complaint Box\", requiredRole: null, feature: null },\n    { path: \"/requisition-sheet\", label: \"Requisition\", requiredRole: \"admin\", feature: null },\n    { path: \"/expense-sheet\", label: \"Expense\", requiredRole: \"admin\", feature: null },\n    { path: \"/employee-data\", label: \"Employee Data\", requiredRole: \"admin\", feature: null },\n    { path: \"/jela-reporter-data\", label: \"Jela Reporter\", requiredRole: \"admin\", feature: null },\n    { path: \"/rankings\", label: \"Rankings\", requiredRole: \"admin\", feature: null },\n    { path: \"/admin\", label: \"Admin\", requiredRole: \"admin\", feature: null },\n  ];\n\n  const tabs = allTabs.filter((tab) => {\n    if (tab.requiredRole && userRole !== tab.requiredRole) return false;\n    if (tab.feature === \"voiceArtist\" && !featureToggles.voiceArtistEnabled) return false;\n    if (tab.feature === \"attendance\" && !featureToggles.attendanceEnabled) return false;\n    if (tab.feature === \"workFlow\" && !featureToggles.workFlowEnabled) return false;\n    if (tab.feature === \"videoUploadTime\" && !featureToggles.videoUploadTimeEnabled) return false;\n    return true;\n  });\n\n  const getRoleBadge = () => {\n    if (userRole === \"admin\") {\n      return (\n        <Badge variant=\"default\" className=\"gap-1 bg-yellow-500 hover:bg-yellow-600\">\n          <Shield className=\"w-3 h-3\" />\n          Admin\n        </Badge>\n      );\n    }\n    return (\n      <Badge variant=\"secondary\" className=\"gap-1\">\n        <UserCog className=\"w-3 h-3\" />\n        Moderator\n      </Badge>\n    );\n  };\n\n  return (\n    <header className=\"border-b bg-card\">\n      <div className=\"max-w-screen-2xl mx-auto px-6\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 flex items-center justify-center\">\n              <img src=\"/logo.png\" alt=\"DOB Logo\" className=\"w-full h-full object-contain\" />\n            </div>\n            <div>\n              <h1 className=\"font-semibold text-base\">DOB Performance Tracker</h1>\n              <p className=\"text-xs text-muted-foreground\">Performance Management System</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            {user && (\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-muted-foreground\">Logged in as:</span>\n                {getRoleBadge()}\n              </div>\n            )}\n            <Button\n              onClick={handleLogout}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"gap-2\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n\n        <nav className=\"flex gap-1 -mb-px\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.path}\n              onClick={() => setLocation(tab.path)}\n              className={`px-6 py-3 text-sm font-medium border-b-2 transition-colors ${\n                location === tab.path\n                  ? \"border-primary text-foreground\"\n                  : \"border-transparent text-muted-foreground hover:text-foreground hover:border-border\"\n              }`}\n              data-testid={`tab-${tab.label.toLowerCase().replace(/\\s+/g, \"-\")}`}\n            >\n              {tab.label}\n            </button>\n          ))}\n        </nav>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4856},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm text-foreground outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5757},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { AdminSettings, SuperModerator, SuperModeratorPermissions, ChatSettings } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Trash2, Settings, Save, Key, UserPlus, Edit, Users, Shield, ToggleLeft, X, Lock, Download, Upload, Database, MessageCircle } from \"lucide-react\";\nimport DashboardHeader from \"@/components/DashboardHeader\";\nimport Footer from \"@/components/Footer\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useChat } from \"@/contexts/ChatContext\";\n\ninterface Moderator {\n  id: string;\n  name: string;\n  userId: string;\n  password: string;\n  createdAt: string;\n}\n\ninterface IPAccessSettings {\n  enabled: boolean;\n  allowedIPs: string[];\n}\n\ninterface AdminCredentials {\n  userId: string;\n  password: string;\n}\n\ninterface FeatureToggles {\n  voiceArtistEnabled: boolean;\n  attendanceEnabled: boolean;\n  workFlowEnabled: boolean;\n  videoUploadTimeEnabled: boolean;\n}\n\ninterface DobBackupData {\n  dob_settings?: AdminSettings;\n  dob_admin_credentials?: AdminCredentials;\n  dob_moderators?: Moderator[];\n  dob_super_moderators?: SuperModerator[];\n  dob_feature_toggles?: FeatureToggles;\n  dob_ip_access?: IPAccessSettings;\n  dob_entries?: unknown[];\n  dob_employees?: unknown[];\n  dob_jela_reporters?: unknown[];\n  dob_attendance?: unknown[];\n  dob_complaints?: unknown[];\n  dob_expense_sheets?: unknown[];\n  dob_requisition_sheets?: unknown[];\n  dob_upload_schedules?: unknown[];\n  dob_work_categories?: unknown[];\n  dob_work_notes?: unknown[];\n  dob_voice_artists?: unknown[];\n  dob_voice_work?: unknown[];\n}\n\ninterface DobBackupPayload {\n  version: string;\n  exportDate: string;\n  application: string;\n  data: DobBackupData;\n}\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const { userRole } = useAuth();\n  const [, navigate] = useLocation();\n  const {\n    settings,\n    updateSettings,\n    clearAllMessages,\n    blockedUsers,\n    mutedUsers,\n    unblockUser,\n    unmuteUser,\n  } = useChat();\n  \n  const [adminSettings, setAdminSettings] = useState<AdminSettings>({\n    currentMonth: new Date().toISOString().slice(0, 7),\n    employeeOfMonthMessage: \"Congratulations to our top performers this month!\",\n  });\n\n  const [currentAdminId, setCurrentAdminId] = useState(\"\");\n  const [currentAdminPassword, setCurrentAdminPassword] = useState(\"\");\n  const [newAdminId, setNewAdminId] = useState(\"\");\n  const [newAdminPassword, setNewAdminPassword] = useState(\"\");\n  const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\n\n  const [moderators, setModerators] = useState<Moderator[]>([]);\n  const [newModName, setNewModName] = useState(\"\");\n  const [newModUserId, setNewModUserId] = useState(\"\");\n  const [newModPassword, setNewModPassword] = useState(\"\");\n  const [editingMod, setEditingMod] = useState<string | null>(null);\n  const [editModName, setEditModName] = useState(\"\");\n  const [editModUserId, setEditModUserId] = useState(\"\");\n  const [editModPassword, setEditModPassword] = useState(\"\");\n\n  const [superModerators, setSuperModerators] = useState<SuperModerator[]>([]);\n  const [showAddSuperMod, setShowAddSuperMod] = useState(false);\n  const [newSuperModName, setNewSuperModName] = useState(\"\");\n  const [newSuperModUserId, setNewSuperModUserId] = useState(\"\");\n  const [newSuperModPassword, setNewSuperModPassword] = useState(\"\");\n  const [editingSuperMod, setEditingSuperMod] = useState<SuperModerator | null>(null);\n\n  const [voiceArtistEnabled, setVoiceArtistEnabled] = useState(true);\n  const [attendanceEnabled, setAttendanceEnabled] = useState(true);\n  const [workFlowEnabled, setWorkFlowEnabled] = useState(true);\n  const [videoUploadTimeEnabled, setVideoUploadTimeEnabled] = useState(true);\n\n  const [ipAccess, setIpAccess] = useState<IPAccessSettings>({\n    enabled: false,\n    allowedIPs: [],\n  });\n  const [newIP, setNewIP] = useState(\"\");\n\n  const [importFile, setImportFile] = useState<File | null>(null);\n  const [showImportConfirm, setShowImportConfirm] = useState(false);\n  const [importData, setImportData] = useState<DobBackupPayload | null>(null);\n\n  useEffect(() => {\n    if (userRole !== \"admin\") {\n      toast({\n        title: \"Access Denied\",\n        description: \"Only administrators can access this page\",\n        variant: \"destructive\",\n      });\n      navigate(\"/dashboard\");\n    }\n  }, [userRole, navigate, toast]);\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"dob_settings\");\n    if (stored) {\n      setAdminSettings(JSON.parse(stored));\n    }\n\n    const storedMods = localStorage.getItem(\"dob_moderators\");\n    if (storedMods) {\n      setModerators(JSON.parse(storedMods));\n    }\n\n    const storedSuperMods = localStorage.getItem(\"dob_super_moderators\");\n    if (storedSuperMods) {\n      setSuperModerators(JSON.parse(storedSuperMods));\n    }\n\n    const storedFeatures = localStorage.getItem(\"dob_feature_toggles\");\n    if (storedFeatures) {\n      const features = JSON.parse(storedFeatures);\n      setVoiceArtistEnabled(features.voiceArtistEnabled ?? true);\n      setAttendanceEnabled(features.attendanceEnabled ?? true);\n      setWorkFlowEnabled(features.workFlowEnabled ?? true);\n      setVideoUploadTimeEnabled(features.videoUploadTimeEnabled ?? true);\n    }\n\n    const storedIPAccess = localStorage.getItem(\"dob_ip_access\");\n    if (storedIPAccess) {\n      setIpAccess(JSON.parse(storedIPAccess));\n    }\n  }, []);\n\n  const handleSaveSettings = () => {\n    localStorage.setItem(\"dob_settings\", JSON.stringify(adminSettings));\n    toast({\n      title: \"Settings Saved\",\n      description: \"Admin settings have been updated successfully\",\n    });\n  };\n\n  const handleChangeAdminCredentials = () => {\n    const storedAdmin = localStorage.getItem(\"dob_admin_credentials\");\n    const adminCreds = storedAdmin \n      ? JSON.parse(storedAdmin) \n      : { userId: \"MDBD51724\", password: \"shuvo@282##\" };\n\n    if (currentAdminId !== adminCreds.userId || currentAdminPassword !== adminCreds.password) {\n      toast({\n        title: \"Verification Failed\",\n        description: \"Current credentials are incorrect\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!newAdminId || !newAdminPassword) {\n      toast({\n        title: \"Invalid Input\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newAdminPassword !== confirmNewPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"New password and confirmation don't match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newAdminPassword.length < 6) {\n      toast({\n        title: \"Weak Password\",\n        description: \"Password must be at least 6 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newCreds = { userId: newAdminId, password: newAdminPassword };\n    localStorage.setItem(\"dob_admin_credentials\", JSON.stringify(newCreds));\n\n    setCurrentAdminId(\"\");\n    setCurrentAdminPassword(\"\");\n    setNewAdminId(\"\");\n    setNewAdminPassword(\"\");\n    setConfirmNewPassword(\"\");\n\n    toast({\n      title: \"Admin Credentials Updated\",\n      description: \"Your new credentials are now active. Please use them for your next login.\",\n    });\n  };\n\n  const handleAddModerator = () => {\n    if (!newModName || !newModUserId || !newModPassword) {\n      toast({\n        title: \"Invalid Input\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newModPassword.length < 6) {\n      toast({\n        title: \"Weak Password\",\n        description: \"Password must be at least 6 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (moderators.some(mod => mod.userId === newModUserId)) {\n      toast({\n        title: \"User ID Exists\",\n        description: \"This User ID is already in use\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newModerator: Moderator = {\n      id: crypto.randomUUID(),\n      name: newModName,\n      userId: newModUserId,\n      password: newModPassword,\n      createdAt: new Date().toISOString(),\n    };\n\n    const updated = [...moderators, newModerator];\n    setModerators(updated);\n    localStorage.setItem(\"dob_moderators\", JSON.stringify(updated));\n\n    setNewModName(\"\");\n    setNewModUserId(\"\");\n    setNewModPassword(\"\");\n\n    toast({\n      title: \"Moderator Added\",\n      description: `${newModName} can now log in with their credentials`,\n    });\n  };\n\n  const handleEditModerator = (mod: Moderator) => {\n    setEditingMod(mod.id);\n    setEditModName(mod.name);\n    setEditModUserId(mod.userId);\n    setEditModPassword(mod.password);\n  };\n\n  const handleSaveEditModerator = (id: string) => {\n    if (!editModName || !editModUserId || !editModPassword) {\n      toast({\n        title: \"Invalid Input\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editModPassword.length < 6) {\n      toast({\n        title: \"Weak Password\",\n        description: \"Password must be at least 6 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const updated = moderators.map(mod =>\n      mod.id === id\n        ? { ...mod, name: editModName, userId: editModUserId, password: editModPassword }\n        : mod\n    );\n    setModerators(updated);\n    localStorage.setItem(\"dob_moderators\", JSON.stringify(updated));\n    setEditingMod(null);\n\n    toast({\n      title: \"Moderator Updated\",\n      description: \"Moderator credentials have been updated\",\n    });\n  };\n\n  const handleDeleteModerator = (id: string, name: string) => {\n    const updated = moderators.filter(mod => mod.id !== id);\n    setModerators(updated);\n    localStorage.setItem(\"dob_moderators\", JSON.stringify(updated));\n\n    toast({\n      title: \"Moderator Removed\",\n      description: `${name} has been removed from moderators`,\n    });\n  };\n\n  const handleAddSuperModerator = () => {\n    if (!newSuperModName || !newSuperModUserId || !newSuperModPassword) {\n      toast({\n        title: \"Invalid Input\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newSuperModPassword.length < 6) {\n      toast({\n        title: \"Weak Password\",\n        description: \"Password must be at least 6 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (superModerators.some(sm => sm.userId === newSuperModUserId)) {\n      toast({\n        title: \"User ID Exists\",\n        description: \"This User ID is already in use\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const defaultPermissions: SuperModeratorPermissions = {\n      canViewDashboard: true,\n      canAddDashboard: false,\n      canEditDashboard: false,\n      canDeleteDashboard: false,\n      canViewVoiceArtist: true,\n      canAddVoiceArtist: false,\n      canEditVoiceArtist: false,\n      canDeleteVoiceArtist: false,\n      canViewAttendance: true,\n      canAddAttendance: false,\n      canEditAttendance: false,\n      canDeleteAttendance: false,\n      canViewWorkFlow: true,\n      canAddWorkFlow: false,\n      canEditWorkFlow: false,\n      canDeleteWorkFlow: false,\n      canViewVideoUpload: true,\n      canAddVideoUpload: false,\n      canEditVideoUpload: false,\n      canDeleteVideoUpload: false,\n      canViewComplaintBox: true,\n      canAddComplaintBox: false,\n      canViewRequisition: true,\n      canAddRequisition: false,\n      canEditRequisition: false,\n      canDeleteRequisition: false,\n      canViewExpense: true,\n      canAddExpense: false,\n      canEditExpense: false,\n      canDeleteExpense: false,\n    };\n\n    const newSuperMod: SuperModerator = {\n      id: crypto.randomUUID(),\n      name: newSuperModName,\n      userId: newSuperModUserId,\n      password: newSuperModPassword,\n      permissions: defaultPermissions,\n      createdAt: new Date().toISOString(),\n    };\n\n    const updated = [...superModerators, newSuperMod];\n    setSuperModerators(updated);\n    localStorage.setItem(\"dob_super_moderators\", JSON.stringify(updated));\n\n    setNewSuperModName(\"\");\n    setNewSuperModUserId(\"\");\n    setNewSuperModPassword(\"\");\n    setShowAddSuperMod(false);\n\n    toast({\n      title: \"Super Moderator Created\",\n      description: `${newSuperModName} has been added with default permissions`,\n    });\n  };\n\n  const handleUpdateSuperModPermission = (id: string, permissionKey: keyof SuperModeratorPermissions, value: boolean) => {\n    const updated = superModerators.map(sm =>\n      sm.id === id\n        ? { ...sm, permissions: { ...sm.permissions, [permissionKey]: value } }\n        : sm\n    );\n    setSuperModerators(updated);\n    localStorage.setItem(\"dob_super_moderators\", JSON.stringify(updated));\n  };\n\n  const handleDeleteSuperModerator = (id: string, name: string) => {\n    const updated = superModerators.filter(sm => sm.id !== id);\n    setSuperModerators(updated);\n    localStorage.setItem(\"dob_super_moderators\", JSON.stringify(updated));\n\n    toast({\n      title: \"Super Moderator Removed\",\n      description: `${name} has been removed`,\n    });\n  };\n\n  const handleResetAllData = () => {\n    localStorage.removeItem(\"dob_entries\");\n    localStorage.removeItem(\"dob_settings\");\n    localStorage.removeItem(\"dob_employees\");\n    localStorage.removeItem(\"dob_jela_reporters\");\n    setAdminSettings({\n      currentMonth: new Date().toISOString().slice(0, 7),\n      employeeOfMonthMessage: \"Congratulations to our top performers this month!\",\n    });\n    toast({\n      title: \"Data Reset\",\n      description: \"All entries and settings have been cleared\",\n      variant: \"destructive\",\n    });\n  };\n\n  const handleToggleFeature = (feature: \"voiceArtist\" | \"attendance\" | \"workFlow\" | \"videoUploadTime\", enabled: boolean) => {\n    const storedFeatures = localStorage.getItem(\"dob_feature_toggles\");\n    const currentFeatures = storedFeatures ? JSON.parse(storedFeatures) : {};\n    \n    const features = {\n      ...currentFeatures,\n      voiceArtistEnabled: feature === \"voiceArtist\" ? enabled : (currentFeatures.voiceArtistEnabled ?? voiceArtistEnabled),\n      attendanceEnabled: feature === \"attendance\" ? enabled : (currentFeatures.attendanceEnabled ?? attendanceEnabled),\n      workFlowEnabled: feature === \"workFlow\" ? enabled : (currentFeatures.workFlowEnabled ?? workFlowEnabled),\n      videoUploadTimeEnabled: feature === \"videoUploadTime\" ? enabled : (currentFeatures.videoUploadTimeEnabled ?? videoUploadTimeEnabled),\n    };\n    \n    localStorage.setItem(\"dob_feature_toggles\", JSON.stringify(features));\n    \n    if (feature === \"voiceArtist\") {\n      setVoiceArtistEnabled(enabled);\n    } else if (feature === \"attendance\") {\n      setAttendanceEnabled(enabled);\n    } else if (feature === \"workFlow\") {\n      setWorkFlowEnabled(enabled);\n    } else {\n      setVideoUploadTimeEnabled(enabled);\n    }\n\n    const featureName = \n      feature === \"voiceArtist\" ? \"Voice Artist\" :\n      feature === \"attendance\" ? \"Daily Attendance\" :\n      feature === \"workFlow\" ? \"Work Flow\" :\n      \"Video Upload Time\";\n    \n    toast({\n      title: \"Feature Updated\",\n      description: `${featureName} module ${enabled ? \"enabled\" : \"disabled\"}`,\n    });\n  };\n\n  const handleToggleIPAccess = (enabled: boolean) => {\n    const updated = { ...ipAccess, enabled };\n    setIpAccess(updated);\n    localStorage.setItem(\"dob_ip_access\", JSON.stringify(updated));\n\n    toast({\n      title: enabled ? \"IP Access Enabled\" : \"IP Access Disabled\",\n      description: enabled \n        ? \"Only users from allowed IPs can access the system\" \n        : \"Access allowed from any IP address\",\n    });\n  };\n\n  const handleAddIP = () => {\n    if (!newIP.trim()) {\n      toast({\n        title: \"Invalid Input\",\n        description: \"Please enter a valid IP address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const ipPattern = /^(\\d{1,3}\\.){3}\\d{1,3}$/;\n    if (!ipPattern.test(newIP.trim())) {\n      toast({\n        title: \"Invalid IP Format\",\n        description: \"Please enter a valid IP address (e.g., 103.120.10.50)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (ipAccess.allowedIPs.includes(newIP.trim())) {\n      toast({\n        title: \"IP Already Exists\",\n        description: \"This IP address is already in the list\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const updated = {\n      ...ipAccess,\n      allowedIPs: [...ipAccess.allowedIPs, newIP.trim()],\n    };\n    setIpAccess(updated);\n    localStorage.setItem(\"dob_ip_access\", JSON.stringify(updated));\n    setNewIP(\"\");\n\n    toast({\n      title: \"IP Added\",\n      description: \"IP address added to allowed list\",\n    });\n  };\n\n  const handleRemoveIP = (ip: string) => {\n    const updated = {\n      ...ipAccess,\n      allowedIPs: ipAccess.allowedIPs.filter(i => i !== ip),\n    };\n    setIpAccess(updated);\n    localStorage.setItem(\"dob_ip_access\", JSON.stringify(updated));\n\n    toast({\n      title: \"IP Removed\",\n      description: \"IP address removed from allowed list\",\n    });\n  };\n\n  const validateBackupData = (data: DobBackupData): { valid: boolean; error?: string } => {\n    const requiredKeys: (keyof DobBackupData)[] = [\n      'dob_settings',\n      'dob_admin_credentials',\n      'dob_moderators',\n      'dob_super_moderators',\n      'dob_feature_toggles',\n      'dob_ip_access',\n      'dob_employees',\n      'dob_entries',\n    ];\n\n    const dataKeys = Object.keys(data);\n    const missingKeys = requiredKeys.filter(key => !dataKeys.includes(key));\n    \n    if (missingKeys.length > 0) {\n      return { valid: false, error: `Missing required data: ${missingKeys.join(', ')}` };\n    }\n\n    for (const key of requiredKeys) {\n      const value = data[key];\n      \n      if (value === null || value === undefined) {\n        return { valid: false, error: `Required field ${key} is null or undefined` };\n      }\n\n      if (key === 'dob_settings' || key === 'dob_feature_toggles' || key === 'dob_ip_access' || key === 'dob_admin_credentials') {\n        if (typeof value !== 'object' || Array.isArray(value)) {\n          return { valid: false, error: `${key} must be an object` };\n        }\n      } else {\n        if (!Array.isArray(value)) {\n          return { valid: false, error: `${key} must be an array` };\n        }\n      }\n    }\n\n    return { valid: true };\n  };\n\n  const handleExportData = () => {\n    try {\n      const allData: DobBackupData = {};\n      \n      const requiredKeys: (keyof DobBackupData)[] = [\n        'dob_settings',\n        'dob_admin_credentials',\n        'dob_moderators',\n        'dob_super_moderators',\n        'dob_feature_toggles',\n        'dob_ip_access',\n        'dob_employees',\n        'dob_entries',\n      ];\n\n      const optionalKeys: (keyof DobBackupData)[] = [\n        'dob_jela_reporters',\n        'dob_attendance',\n        'dob_complaints',\n        'dob_expense_sheets',\n        'dob_requisition_sheets',\n        'dob_upload_schedules',\n        'dob_work_categories',\n        'dob_work_notes',\n        'dob_voice_artists',\n        'dob_voice_work',\n      ];\n\n      requiredKeys.forEach(key => {\n        const value = localStorage.getItem(key);\n        if (value) {\n          try {\n            allData[key] = JSON.parse(value);\n          } catch {\n            allData[key] = value;\n          }\n        }\n      });\n\n      optionalKeys.forEach(key => {\n        const value = localStorage.getItem(key);\n        if (value) {\n          try {\n            allData[key] = JSON.parse(value);\n          } catch {\n            allData[key] = value;\n          }\n        }\n      });\n\n      const exportObject: DobBackupPayload = {\n        version: '1.0',\n        exportDate: new Date().toISOString(),\n        application: 'DOB Performance Tracker',\n        data: allData,\n      };\n\n      const dataStr = JSON.stringify(exportObject, null, 2);\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\n      const url = URL.createObjectURL(dataBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);\n      link.download = `dob-backup-${timestamp}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Export Successful\",\n        description: \"All website data has been exported successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"An error occurred while exporting data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.name.endsWith('.json')) {\n      toast({\n        title: \"Invalid File Type\",\n        description: \"Please select a JSON file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setImportFile(file);\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const content = e.target?.result as string;\n        const parsed = JSON.parse(content);\n        \n        if (!parsed.version || !parsed.data || !parsed.application) {\n          throw new Error(\"Invalid backup file structure - missing required fields\");\n        }\n\n        if (parsed.application !== 'DOB Performance Tracker') {\n          throw new Error(\"This backup file is not from DOB Performance Tracker\");\n        }\n\n        if (typeof parsed.data !== 'object' || parsed.data === null || Array.isArray(parsed.data)) {\n          throw new Error(\"Invalid backup file structure - data must be an object\");\n        }\n\n        const validationResult = validateBackupData(parsed.data);\n        if (!validationResult.valid) {\n          throw new Error(validationResult.error || \"Invalid backup data structure\");\n        }\n\n        setImportData(parsed as DobBackupPayload);\n        setShowImportConfirm(true);\n      } catch (error) {\n        toast({\n          title: \"Invalid Backup File\",\n          description: error instanceof Error ? error.message : \"Unable to parse the backup file\",\n          variant: \"destructive\",\n        });\n        setImportFile(null);\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const handleConfirmImport = () => {\n    try {\n      if (!importData || !importData.data) {\n        throw new Error(\"No import data available\");\n      }\n\n      const validationResult = validateBackupData(importData.data);\n      if (!validationResult.valid) {\n        throw new Error(validationResult.error || \"Invalid backup data structure\");\n      }\n\n      const keysToRemove: string[] = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && key.startsWith('dob_')) {\n          keysToRemove.push(key);\n        }\n      }\n\n      keysToRemove.forEach(key => {\n        localStorage.removeItem(key);\n      });\n\n      Object.entries(importData.data).forEach(([key, value]) => {\n        if (value !== undefined) {\n          localStorage.setItem(key, JSON.stringify(value));\n        }\n      });\n\n      setShowImportConfirm(false);\n      setImportFile(null);\n      setImportData(null);\n\n      toast({\n        title: \"Import Successful\",\n        description: \"All data has been restored. The page will reload in 2 seconds.\",\n      });\n\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    } catch (error) {\n      toast({\n        title: \"Import Failed\",\n        description: error instanceof Error ? error.message : \"An error occurred while importing data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCancelImport = () => {\n    setShowImportConfirm(false);\n    setImportFile(null);\n    setImportData(null);\n  };\n\n  if (userRole !== \"admin\") {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <DashboardHeader />\n      <div className=\"w-full px-4 md:px-6 py-6 flex-1\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <Shield className=\"w-7 h-7 text-primary\" />\n              <h1 className=\"text-3xl font-bold text-foreground\">Admin Settings</h1>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Manage application settings, security, credentials, and user access control\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center gap-2\">\n                    <Settings className=\"w-5 h-5 text-primary\" />\n                    <CardTitle>General Settings</CardTitle>\n                  </div>\n                  <CardDescription>Configure month and award messages</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"currentMonth\">Current Month for Awards</Label>\n                    <Input\n                      id=\"currentMonth\"\n                      type=\"month\"\n                      value={adminSettings.currentMonth}\n                      onChange={(e) => setAdminSettings({ ...adminSettings, currentMonth: e.target.value })}\n                      className=\"h-11\"\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      Set the month for which Employee of the Month awards will be calculated\n                    </p>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"message\">Employee of the Month Message</Label>\n                    <Textarea\n                      id=\"message\"\n                      value={adminSettings.employeeOfMonthMessage}\n                      onChange={(e) => setAdminSettings({ ...adminSettings, employeeOfMonthMessage: e.target.value })}\n                      placeholder=\"Enter custom award message\"\n                      className=\"min-h-28 resize-none\"\n                    />\n                    <div className=\"flex items-center justify-between\">\n                      <p className=\"text-xs text-muted-foreground\">\n                        Customize the message displayed on the rankings page\n                      </p>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {adminSettings.employeeOfMonthMessage.length} characters\n                      </span>\n                    </div>\n                  </div>\n\n                  <Button onClick={handleSaveSettings} className=\"w-full gap-2\">\n                    <Save className=\"w-4 h-4\" />\n                    Save Settings\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-purple-200 dark:border-purple-900\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-2\">\n                    <ToggleLeft className=\"w-5 h-5 text-purple-600\" />\n                    <CardTitle className=\"text-purple-700 dark:text-purple-400\">Feature Control</CardTitle>\n                  </div>\n                  <CardDescription>Enable or disable application modules</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {[\n                    { id: \"voiceArtist\", label: \"Voice Artist Module\", desc: \"Manage voice artists, work entries, and billing\", enabled: voiceArtistEnabled },\n                    { id: \"attendance\", label: \"Daily Attendance Module\", desc: \"Track employee attendance and working hours\", enabled: attendanceEnabled },\n                    { id: \"workFlow\", label: \"Work Flow Module\", desc: \"Visual task management and job assignment dashboard\", enabled: workFlowEnabled },\n                    { id: \"videoUploadTime\", label: \"Video Upload Time Module\", desc: \"Manage daily upload schedule for all video categories\", enabled: videoUploadTimeEnabled },\n                  ].map((feature) => (\n                    <div key={feature.id} className=\"flex items-center justify-between p-3 rounded-lg border bg-card hover:bg-accent/5 transition-colors\">\n                      <div className=\"flex-1\">\n                        <Label htmlFor={`${feature.id}Toggle`} className=\"text-sm font-medium cursor-pointer\">\n                          {feature.label}\n                        </Label>\n                        <p className=\"text-xs text-muted-foreground mt-0.5\">\n                          {feature.desc}\n                        </p>\n                      </div>\n                      <Switch\n                        id={`${feature.id}Toggle`}\n                        checked={feature.enabled}\n                        onCheckedChange={(checked) => handleToggleFeature(feature.id as any, checked)}\n                      />\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-cyan-200 dark:border-cyan-900\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-2\">\n                    <MessageCircle className=\"w-5 h-5 text-cyan-600\" />\n                    <CardTitle className=\"text-cyan-700 dark:text-cyan-400\">💬 Chat Box Settings</CardTitle>\n                  </div>\n                  <CardDescription>Configure real-time chat features and controls</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 rounded-lg border bg-card\">\n                    <div className=\"flex-1\">\n                      <Label htmlFor=\"chatEnabledToggle\" className=\"text-sm font-medium cursor-pointer\">\n                        Enable Chat Box\n                      </Label>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Turn on/off the real-time chat system for all users\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"chatEnabledToggle\"\n                      checked={settings.enabled}\n                      onCheckedChange={(checked) => updateSettings({ enabled: checked })}\n                    />\n                  </div>\n\n                  {settings.enabled && (\n                    <>\n                      <Separator />\n                      \n                      <div className=\"flex items-center justify-between p-3 rounded-lg border bg-card\">\n                        <div className=\"flex-1\">\n                          <Label htmlFor=\"fileSharingToggle\" className=\"text-sm font-medium cursor-pointer\">\n                            📸 Enable File & Image Sharing\n                          </Label>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Allow users to send images and files in chat\n                          </p>\n                        </div>\n                        <Switch\n                          id=\"fileSharingToggle\"\n                          checked={settings.fileSharingEnabled}\n                          onCheckedChange={(checked) => updateSettings({ fileSharingEnabled: checked })}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between p-3 rounded-lg border bg-card\">\n                        <div className=\"flex-1\">\n                          <Label htmlFor=\"moderatorOnlyToggle\" className=\"text-sm font-medium cursor-pointer\">\n                            🔒 Moderator Only Chat Mode\n                          </Label>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Only moderators and admins can send messages\n                          </p>\n                        </div>\n                        <Switch\n                          id=\"moderatorOnlyToggle\"\n                          checked={settings.moderatorOnlyMode}\n                          onCheckedChange={(checked) => updateSettings({ moderatorOnlyMode: checked })}\n                        />\n                      </div>\n\n                      <Separator />\n\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-sm font-medium\">🧹 Chat Management</Label>\n                        \n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" className=\"w-full gap-2\">\n                              <Trash2 className=\"w-4 h-4\" />\n                              Clear All Chat Data\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Clear All Chat Messages?</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                This will permanently delete all chat messages and history. This action cannot be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction onClick={clearAllMessages} className=\"bg-destructive text-destructive-foreground\">\n                                Clear All Messages\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n\n                        <div className=\"p-3 bg-blue-50 dark:bg-blue-950/20 rounded border border-blue-200 dark:border-blue-900 text-xs text-blue-800 dark:text-blue-400 space-y-2\">\n                          <p className=\"font-medium\">✨ Chat Box Features:</p>\n                          <ul className=\"space-y-1 ml-4 list-disc\">\n                            <li>Real-time messaging with WebSocket</li>\n                            <li>Online/Offline status indicators</li>\n                            <li>File & image sharing (admin controlled)</li>\n                            <li>Pin important messages to the top</li>\n                            <li>Timestamps and read receipts (✔️)</li>\n                            <li>Mute or block specific users</li>\n                            <li>Moderator-only chat mode</li>\n                          </ul>\n                        </div>\n\n                        {blockedUsers.length > 0 && (\n                          <div className=\"space-y-2\">\n                            <Label className=\"text-sm font-medium\">🚫 Blocked Users ({blockedUsers.length})</Label>\n                            <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                              {blockedUsers.map((blocked) => (\n                                <div key={blocked.userId} className=\"flex items-center justify-between p-2 rounded border bg-red-50 dark:bg-red-950/20\">\n                                  <span className=\"text-sm\">{blocked.userName}</span>\n                                  <Button\n                                    onClick={() => unblockUser(blocked.userId)}\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                  >\n                                    Unblock\n                                  </Button>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n\n                        {mutedUsers.length > 0 && (\n                          <div className=\"space-y-2\">\n                            <Label className=\"text-sm font-medium\">🔇 Muted Users ({mutedUsers.length})</Label>\n                            <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                              {mutedUsers.map((muted) => (\n                                <div key={muted.userId} className=\"flex items-center justify-between p-2 rounded border bg-yellow-50 dark:bg-yellow-950/20\">\n                                  <span className=\"text-sm\">{muted.userName}</span>\n                                  <Button\n                                    onClick={() => unmuteUser(muted.userId)}\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                  >\n                                    Unmute\n                                  </Button>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-red-200 dark:border-red-900\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-2\">\n                    <Lock className=\"w-5 h-5 text-red-600\" />\n                    <CardTitle className=\"text-red-700 dark:text-red-400\">IP Access Control</CardTitle>\n                  </div>\n                  <CardDescription>Restrict access to specific IP addresses</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 rounded-lg border bg-card\">\n                    <div className=\"flex-1\">\n                      <Label htmlFor=\"ipAccessToggle\" className=\"text-sm font-medium cursor-pointer\">\n                        Enable IP Access Restriction\n                      </Label>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        When enabled, only users from allowed IPs can access the system\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"ipAccessToggle\"\n                      checked={ipAccess.enabled}\n                      onCheckedChange={handleToggleIPAccess}\n                    />\n                  </div>\n\n                  {ipAccess.enabled && (\n                    <>\n                      <Separator />\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-sm font-medium\">Allowed IP Addresses</Label>\n                        <div className=\"flex gap-2\">\n                          <Input\n                            placeholder=\"e.g., 103.120.10.50\"\n                            value={newIP}\n                            onChange={(e) => setNewIP(e.target.value)}\n                            onKeyDown={(e) => e.key === \"Enter\" && handleAddIP()}\n                            className=\"flex-1\"\n                          />\n                          <Button onClick={handleAddIP} size=\"sm\">\n                            Add IP\n                          </Button>\n                        </div>\n\n                        <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                          {ipAccess.allowedIPs.length === 0 ? (\n                            <p className=\"text-sm text-muted-foreground text-center py-4\">\n                              No IPs added. Add IP addresses to restrict access.\n                            </p>\n                          ) : (\n                            ipAccess.allowedIPs.map((ip) => (\n                              <div key={ip} className=\"flex items-center justify-between p-2 rounded border bg-muted/50\">\n                                <code className=\"text-sm font-mono\">{ip}</code>\n                                <Button\n                                  onClick={() => handleRemoveIP(ip)}\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  className=\"h-7 w-7 p-0\"\n                                >\n                                  <X className=\"h-3 w-3\" />\n                                </Button>\n                              </div>\n                            ))\n                          )}\n                        </div>\n\n                        <div className=\"text-xs text-amber-600 dark:text-amber-400 p-3 bg-amber-50 dark:bg-amber-950/20 rounded border border-amber-200 dark:border-amber-900\">\n                          <p className=\"font-medium mb-1\">Warning:</p>\n                          <p>When IP restriction is active, users from unlisted IPs will see: \"Access denied: your IP is not authorized\"</p>\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-blue-200 dark:border-blue-900\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-2\">\n                    <Database className=\"w-5 h-5 text-blue-600\" />\n                    <CardTitle className=\"text-blue-700 dark:text-blue-400\">Import & Export</CardTitle>\n                  </div>\n                  <CardDescription>Backup and restore all website data</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"p-4 rounded-lg border bg-card space-y-3\">\n                    <div>\n                      <h4 className=\"text-sm font-medium mb-1\">Export All Data</h4>\n                      <p className=\"text-xs text-muted-foreground mb-3\">\n                        Download a complete backup of all website data including employees, content performance, \n                        voice artists, work records, attendance, tasks, and all settings.\n                      </p>\n                      <Button onClick={handleExportData} className=\"w-full gap-2\" variant=\"outline\">\n                        <Download className=\"w-4 h-4\" />\n                        Export Data (JSON)\n                      </Button>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"p-4 rounded-lg border bg-card space-y-3\">\n                    <div>\n                      <h4 className=\"text-sm font-medium mb-1\">Import Data</h4>\n                      <p className=\"text-xs text-muted-foreground mb-3\">\n                        Restore website data from a previously exported backup file. \n                        This will replace all current data.\n                      </p>\n                      <div className=\"space-y-2\">\n                        <Input\n                          type=\"file\"\n                          accept=\".json\"\n                          onChange={handleFileSelect}\n                          className=\"cursor-pointer\"\n                        />\n                        {importFile && (\n                          <p className=\"text-xs text-green-600 dark:text-green-400\">\n                            File selected: {importFile.name}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"text-xs text-amber-600 dark:text-amber-400 p-3 bg-amber-50 dark:bg-amber-950/20 rounded border border-amber-200 dark:border-amber-900\">\n                    <p className=\"font-medium mb-1\">Important:</p>\n                    <ul className=\"list-disc list-inside space-y-0.5\">\n                      <li>Export creates a complete backup of all data</li>\n                      <li>Import will replace all existing data</li>\n                      <li>You'll be asked to confirm before importing</li>\n                      <li>Keep backup files safe and secure</li>\n                    </ul>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-amber-200 dark:border-amber-900\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-2\">\n                    <Key className=\"w-5 h-5 text-amber-600\" />\n                    <CardTitle className=\"text-amber-700 dark:text-amber-400\">Change Admin Login</CardTitle>\n                  </div>\n                  <CardDescription>Update admin credentials securely</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    <div className=\"space-y-1.5\">\n                      <Label htmlFor=\"currentAdminId\" className=\"text-sm\">Current Admin ID</Label>\n                      <Input\n                        id=\"currentAdminId\"\n                        type=\"text\"\n                        value={currentAdminId}\n                        onChange={(e) => setCurrentAdminId(e.target.value)}\n                        placeholder=\"Enter current admin ID\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-1.5\">\n                      <Label htmlFor=\"currentAdminPassword\" className=\"text-sm\">Current Password</Label>\n                      <Input\n                        id=\"currentAdminPassword\"\n                        type=\"password\"\n                        value={currentAdminPassword}\n                        onChange={(e) => setCurrentAdminPassword(e.target.value)}\n                        placeholder=\"Enter current password\"\n                      />\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    <div className=\"space-y-1.5\">\n                      <Label htmlFor=\"newAdminId\" className=\"text-sm\">New Admin ID</Label>\n                      <Input\n                        id=\"newAdminId\"\n                        type=\"text\"\n                        value={newAdminId}\n                        onChange={(e) => setNewAdminId(e.target.value)}\n                        placeholder=\"Enter new admin ID\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-1.5\">\n                      <Label htmlFor=\"newAdminPassword\" className=\"text-sm\">New Password</Label>\n                      <Input\n                        id=\"newAdminPassword\"\n                        type=\"password\"\n                        value={newAdminPassword}\n                        onChange={(e) => setNewAdminPassword(e.target.value)}\n                        placeholder=\"Min 6 characters\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-1.5\">\n                      <Label htmlFor=\"confirmNewPassword\" className=\"text-sm\">Confirm Password</Label>\n                      <Input\n                        id=\"confirmNewPassword\"\n                        type=\"password\"\n                        value={confirmNewPassword}\n                        onChange={(e) => setConfirmNewPassword(e.target.value)}\n                        placeholder=\"Confirm new password\"\n                      />\n                    </div>\n                  </div>\n\n                  <Button onClick={handleChangeAdminCredentials} className=\"w-full gap-2 bg-amber-600 hover:bg-amber-700\">\n                    <Key className=\"w-4 h-4\" />\n                    Update Admin Credentials\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-destructive/50\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-2\">\n                    <Trash2 className=\"w-5 h-5 text-destructive\" />\n                    <CardTitle className=\"text-destructive\">Danger Zone</CardTitle>\n                  </div>\n                  <CardDescription>Irreversible actions that affect all data</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button variant=\"destructive\" className=\"w-full gap-2\">\n                        <Trash2 className=\"w-4 h-4\" />\n                        Reset All Data\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          This action cannot be undone. This will permanently delete all performance\n                          entries, employee data, and reset settings to defaults.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={handleResetAllData}\n                          className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                        >\n                          Reset Everything\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"space-y-6\">\n              <Card className=\"border-blue-200 dark:border-blue-900\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"w-5 h-5 text-blue-600\" />\n                    <CardTitle className=\"text-blue-700 dark:text-blue-400\">Moderator Management</CardTitle>\n                  </div>\n                  <CardDescription>Add and manage moderator accounts</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"p-3 bg-muted/50 rounded-lg space-y-2.5\">\n                    <h3 className=\"font-semibold text-sm flex items-center gap-2\">\n                      <UserPlus className=\"w-4 h-4\" />\n                      Add New Moderator\n                    </h3>\n                    <div className=\"space-y-2\">\n                      <Input\n                        placeholder=\"Full Name\"\n                        value={newModName}\n                        onChange={(e) => setNewModName(e.target.value)}\n                        className=\"h-9\"\n                      />\n                      <Input\n                        placeholder=\"User ID\"\n                        value={newModUserId}\n                        onChange={(e) => setNewModUserId(e.target.value)}\n                        className=\"h-9\"\n                      />\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Password (min 6 characters)\"\n                        value={newModPassword}\n                        onChange={(e) => setNewModPassword(e.target.value)}\n                        className=\"h-9\"\n                      />\n                      <Button onClick={handleAddModerator} className=\"w-full gap-2\" size=\"sm\">\n                        <UserPlus className=\"w-4 h-4\" />\n                        Add Moderator\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-semibold text-sm\">Existing Moderators ({moderators.length})</h3>\n                    {moderators.length === 0 ? (\n                      <p className=\"text-sm text-muted-foreground text-center py-6\">\n                        No moderators yet. Add one above to get started.\n                      </p>\n                    ) : (\n                      <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                        {moderators.map((mod, index) => (\n                          <div key={mod.id} className=\"border rounded-lg p-3 space-y-2 bg-card\">\n                            {editingMod === mod.id ? (\n                              <div className=\"space-y-2\">\n                                <Input\n                                  placeholder=\"Name\"\n                                  value={editModName}\n                                  onChange={(e) => setEditModName(e.target.value)}\n                                  className=\"h-8 text-sm\"\n                                />\n                                <Input\n                                  placeholder=\"User ID\"\n                                  value={editModUserId}\n                                  onChange={(e) => setEditModUserId(e.target.value)}\n                                  className=\"h-8 text-sm\"\n                                />\n                                <Input\n                                  type=\"password\"\n                                  placeholder=\"Password\"\n                                  value={editModPassword}\n                                  onChange={(e) => setEditModPassword(e.target.value)}\n                                  className=\"h-8 text-sm\"\n                                />\n                                <div className=\"flex gap-2\">\n                                  <Button\n                                    onClick={() => handleSaveEditModerator(mod.id)}\n                                    size=\"sm\"\n                                    className=\"flex-1 h-8\"\n                                  >\n                                    <Save className=\"w-3 h-3 mr-1\" />\n                                    Save\n                                  </Button>\n                                  <Button\n                                    onClick={() => setEditingMod(null)}\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"flex-1 h-8\"\n                                  >\n                                    Cancel\n                                  </Button>\n                                </div>\n                              </div>\n                            ) : (\n                              <>\n                                <div className=\"flex items-start justify-between\">\n                                  <div className=\"flex-1\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <span className=\"text-xs font-medium text-muted-foreground\">#{index + 1}</span>\n                                      <p className=\"font-medium text-sm\">{mod.name}</p>\n                                    </div>\n                                    <p className=\"text-xs text-muted-foreground mt-1\">\n                                      ID: <span className=\"font-mono\">{mod.userId}</span>\n                                    </p>\n                                  </div>\n                                </div>\n                                <div className=\"flex gap-2 pt-2 border-t\">\n                                  <Button\n                                    onClick={() => handleEditModerator(mod)}\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"flex-1 gap-1 h-8\"\n                                  >\n                                    <Edit className=\"w-3 h-3\" />\n                                    Edit\n                                  </Button>\n                                  <AlertDialog>\n                                    <AlertDialogTrigger asChild>\n                                      <Button size=\"sm\" variant=\"destructive\" className=\"flex-1 gap-1 h-8\">\n                                        <Trash2 className=\"w-3 h-3\" />\n                                        Delete\n                                      </Button>\n                                    </AlertDialogTrigger>\n                                    <AlertDialogContent>\n                                      <AlertDialogHeader>\n                                        <AlertDialogTitle>Delete Moderator?</AlertDialogTitle>\n                                        <AlertDialogDescription>\n                                          Are you sure you want to delete {mod.name}? This action cannot be undone.\n                                        </AlertDialogDescription>\n                                      </AlertDialogHeader>\n                                      <AlertDialogFooter>\n                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                        <AlertDialogAction\n                                          onClick={() => handleDeleteModerator(mod.id, mod.name)}\n                                          className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                                        >\n                                          Delete\n                                        </AlertDialogAction>\n                                      </AlertDialogFooter>\n                                    </AlertDialogContent>\n                                  </AlertDialog>\n                                </div>\n                              </>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-green-200 dark:border-green-900\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-2\">\n                    <Shield className=\"w-5 h-5 text-green-600\" />\n                    <CardTitle className=\"text-green-700 dark:text-green-400\">Super Moderator Management</CardTitle>\n                  </div>\n                  <CardDescription>Create super moderators with custom permissions</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <Dialog open={showAddSuperMod} onOpenChange={setShowAddSuperMod}>\n                    <DialogTrigger asChild>\n                      <Button className=\"w-full gap-2 bg-green-600 hover:bg-green-700\">\n                        <UserPlus className=\"w-4 h-4\" />\n                        Create Super Moderator\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-md\">\n                      <DialogHeader>\n                        <DialogTitle>Add Super Moderator</DialogTitle>\n                        <DialogDescription>\n                          Create a new super moderator with customizable permissions\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"space-y-3\">\n                        <div className=\"space-y-1.5\">\n                          <Label htmlFor=\"superModName\">Full Name</Label>\n                          <Input\n                            id=\"superModName\"\n                            placeholder=\"Enter full name\"\n                            value={newSuperModName}\n                            onChange={(e) => setNewSuperModName(e.target.value)}\n                          />\n                        </div>\n                        <div className=\"space-y-1.5\">\n                          <Label htmlFor=\"superModUserId\">User ID</Label>\n                          <Input\n                            id=\"superModUserId\"\n                            placeholder=\"Enter unique user ID\"\n                            value={newSuperModUserId}\n                            onChange={(e) => setNewSuperModUserId(e.target.value)}\n                          />\n                        </div>\n                        <div className=\"space-y-1.5\">\n                          <Label htmlFor=\"superModPassword\">Password</Label>\n                          <Input\n                            id=\"superModPassword\"\n                            type=\"password\"\n                            placeholder=\"Min 6 characters\"\n                            value={newSuperModPassword}\n                            onChange={(e) => setNewSuperModPassword(e.target.value)}\n                          />\n                        </div>\n                      </div>\n                      <DialogFooter>\n                        <Button onClick={handleAddSuperModerator} className=\"w-full\">\n                          Create Super Moderator\n                        </Button>\n                      </DialogFooter>\n                    </DialogContent>\n                  </Dialog>\n\n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-semibold text-sm\">Super Moderators ({superModerators.length})</h3>\n                    {superModerators.length === 0 ? (\n                      <p className=\"text-sm text-muted-foreground text-center py-6\">\n                        No super moderators yet. Create one to get started.\n                      </p>\n                    ) : (\n                      <div className=\"space-y-3 max-h-[500px] overflow-y-auto\">\n                        {superModerators.map((sm) => (\n                          <div key={sm.id} className=\"border rounded-lg p-3 space-y-3 bg-card\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <p className=\"font-medium text-sm\">{sm.name}</p>\n                                <p className=\"text-xs text-muted-foreground\">ID: {sm.userId}</p>\n                              </div>\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button size=\"sm\" variant=\"outline\" onClick={() => setEditingSuperMod(sm)}>\n                                    <Edit className=\"w-3 h-3 mr-1\" />\n                                    Permissions\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                                  <DialogHeader>\n                                    <DialogTitle>Edit Permissions - {sm.name}</DialogTitle>\n                                    <DialogDescription>\n                                      Configure what {sm.name} can view, add, edit, or delete\n                                    </DialogDescription>\n                                  </DialogHeader>\n                                  <div className=\"space-y-4\">\n                                    {[\n                                      { key: \"Dashboard\", permissions: [\"View\", \"Add\", \"Edit\", \"Delete\"] },\n                                      { key: \"VoiceArtist\", permissions: [\"View\", \"Add\", \"Edit\", \"Delete\"] },\n                                      { key: \"Attendance\", permissions: [\"View\", \"Add\", \"Edit\", \"Delete\"] },\n                                      { key: \"WorkFlow\", permissions: [\"View\", \"Add\", \"Edit\", \"Delete\"] },\n                                      { key: \"VideoUpload\", permissions: [\"View\", \"Add\", \"Edit\", \"Delete\"] },\n                                      { key: \"ComplaintBox\", permissions: [\"View\", \"Add\"] },\n                                      { key: \"Requisition\", permissions: [\"View\", \"Add\", \"Edit\", \"Delete\"] },\n                                      { key: \"Expense\", permissions: [\"View\", \"Add\", \"Edit\", \"Delete\"] },\n                                    ].map((section) => (\n                                      <div key={section.key} className=\"space-y-2 p-3 border rounded-lg\">\n                                        <h4 className=\"font-medium text-sm\">{section.key}</h4>\n                                        <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-2\">\n                                          {section.permissions.map((perm) => {\n                                            const permKey = `can${perm}${section.key}` as keyof SuperModeratorPermissions;\n                                            return (\n                                              <div key={perm} className=\"flex items-center space-x-2\">\n                                                <Switch\n                                                  id={`${sm.id}-${permKey}`}\n                                                  checked={sm.permissions[permKey]}\n                                                  onCheckedChange={(checked) => handleUpdateSuperModPermission(sm.id, permKey, checked)}\n                                                />\n                                                <Label htmlFor={`${sm.id}-${permKey}`} className=\"text-xs cursor-pointer\">\n                                                  {perm}\n                                                </Label>\n                                              </div>\n                                            );\n                                          })}\n                                        </div>\n                                      </div>\n                                    ))}\n                                  </div>\n                                </DialogContent>\n                              </Dialog>\n                            </div>\n                            <AlertDialog>\n                              <AlertDialogTrigger asChild>\n                                <Button size=\"sm\" variant=\"destructive\" className=\"w-full gap-1\">\n                                  <Trash2 className=\"w-3 h-3\" />\n                                  Delete Super Moderator\n                                </Button>\n                              </AlertDialogTrigger>\n                              <AlertDialogContent>\n                                <AlertDialogHeader>\n                                  <AlertDialogTitle>Delete Super Moderator?</AlertDialogTitle>\n                                  <AlertDialogDescription>\n                                    Are you sure you want to delete {sm.name}? This action cannot be undone.\n                                  </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                  <AlertDialogAction\n                                    onClick={() => handleDeleteSuperModerator(sm.id, sm.name)}\n                                    className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                                  >\n                                    Delete\n                                  </AlertDialogAction>\n                                </AlertDialogFooter>\n                              </AlertDialogContent>\n                            </AlertDialog>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Footer />\n\n      <AlertDialog open={showImportConfirm} onOpenChange={setShowImportConfirm}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirm Data Import</AlertDialogTitle>\n            <AlertDialogDescription>\n              You are about to import data from{' '}\n              <span className=\"font-semibold text-foreground\">{importFile?.name}</span>.\n              <br /><br />\n              <span className=\"text-destructive font-medium\">Warning:</span> This will replace all existing website data including:\n              <ul className=\"list-disc list-inside mt-2 space-y-1 text-sm\">\n                <li>Employee records and content performance data</li>\n                <li>Voice artist details and work records</li>\n                <li>Attendance records and work flow tasks</li>\n                <li>All settings, moderators, and configurations</li>\n              </ul>\n              <br />\n              {importData && (\n                <div className=\"text-xs bg-muted p-2 rounded mt-2\">\n                  <p><strong>Backup Info:</strong></p>\n                  <p>Exported: {new Date(importData.exportDate).toLocaleString()}</p>\n                  <p>Version: {importData.version}</p>\n                </div>\n              )}\n              <br />\n              This action cannot be undone. Are you sure you want to continue?\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={handleCancelImport}>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleConfirmImport}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              <Upload className=\"w-4 h-4 mr-2\" />\n              Import & Replace Data\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":70079},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/pages/attendance.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Calendar, Save, Printer, Download, Clock, Users, AlertCircle, Coffee, UserX, CalendarX } from \"lucide-react\";\nimport DashboardHeader from \"@/components/DashboardHeader\";\nimport Footer from \"@/components/Footer\";\nimport { format } from \"date-fns\";\nimport * as XLSX from \"xlsx\";\n\ninterface Employee {\n  id: string;\n  name: string;\n  employeeId: string;\n  designation: string;\n}\n\ninterface AttendanceRecord {\n  id: string;\n  employeeId: string;\n  employeeName: string;\n  employeeIdNumber: string;\n  designation: string;\n  date: string;\n  inTime: string;\n  outTime: string;\n  workingHours: number;\n  status: \"Present\" | \"Absent\" | \"Late\" | \"Half-day\" | \"Leave\";\n  createdAt: string;\n}\n\nconst OFFICE_START_TIME = \"08:00\";\n\nexport default function Attendance() {\n  const { toast } = useToast();\n\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [attendanceRecords, setAttendanceRecords] = useState<AttendanceRecord[]>([]);\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().slice(0, 10));\n  const [filterMonth, setFilterMonth] = useState(new Date().toISOString().slice(0, 7));\n\n  useEffect(() => {\n    const storedEmployees = localStorage.getItem(\"dob_employees\");\n    if (storedEmployees) {\n      const parsed = JSON.parse(storedEmployees);\n      setEmployees(parsed);\n    }\n\n    const storedAttendance = localStorage.getItem(\"dob_attendance\");\n    if (storedAttendance) {\n      setAttendanceRecords(JSON.parse(storedAttendance));\n    }\n  }, []);\n\n  const calculateWorkingHours = (inTime: string, outTime: string): number => {\n    if (!inTime || !outTime) return 0;\n    \n    const [inHour, inMin] = inTime.split(\":\").map(Number);\n    const [outHour, outMin] = outTime.split(\":\").map(Number);\n    \n    const inMinutes = inHour * 60 + inMin;\n    const outMinutes = outHour * 60 + outMin;\n    \n    const diff = outMinutes - inMinutes;\n    return Math.max(0, diff / 60);\n  };\n\n  const isLate = (inTime: string): boolean => {\n    if (!inTime) return false;\n    const [inHour, inMin] = inTime.split(\":\").map(Number);\n    const [startHour, startMin] = OFFICE_START_TIME.split(\":\").map(Number);\n    \n    const inMinutes = inHour * 60 + inMin;\n    const startMinutes = startHour * 60 + startMin;\n    \n    return inMinutes > startMinutes;\n  };\n\n  const getDefaultStatus = (inTime: string, workingHours: number): AttendanceRecord[\"status\"] => {\n    if (workingHours === 0) return \"Absent\";\n    if (isLate(inTime)) return \"Late\";\n    if (workingHours < 4) return \"Half-day\";\n    if (workingHours >= 8) return \"Present\";\n    return \"Present\";\n  };\n\n  const handleUpdateAttendance = (\n    employeeId: string,\n    field: string,\n    value: string\n  ) => {\n    const employee = employees.find(e => e.id === employeeId);\n    if (!employee) return;\n\n    const existingRecordIndex = attendanceRecords.findIndex(\n      r => r.employeeId === employeeId && r.date === selectedDate\n    );\n\n    let updated: AttendanceRecord[];\n\n    if (existingRecordIndex !== -1) {\n      const record = attendanceRecords[existingRecordIndex];\n      const updatedRecord = { ...record, [field]: value };\n\n      if (field === \"inTime\" || field === \"outTime\") {\n        const inTime = field === \"inTime\" ? value : record.inTime;\n        const outTime = field === \"outTime\" ? value : record.outTime;\n        updatedRecord.workingHours = calculateWorkingHours(inTime, outTime);\n        \n        updatedRecord.status = getDefaultStatus(inTime, updatedRecord.workingHours);\n      }\n\n      updated = [...attendanceRecords];\n      updated[existingRecordIndex] = updatedRecord;\n    } else {\n      const newRecord: AttendanceRecord = {\n        id: crypto.randomUUID(),\n        employeeId: employee.id,\n        employeeName: employee.name,\n        employeeIdNumber: employee.employeeId,\n        designation: employee.designation,\n        date: selectedDate,\n        inTime: field === \"inTime\" ? value : \"\",\n        outTime: field === \"outTime\" ? value : \"\",\n        workingHours: 0,\n        status: \"Absent\",\n        createdAt: new Date().toISOString(),\n      };\n\n      if (field === \"inTime\" || field === \"outTime\") {\n        newRecord.workingHours = calculateWorkingHours(\n          newRecord.inTime,\n          newRecord.outTime\n        );\n        newRecord.status = getDefaultStatus(newRecord.inTime, newRecord.workingHours);\n      } else if (field === \"status\") {\n        newRecord.status = value as AttendanceRecord[\"status\"];\n      }\n\n      updated = [...attendanceRecords, newRecord];\n    }\n\n    setAttendanceRecords(updated);\n    localStorage.setItem(\"dob_attendance\", JSON.stringify(updated));\n  };\n\n  const handleSaveAll = () => {\n    localStorage.setItem(\"dob_attendance\", JSON.stringify(attendanceRecords));\n    toast({\n      title: \"Attendance Saved\",\n      description: \"All attendance records have been saved successfully\",\n    });\n  };\n\n  const getAttendanceForEmployee = (employeeId: string) => {\n    return attendanceRecords.find(\n      r => r.employeeId === employeeId && r.date === selectedDate\n    );\n  };\n\n  const filteredRecords = useMemo(() => {\n    return attendanceRecords.filter(record => {\n      const recordMonth = record.date.slice(0, 7);\n      return recordMonth === filterMonth;\n    });\n  }, [attendanceRecords, filterMonth]);\n\n  const todayRecords = useMemo(() => {\n    return attendanceRecords.filter(r => r.date === selectedDate);\n  }, [attendanceRecords, selectedDate]);\n\n  const todaySummary = useMemo(() => {\n    const summary = {\n      totalEmployees: employees.length,\n      present: 0,\n      late: 0,\n      leave: 0,\n      absent: 0,\n      halfDay: 0,\n      totalHours: 0,\n    };\n\n    todayRecords.forEach(record => {\n      if (record.status === \"Present\") summary.present++;\n      else if (record.status === \"Late\") summary.late++;\n      else if (record.status === \"Leave\") summary.leave++;\n      else if (record.status === \"Absent\") summary.absent++;\n      else if (record.status === \"Half-day\") summary.halfDay++;\n      \n      summary.totalHours += record.workingHours;\n    });\n\n    summary.absent = summary.totalEmployees - (summary.present + summary.late + summary.leave + summary.halfDay);\n\n    return summary;\n  }, [todayRecords, employees.length]);\n\n  const handleExportToExcel = () => {\n    const data = filteredRecords.map((record, index) => ({\n      SL: index + 1,\n      Name: record.employeeName,\n      \"Employee ID\": record.employeeIdNumber,\n      Designation: record.designation,\n      Date: format(new Date(record.date), \"MMM dd, yyyy\"),\n      \"In Time\": record.inTime || \"-\",\n      \"Out Time\": record.outTime || \"-\",\n      \"Working Hours\": record.workingHours.toFixed(2),\n      Status: record.status,\n    }));\n\n    const ws = XLSX.utils.json_to_sheet(data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"Attendance\");\n\n    const monthName = format(new Date(filterMonth + \"-01\"), \"MMMM-yyyy\");\n    XLSX.writeFile(wb, `Attendance_${monthName}.xlsx`);\n\n    toast({\n      title: \"Export Successful\",\n      description: \"Attendance records exported to Excel\",\n    });\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <DashboardHeader />\n      <div className=\"w-full px-6 py-6 flex-1 print:p-0\">\n        <div className=\"mb-6\">\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"w-6 h-6 text-primary\" />\n            <h1 className=\"text-2xl font-semibold text-foreground\">Daily Attendance</h1>\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Track and manage employee attendance (Office starts at {OFFICE_START_TIME})\n          </p>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Summary Card */}\n          <Card className=\"border-2 border-primary/20\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"w-5 h-5\" />\n                Attendance Summary - {format(new Date(selectedDate), \"MMM dd, yyyy\")}\n              </CardTitle>\n              <CardDescription>Overview of today's attendance status</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n                <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg border border-blue-200 dark:border-blue-800\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Users className=\"w-4 h-4 text-blue-600\" />\n                    <span className=\"text-xs font-medium text-blue-700 dark:text-blue-400\">Total</span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">{todaySummary.totalEmployees}</p>\n                </div>\n                \n                <div className=\"bg-green-50 dark:bg-green-950 p-4 rounded-lg border border-green-200 dark:border-green-800\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Clock className=\"w-4 h-4 text-green-600\" />\n                    <span className=\"text-xs font-medium text-green-700 dark:text-green-400\">Present</span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-green-700 dark:text-green-300\">{todaySummary.present}</p>\n                </div>\n                \n                <div className=\"bg-yellow-50 dark:bg-yellow-950 p-4 rounded-lg border border-yellow-200 dark:border-yellow-800\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <AlertCircle className=\"w-4 h-4 text-yellow-600\" />\n                    <span className=\"text-xs font-medium text-yellow-700 dark:text-yellow-400\">Late</span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-yellow-700 dark:text-yellow-300\">{todaySummary.late}</p>\n                </div>\n                \n                <div className=\"bg-orange-50 dark:bg-orange-950 p-4 rounded-lg border border-orange-200 dark:border-orange-800\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Coffee className=\"w-4 h-4 text-orange-600\" />\n                    <span className=\"text-xs font-medium text-orange-700 dark:text-orange-400\">Half Day</span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-orange-700 dark:text-orange-300\">{todaySummary.halfDay}</p>\n                </div>\n                \n                <div className=\"bg-purple-50 dark:bg-purple-950 p-4 rounded-lg border border-purple-200 dark:border-purple-800\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <CalendarX className=\"w-4 h-4 text-purple-600\" />\n                    <span className=\"text-xs font-medium text-purple-700 dark:text-purple-400\">Leave</span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-purple-700 dark:text-purple-300\">{todaySummary.leave}</p>\n                </div>\n                \n                <div className=\"bg-red-50 dark:bg-red-950 p-4 rounded-lg border border-red-200 dark:border-red-800\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <UserX className=\"w-4 h-4 text-red-600\" />\n                    <span className=\"text-xs font-medium text-red-700 dark:text-red-400\">Absent</span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-red-700 dark:text-red-300\">{todaySummary.absent}</p>\n                </div>\n              </div>\n              \n              <div className=\"mt-4 pt-4 border-t\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"font-medium text-muted-foreground\">Total Working Hours Today:</span>\n                  <span className=\"text-lg font-bold text-primary\">{todaySummary.totalHours.toFixed(2)} hrs</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Mark Attendance</CardTitle>\n              <CardDescription>\n                Record daily attendance for all employees (Late auto-marked if arrival after {OFFICE_START_TIME})\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center gap-4 print:hidden\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"selectedDate\">Select Date</Label>\n                  <Input\n                    id=\"selectedDate\"\n                    type=\"date\"\n                    value={selectedDate}\n                    onChange={(e) => setSelectedDate(e.target.value)}\n                    className=\"w-48\"\n                  />\n                </div>\n                <Button onClick={handleSaveAll} className=\"gap-2 mt-8\">\n                  <Save className=\"w-4 h-4\" />\n                  Save All\n                </Button>\n              </div>\n\n              {employees.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground text-center py-8\">\n                  No employees found. Please add employees first in the Employee Data section.\n                </p>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border\">\n                    <thead>\n                      <tr className=\"border-b bg-muted/50\">\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">SL</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">Name</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">Employee ID</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">Designation</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">Date</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">In Time</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">Out Time</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">Working Hours</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {employees.map((employee, index) => {\n                        const record = getAttendanceForEmployee(employee.id);\n                        return (\n                          <tr key={employee.id} className=\"border-b hover:bg-muted/30\">\n                            <td className=\"py-3 px-4 text-sm border-r\">{index + 1}</td>\n                            <td className=\"py-3 px-4 text-sm font-medium border-r\">{employee.name}</td>\n                            <td className=\"py-3 px-4 text-sm border-r\">{employee.employeeId}</td>\n                            <td className=\"py-3 px-4 text-sm border-r\">{employee.designation}</td>\n                            <td className=\"py-3 px-4 text-sm border-r\">\n                              {format(new Date(selectedDate), \"MMM dd, yyyy\")}\n                            </td>\n                            <td className=\"py-3 px-4 border-r\">\n                              <Input\n                                type=\"time\"\n                                value={record?.inTime || \"\"}\n                                onChange={(e) => handleUpdateAttendance(employee.id, \"inTime\", e.target.value)}\n                                className=\"h-8 text-sm\"\n                              />\n                            </td>\n                            <td className=\"py-3 px-4 border-r\">\n                              <Input\n                                type=\"time\"\n                                value={record?.outTime || \"\"}\n                                onChange={(e) => handleUpdateAttendance(employee.id, \"outTime\", e.target.value)}\n                                className=\"h-8 text-sm\"\n                              />\n                            </td>\n                            <td className=\"py-3 px-4 text-sm text-center border-r\">\n                              {record?.workingHours ? record.workingHours.toFixed(2) : \"0.00\"}\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <Select\n                                value={record?.status || \"Absent\"}\n                                onValueChange={(value) => handleUpdateAttendance(employee.id, \"status\", value)}\n                              >\n                                <SelectTrigger className=\"h-8 text-sm\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"Present\">Present</SelectItem>\n                                  <SelectItem value=\"Absent\">Absent</SelectItem>\n                                  <SelectItem value=\"Late\">Late</SelectItem>\n                                  <SelectItem value=\"Half-day\">Half-day</SelectItem>\n                                  <SelectItem value=\"Leave\">Leave</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle>Attendance History</CardTitle>\n                  <CardDescription>View and export attendance records</CardDescription>\n                </div>\n                <div className=\"flex gap-2 print:hidden\">\n                  <div className=\"space-y-2\">\n                    <Input\n                      type=\"month\"\n                      value={filterMonth}\n                      onChange={(e) => setFilterMonth(e.target.value)}\n                      className=\"w-48\"\n                    />\n                  </div>\n                  <Button onClick={handleExportToExcel} variant=\"outline\" className=\"gap-2\">\n                    <Download className=\"w-4 h-4\" />\n                    Export Excel\n                  </Button>\n                  <Button onClick={handlePrint} variant=\"outline\" className=\"gap-2\">\n                    <Printer className=\"w-4 h-4\" />\n                    Print\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {filteredRecords.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground text-center py-8\">\n                  No attendance records for the selected month\n                </p>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border\">\n                    <thead>\n                      <tr className=\"border-b bg-muted/50\">\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">SL</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">Name</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">Employee ID</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">Designation</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">Date</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">In Time</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">Out Time</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">Working Hours</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filteredRecords.map((record, index) => (\n                        <tr key={record.id} className=\"border-b hover:bg-muted/30\">\n                          <td className=\"py-3 px-4 text-sm border-r\">{index + 1}</td>\n                          <td className=\"py-3 px-4 text-sm font-medium border-r\">{record.employeeName}</td>\n                          <td className=\"py-3 px-4 text-sm border-r\">{record.employeeIdNumber}</td>\n                          <td className=\"py-3 px-4 text-sm border-r\">{record.designation}</td>\n                          <td className=\"py-3 px-4 text-sm border-r\">\n                            {format(new Date(record.date), \"MMM dd, yyyy\")}\n                          </td>\n                          <td className=\"py-3 px-4 text-sm border-r\">{record.inTime || \"-\"}</td>\n                          <td className=\"py-3 px-4 text-sm border-r\">{record.outTime || \"-\"}</td>\n                          <td className=\"py-3 px-4 text-sm text-center border-r\">\n                            {record.workingHours.toFixed(2)}\n                          </td>\n                          <td className=\"py-3 px-4 text-sm\">\n                            <span className={`px-2 py-1 rounded text-xs font-medium ${\n                              record.status === \"Present\" ? \"bg-green-100 text-green-800\" :\n                              record.status === \"Absent\" ? \"bg-red-100 text-red-800\" :\n                              record.status === \"Late\" ? \"bg-yellow-100 text-yellow-800\" :\n                              record.status === \"Half-day\" ? \"bg-orange-100 text-orange-800\" :\n                              \"bg-blue-100 text-blue-800\"\n                            }`}>\n                              {record.status}\n                            </span>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      <Footer />\n\n      <style>{`\n        @media print {\n          .print\\\\:hidden {\n            display: none !important;\n          }\n          .print\\\\:p-0 {\n            padding: 0 !important;\n          }\n          @page {\n            margin: 2cm;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":23025},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/pages/employee-data.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { Employee } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, Download, Search, Filter } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport DashboardHeader from \"@/components/DashboardHeader\";\nimport Footer from \"@/components/Footer\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nexport default function EmployeeData() {\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterDesignation, setFilterDesignation] = useState<string>(\"all\");\n  const [filterShift, setFilterShift] = useState<string>(\"all\");\n  const [editingCell, setEditingCell] = useState<{ id: string; field: keyof Employee } | null>(null);\n  const [editValue, setEditValue] = useState(\"\");\n  const { toast } = useToast();\n  const { hasPermission } = useAuth();\n\n  // Load employees from localStorage\n  useEffect(() => {\n    const stored = localStorage.getItem(\"dob_employees\");\n    if (stored) {\n      setEmployees(JSON.parse(stored));\n    }\n  }, []);\n\n  // Get unique designations and shifts for filters\n  const designations = useMemo(() => {\n    const unique = new Set(employees.map(e => e.designation).filter(Boolean));\n    return Array.from(unique);\n  }, [employees]);\n\n  const shifts = useMemo(() => {\n    const unique = new Set(employees.map(e => e.officeShift).filter(Boolean));\n    return Array.from(unique);\n  }, [employees]);\n\n  // Filter employees\n  const filteredEmployees = useMemo(() => {\n    return employees.filter(emp => {\n      const matchesSearch = \n        emp.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        emp.employeeId.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesDesignation = \n        filterDesignation === \"all\" || emp.designation === filterDesignation;\n      \n      const matchesShift = \n        filterShift === \"all\" || emp.officeShift === filterShift;\n      \n      return matchesSearch && matchesDesignation && matchesShift;\n    });\n  }, [employees, searchTerm, filterDesignation, filterShift]);\n\n  const isValidTime = (time: string): boolean => {\n    if (!time) return false;\n    // Support both 24-hour format (HH:MM) and 12-hour format (HH:MM am/pm)\n    const time24Regex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\n    const time12Regex = /^(0?[1-9]|1[0-2]):[0-5][0-9]\\s?(am|pm)$/i;\n    return time24Regex.test(time) || time12Regex.test(time);\n  };\n\n  const convertTo24Hour = (time: string): { hour: number; minute: number } | null => {\n    if (!time) return null;\n    \n    // Check if it's 12-hour format (with am/pm)\n    const time12Match = time.match(/^(0?[1-9]|1[0-2]):([0-5][0-9])\\s?(am|pm)$/i);\n    if (time12Match) {\n      let hour = parseInt(time12Match[1]);\n      const minute = parseInt(time12Match[2]);\n      const period = time12Match[3].toLowerCase();\n      \n      if (period === 'pm' && hour !== 12) {\n        hour += 12;\n      } else if (period === 'am' && hour === 12) {\n        hour = 0;\n      }\n      \n      return { hour, minute };\n    }\n    \n    // Check if it's 24-hour format\n    const time24Match = time.match(/^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$/);\n    if (time24Match) {\n      return {\n        hour: parseInt(time24Match[1]),\n        minute: parseInt(time24Match[2])\n      };\n    }\n    \n    return null;\n  };\n\n  const calculateTotalHours = (inTime: string, outTime: string): string => {\n    if (!inTime || !outTime) return \"-\";\n    \n    const inConverted = convertTo24Hour(inTime);\n    const outConverted = convertTo24Hour(outTime);\n    \n    if (!inConverted || !outConverted) {\n      return \"Invalid time\";\n    }\n    \n    try {\n      const inMinutes = inConverted.hour * 60 + inConverted.minute;\n      const outMinutes = outConverted.hour * 60 + outConverted.minute;\n      \n      let totalMinutes = outMinutes - inMinutes;\n      if (totalMinutes < 0) totalMinutes += 24 * 60; // Handle overnight shifts\n      \n      const hours = Math.floor(totalMinutes / 60);\n      const minutes = totalMinutes % 60;\n      \n      return `${hours}h ${minutes}m`;\n    } catch {\n      return \"Invalid time\";\n    }\n  };\n\n  const handleAddEmployee = () => {\n    const newEmployee: Employee = {\n      id: crypto.randomUUID(),\n      name: \"\",\n      employeeId: \"\",\n      designation: \"\",\n      holiday: \"\",\n      salary: \"\",\n      address: \"\",\n      phoneNumber: \"\",\n      officeShift: \"\",\n      officeInTime: \"\",\n      officeOutTime: \"\",\n      remarks: \"\",\n      createdAt: new Date().toISOString(),\n    };\n\n    const updated = [newEmployee, ...employees];\n    setEmployees(updated);\n    localStorage.setItem(\"dob_employees\", JSON.stringify(updated));\n    \n    toast({\n      title: \"Employee Added\",\n      description: \"New employee entry created\",\n    });\n  };\n\n  const handleUpdateEmployee = (id: string, updates: Partial<Employee>) => {\n    const updated = employees.map(emp => \n      emp.id === id ? { ...emp, ...updates } : emp\n    );\n    setEmployees(updated);\n    localStorage.setItem(\"dob_employees\", JSON.stringify(updated));\n  };\n\n  const handleDeleteEmployee = (id: string) => {\n    const updated = employees.filter(emp => emp.id !== id);\n    setEmployees(updated);\n    localStorage.setItem(\"dob_employees\", JSON.stringify(updated));\n    \n    toast({\n      title: \"Employee Deleted\",\n      description: \"Employee record removed\",\n    });\n  };\n\n  const handleCellClick = (id: string, field: keyof Employee, value: any) => {\n    if (field === \"id\" || field === \"createdAt\") return;\n    setEditingCell({ id, field });\n    setEditValue(value?.toString() || \"\");\n  };\n\n  const handleCellBlur = () => {\n    if (editingCell) {\n      handleUpdateEmployee(editingCell.id, { [editingCell.field]: editValue });\n      setEditingCell(null);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleCellBlur();\n    } else if (e.key === \"Escape\") {\n      setEditingCell(null);\n    }\n  };\n\n  const handleExportToExcel = async () => {\n    try {\n      const XLSX = await import(\"xlsx\");\n      const { format } = await import(\"date-fns\");\n\n      const data = filteredEmployees.map((emp, index) => ({\n        'SL': index + 1,\n        'Name': emp.name,\n        'Employee ID': emp.employeeId,\n        'Designation': emp.designation || '',\n        'Holiday': emp.holiday || '',\n        'Salary': emp.salary || '',\n        'Address': emp.address || '',\n        'Phone Number': emp.phoneNumber || '',\n        'Office Shift': emp.officeShift || '',\n        'Office In Time': emp.officeInTime || '',\n        'Office Out Time': emp.officeOutTime || '',\n        'Total Hours': calculateTotalHours(emp.officeInTime || '', emp.officeOutTime || ''),\n        'Remarks': emp.remarks || '',\n      }));\n\n      const worksheet = XLSX.utils.json_to_sheet(data);\n      const workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Employee Data');\n\n      const fileName = `Employee_Data_${format(new Date(), 'yyyy-MM-dd')}.xlsx`;\n      XLSX.writeFile(workbook, fileName);\n\n      toast({\n        title: \"Export Successful\",\n        description: \"Employee data exported to Excel\",\n      });\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      toast({\n        title: \"Export Failed\",\n        description: \"Could not generate Excel file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const renderCell = (employee: Employee, field: keyof Employee) => {\n    const value = employee[field];\n    const isEditing = editingCell?.id === employee.id && editingCell?.field === field;\n\n    if (field === \"id\" || field === \"createdAt\") {\n      return null;\n    }\n\n    if (isEditing) {\n      const placeholder = (field === \"officeInTime\" || field === \"officeOutTime\") \n        ? \"e.g. 08:00 am\" \n        : \"\";\n      \n      return (\n        <Input\n          autoFocus\n          value={editValue}\n          onChange={(e) => setEditValue(e.target.value)}\n          onBlur={handleCellBlur}\n          onKeyDown={handleKeyDown}\n          placeholder={placeholder}\n          className=\"h-9 text-sm\"\n        />\n      );\n    }\n\n    return (\n      <span className=\"text-sm\">\n        {value !== undefined && value !== null && value !== \"\" ? value.toString() : \"-\"}\n      </span>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <DashboardHeader />\n      <div className=\"w-full px-6 py-6 flex-1\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-foreground\">Employee Data</h1>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Manage employee information and records\n            </p>\n          </div>\n          <div className=\"flex gap-3\">\n            <Button\n              onClick={handleExportToExcel}\n              variant=\"outline\"\n              className=\"gap-2\"\n              disabled={filteredEmployees.length === 0}\n            >\n              <Download className=\"w-4 h-4\" />\n              Export to Excel\n            </Button>\n            <Button onClick={handleAddEmployee} className=\"gap-2\">\n              <Plus className=\"w-4 h-4\" />\n              Add New Employee\n            </Button>\n          </div>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"flex gap-4 mb-6\">\n          <div className=\"relative flex-1 max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search by name or employee ID...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          \n          <Select value={filterDesignation} onValueChange={setFilterDesignation}>\n            <SelectTrigger className=\"w-48\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              <SelectValue placeholder=\"Filter by Designation\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Designations</SelectItem>\n              {designations.map(des => (\n                <SelectItem key={des} value={des}>{des}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          <Select value={filterShift} onValueChange={setFilterShift}>\n            <SelectTrigger className=\"w-48\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              <SelectValue placeholder=\"Filter by Shift\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Shifts</SelectItem>\n              {shifts.map(shift => (\n                <SelectItem key={shift} value={shift}>{shift}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Employee Table */}\n        {filteredEmployees.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center py-16 text-center border rounded-lg\">\n            <div className=\"w-16 h-16 rounded-full bg-muted flex items-center justify-center mb-4\">\n              <Plus className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"font-medium text-lg mb-2\">No employees yet</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {searchTerm || filterDesignation !== \"all\" || filterShift !== \"all\" \n                ? \"No employees match your search criteria\"\n                : \"Click 'Add New Employee' to get started\"\n              }\n            </p>\n          </div>\n        ) : (\n          <div className=\"border rounded-lg shadow-sm overflow-hidden\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50 border-b-2\">\n                  <tr>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide w-16\">SL</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-40\">Name</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-32\">Employee ID</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-32\">Designation</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-24\">Holiday</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-28\">Salary</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-48\">Address</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-32\">Phone Number</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-28\">Office Shift</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-28\">Office In Time</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-28\">Office Out Time</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-28\">Total Hours</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-48\">Remarks</th>\n                    {hasPermission(\"delete\") && <th className=\"px-4 py-3 text-center text-xs font-semibold uppercase tracking-wide w-20\">Actions</th>}\n                  </tr>\n                </thead>\n                <tbody className=\"bg-card divide-y\">\n                  {filteredEmployees.map((employee, index) => (\n                    <tr key={employee.id} className=\"hover:bg-muted/30 transition-colors\">\n                      <td className=\"px-4 py-3 text-sm font-medium text-muted-foreground\">{index + 1}</td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(employee.id, \"name\", employee.name)}>\n                        {renderCell(employee, \"name\")}\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(employee.id, \"employeeId\", employee.employeeId)}>\n                        {renderCell(employee, \"employeeId\")}\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(employee.id, \"designation\", employee.designation)}>\n                        {renderCell(employee, \"designation\")}\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(employee.id, \"holiday\", employee.holiday)}>\n                        {renderCell(employee, \"holiday\")}\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(employee.id, \"salary\", employee.salary)}>\n                        {renderCell(employee, \"salary\")}\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(employee.id, \"address\", employee.address)}>\n                        {renderCell(employee, \"address\")}\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(employee.id, \"phoneNumber\", employee.phoneNumber)}>\n                        {renderCell(employee, \"phoneNumber\")}\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(employee.id, \"officeShift\", employee.officeShift)}>\n                        {renderCell(employee, \"officeShift\")}\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(employee.id, \"officeInTime\", employee.officeInTime)}>\n                        {renderCell(employee, \"officeInTime\")}\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(employee.id, \"officeOutTime\", employee.officeOutTime)}>\n                        {renderCell(employee, \"officeOutTime\")}\n                      </td>\n                      <td className=\"px-4 py-3\">\n                        <span className=\"text-sm font-medium text-primary\">\n                          {calculateTotalHours(employee.officeInTime || '', employee.officeOutTime || '')}\n                        </span>\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(employee.id, \"remarks\", employee.remarks)}>\n                        {renderCell(employee, \"remarks\")}\n                      </td>\n                      {hasPermission(\"delete\") && (\n                        <td className=\"px-4 py-3 text-center\">\n                          <Button\n                            onClick={() => handleDeleteEmployee(employee.id)}\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-8 w-8 text-destructive hover:text-destructive hover:bg-destructive/10\"\n                          >\n                            <span className=\"text-lg\">🗑️</span>\n                          </Button>\n                        </td>\n                      )}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":18023},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { PerformanceEntry } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, Download, Loader2, Search, Filter, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport EditableTable from \"@/components/EditableTable\";\nimport DashboardHeader from \"@/components/DashboardHeader\";\nimport Footer from \"@/components/Footer\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nexport default function Dashboard() {\n  const [entries, setEntries] = useState<PerformanceEntry[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const { toast } = useToast();\n  const { hasPermission } = useAuth();\n\n  // Filter states\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dateStart, setDateStart] = useState(\"\");\n  const [dateEnd, setDateEnd] = useState(\"\");\n  const [filterScriptWriter, setFilterScriptWriter] = useState<string>(\"all\");\n  const [filterVideoEditor, setFilterVideoEditor] = useState<string>(\"all\");\n  const [filterMojoReporter, setFilterMojoReporter] = useState<string>(\"all\");\n  const [filterJelaReporter, setFilterJelaReporter] = useState<string>(\"all\");\n  const [filterContentStatus, setFilterContentStatus] = useState<string>(\"all\");\n  const [sortBy, setSortBy] = useState<string>(\"date-desc\");\n\n  // Load entries from localStorage on mount\n  useEffect(() => {\n    const loadEntries = () => {\n      try {\n        const stored = localStorage.getItem(\"dob_entries\");\n        if (stored) {\n          setEntries(JSON.parse(stored));\n        }\n      } catch (error) {\n        console.error(\"Failed to load entries:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadEntries();\n  }, []);\n\n  // Get unique values for filter dropdowns\n  const uniqueScriptWriters = useMemo(() => {\n    const unique = new Set(entries.map(e => e.scriptWriter).filter(Boolean));\n    return Array.from(unique);\n  }, [entries]);\n\n  const uniqueVideoEditors = useMemo(() => {\n    const unique = new Set(entries.map(e => e.videoEditor).filter(Boolean));\n    return Array.from(unique);\n  }, [entries]);\n\n  const uniqueMojoReporters = useMemo(() => {\n    const unique = new Set(entries.map(e => e.mojoReporter).filter(Boolean));\n    return Array.from(unique);\n  }, [entries]);\n\n  const uniqueJelaReporters = useMemo(() => {\n    const unique = new Set(entries.map(e => e.jelaReporter).filter(Boolean));\n    return Array.from(unique);\n  }, [entries]);\n\n  // Filter and sort entries\n  const filteredEntries = useMemo(() => {\n    let result = entries.filter(entry => {\n      // Search filter (Title or Link)\n      const matchesSearch = \n        !searchTerm ||\n        (entry.title && entry.title.toLowerCase().includes(searchTerm.toLowerCase())) ||\n        (entry.link && entry.link.toLowerCase().includes(searchTerm.toLowerCase()));\n\n      // Date range filter\n      const matchesDateRange = \n        (!dateStart || !entry.date || entry.date >= dateStart) &&\n        (!dateEnd || !entry.date || entry.date <= dateEnd);\n\n      // Script Writer filter\n      const matchesScriptWriter = \n        filterScriptWriter === \"all\" || entry.scriptWriter === filterScriptWriter;\n\n      // Video Editor filter\n      const matchesVideoEditor = \n        filterVideoEditor === \"all\" || entry.videoEditor === filterVideoEditor;\n\n      // Mojo Reporter filter\n      const matchesMojoReporter = \n        filterMojoReporter === \"all\" || entry.mojoReporter === filterMojoReporter;\n\n      // Jela Reporter filter\n      const matchesJelaReporter = \n        filterJelaReporter === \"all\" || entry.jelaReporter === filterJelaReporter;\n\n      // Content Status filter\n      const matchesContentStatus = \n        filterContentStatus === \"all\" || entry.contentStatus === filterContentStatus;\n\n      return matchesSearch && matchesDateRange && matchesScriptWriter && \n             matchesVideoEditor && matchesMojoReporter && matchesJelaReporter && \n             matchesContentStatus;\n    });\n\n    // Sort results\n    result = [...result].sort((a, b) => {\n      switch (sortBy) {\n        case \"date-desc\":\n          return (b.date || \"\").localeCompare(a.date || \"\");\n        case \"date-asc\":\n          return (a.date || \"\").localeCompare(b.date || \"\");\n        case \"views-desc\":\n          return (b.views || 0) - (a.views || 0);\n        case \"views-asc\":\n          return (a.views || 0) - (b.views || 0);\n        case \"engagement-desc\":\n          return (b.engagement || 0) - (a.engagement || 0);\n        case \"engagement-asc\":\n          return (a.engagement || 0) - (b.engagement || 0);\n        default:\n          return 0;\n      }\n    });\n\n    return result;\n  }, [entries, searchTerm, dateStart, dateEnd, filterScriptWriter, filterVideoEditor, \n      filterMojoReporter, filterJelaReporter, filterContentStatus, sortBy]);\n\n  const handleAddEntry = () => {\n    // Get current date in YYYY-MM-DD format\n    const today = new Date().toISOString().split('T')[0];\n    \n    const newEntry: PerformanceEntry = {\n      id: crypto.randomUUID(),\n      date: today, // Auto-fill with current date\n      link: \"\",\n      title: \"\",\n      views: undefined,\n      reach: undefined,\n      engagement: undefined,\n      voiceArtist: \"\",\n      scriptWriter: \"\",\n      videoEditor: \"\",\n      topicSelector: \"\",\n      mojoReporter: \"\",\n      jelaReporter: \"\",\n      photoCard: \"\",\n      seo: \"\",\n      websiteNews: \"\",\n      contentStatus: \"writing\",\n      createdAt: new Date().toISOString(),\n    };\n\n    const updatedEntries = [newEntry, ...entries];\n    setEntries(updatedEntries);\n    localStorage.setItem(\"dob_entries\", JSON.stringify(updatedEntries));\n    \n    toast({\n      title: \"Entry Added\",\n      description: \"New performance entry has been created\",\n    });\n  };\n\n  const handleUpdateEntry = (id: string, updates: Partial<PerformanceEntry>) => {\n    const updatedEntries = entries.map((entry) =>\n      entry.id === id ? { ...entry, ...updates } : entry\n    );\n    setEntries(updatedEntries);\n    localStorage.setItem(\"dob_entries\", JSON.stringify(updatedEntries));\n  };\n\n  const handleDeleteEntry = (id: string) => {\n    const updatedEntries = entries.filter((entry) => entry.id !== id);\n    setEntries(updatedEntries);\n    localStorage.setItem(\"dob_entries\", JSON.stringify(updatedEntries));\n    \n    toast({\n      title: \"Entry Deleted\",\n      description: \"Performance entry has been removed\",\n    });\n  };\n\n  const handleExportToExcel = async () => {\n    try {\n      const { exportToExcel } = await import(\"@/lib/exportToExcel\");\n      // Export only filtered entries\n      exportToExcel(filteredEntries);\n      toast({\n        title: \"Export Successful\",\n        description: `Exported ${filteredEntries.length} filtered entries to Excel`,\n      });\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      toast({\n        title: \"Export Failed\",\n        description: \"Could not generate Excel file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleClearFilters = () => {\n    setSearchTerm(\"\");\n    setDateStart(\"\");\n    setDateEnd(\"\");\n    setFilterScriptWriter(\"all\");\n    setFilterVideoEditor(\"all\");\n    setFilterMojoReporter(\"all\");\n    setFilterJelaReporter(\"all\");\n    setFilterContentStatus(\"all\");\n    setSortBy(\"date-desc\");\n    \n    toast({\n      title: \"Filters Cleared\",\n      description: \"All filters have been reset\",\n    });\n  };\n\n  const hasActiveFilters = \n    searchTerm || dateStart || dateEnd || \n    filterScriptWriter !== \"all\" || filterVideoEditor !== \"all\" || \n    filterMojoReporter !== \"all\" || filterJelaReporter !== \"all\" || \n    filterContentStatus !== \"all\";\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <DashboardHeader />\n      <div className=\"w-full px-6 py-6 flex-1\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-foreground\">Performance Dashboard</h1>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Track and manage team performance metrics\n            </p>\n          </div>\n          <div className=\"flex gap-3\">\n            <Button\n              onClick={handleExportToExcel}\n              variant=\"outline\"\n              className=\"gap-2\"\n              data-testid=\"button-export\"\n              disabled={filteredEntries.length === 0}\n            >\n              <Download className=\"w-4 h-4\" />\n              Export ({filteredEntries.length})\n            </Button>\n            <Button onClick={handleAddEntry} className=\"gap-2\" data-testid=\"button-add-entry\">\n              <Plus className=\"w-4 h-4\" />\n              Add New Entry\n            </Button>\n          </div>\n        </div>\n\n        {/* Filter Panel */}\n        <div className=\"bg-card border rounded-lg p-4 mb-6 shadow-sm\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center gap-2\">\n              <Filter className=\"w-5 h-5 text-primary\" />\n              <h2 className=\"text-lg font-semibold\">Filter & Search</h2>\n              {hasActiveFilters && (\n                <span className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded-full\">\n                  {filteredEntries.length} of {entries.length} results\n                </span>\n              )}\n            </div>\n            {hasActiveFilters && (\n              <Button\n                onClick={handleClearFilters}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"gap-2 text-muted-foreground hover:text-foreground\"\n              >\n                <X className=\"w-4 h-4\" />\n                Clear All Filters\n              </Button>\n            )}\n          </div>\n\n          {/* Search Box */}\n          <div className=\"mb-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by title or link...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n\n          {/* Date Range Filter */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mb-4\">\n            <div>\n              <label className=\"text-xs font-medium text-muted-foreground mb-1 block\">Start Date</label>\n              <Input\n                type=\"date\"\n                value={dateStart}\n                onChange={(e) => setDateStart(e.target.value)}\n                className=\"w-full\"\n              />\n            </div>\n            <div>\n              <label className=\"text-xs font-medium text-muted-foreground mb-1 block\">End Date</label>\n              <Input\n                type=\"date\"\n                value={dateEnd}\n                onChange={(e) => setDateEnd(e.target.value)}\n                className=\"w-full\"\n              />\n            </div>\n          </div>\n\n          {/* Dropdown Filters */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4\">\n            <Select value={filterScriptWriter} onValueChange={setFilterScriptWriter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Script Writer\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Script Writers</SelectItem>\n                {uniqueScriptWriters.map(writer => (\n                  <SelectItem key={writer} value={writer}>{writer}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={filterVideoEditor} onValueChange={setFilterVideoEditor}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Video Editor\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Video Editors</SelectItem>\n                {uniqueVideoEditors.map(editor => (\n                  <SelectItem key={editor} value={editor}>{editor}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={filterMojoReporter} onValueChange={setFilterMojoReporter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Mojo Reporter\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Mojo Reporters</SelectItem>\n                {uniqueMojoReporters.map(reporter => (\n                  <SelectItem key={reporter} value={reporter}>{reporter}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={filterJelaReporter} onValueChange={setFilterJelaReporter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Jela Reporter\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Jela Reporters</SelectItem>\n                {uniqueJelaReporters.map(reporter => (\n                  <SelectItem key={reporter} value={reporter}>{reporter}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={filterContentStatus} onValueChange={setFilterContentStatus}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Content Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"writing\">Writing Processing</SelectItem>\n                <SelectItem value=\"footage\">Footage Downloading</SelectItem>\n                <SelectItem value=\"voiceover\">Voice Over</SelectItem>\n                <SelectItem value=\"thumbnail\">Thumbnail Make</SelectItem>\n                <SelectItem value=\"editing\">Editing</SelectItem>\n                <SelectItem value=\"ready\">Ready</SelectItem>\n                <SelectItem value=\"alldone\">All Done</SelectItem>\n                <SelectItem value=\"published\">Published</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Sort By */}\n          <div className=\"mt-4 flex items-center gap-4\">\n            <label className=\"text-sm font-medium text-muted-foreground\">Sort By:</label>\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"date-desc\">Date (Newest First)</SelectItem>\n                <SelectItem value=\"date-asc\">Date (Oldest First)</SelectItem>\n                <SelectItem value=\"views-desc\">Views (High to Low)</SelectItem>\n                <SelectItem value=\"views-asc\">Views (Low to High)</SelectItem>\n                <SelectItem value=\"engagement-desc\">Engagement (High to Low)</SelectItem>\n                <SelectItem value=\"engagement-asc\">Engagement (Low to High)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <EditableTable\n          entries={filteredEntries}\n          onUpdateEntry={handleUpdateEntry}\n          onDeleteEntry={handleDeleteEntry}\n          canDelete={hasPermission(\"delete\")}\n        />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":15737},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/pages/jela-reporter-data.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { JelaReporter } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, Download, Search, Filter } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport DashboardHeader from \"@/components/DashboardHeader\";\nimport Footer from \"@/components/Footer\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nexport default function JelaReporterData() {\n  const [reporters, setReporters] = useState<JelaReporter[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterDesignation, setFilterDesignation] = useState<string>(\"all\");\n  const [editingCell, setEditingCell] = useState<{ id: string; field: keyof JelaReporter } | null>(null);\n  const [editValue, setEditValue] = useState(\"\");\n  const { toast } = useToast();\n  const { hasPermission } = useAuth();\n\n  // Load reporters from localStorage\n  useEffect(() => {\n    const stored = localStorage.getItem(\"dob_jela_reporters\");\n    if (stored) {\n      setReporters(JSON.parse(stored));\n    }\n  }, []);\n\n  // Get unique designations for filter\n  const designations = useMemo(() => {\n    const unique = new Set(reporters.map(r => r.designation).filter(Boolean));\n    return Array.from(unique);\n  }, [reporters]);\n\n  // Filter reporters\n  const filteredReporters = useMemo(() => {\n    return reporters.filter(reporter => {\n      const matchesSearch = \n        reporter.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        reporter.employeeId.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesDesignation = \n        filterDesignation === \"all\" || reporter.designation === filterDesignation;\n      \n      return matchesSearch && matchesDesignation;\n    });\n  }, [reporters, searchTerm, filterDesignation]);\n\n  const handleAddReporter = () => {\n    const newReporter: JelaReporter = {\n      id: crypto.randomUUID(),\n      name: \"\",\n      employeeId: \"\",\n      designation: \"\",\n      address: \"\",\n      phoneNumber: \"\",\n      remarks: \"\",\n      createdAt: new Date().toISOString(),\n    };\n\n    const updated = [newReporter, ...reporters];\n    setReporters(updated);\n    localStorage.setItem(\"dob_jela_reporters\", JSON.stringify(updated));\n    \n    toast({\n      title: \"Reporter Added\",\n      description: \"New reporter entry created\",\n    });\n  };\n\n  const handleUpdateReporter = (id: string, updates: Partial<JelaReporter>) => {\n    const updated = reporters.map(reporter => \n      reporter.id === id ? { ...reporter, ...updates } : reporter\n    );\n    setReporters(updated);\n    localStorage.setItem(\"dob_jela_reporters\", JSON.stringify(updated));\n  };\n\n  const handleDeleteReporter = (id: string) => {\n    const updated = reporters.filter(reporter => reporter.id !== id);\n    setReporters(updated);\n    localStorage.setItem(\"dob_jela_reporters\", JSON.stringify(updated));\n    \n    toast({\n      title: \"Reporter Deleted\",\n      description: \"Reporter record removed\",\n    });\n  };\n\n  const handleCellClick = (id: string, field: keyof JelaReporter, value: any) => {\n    if (field === \"id\" || field === \"createdAt\") return;\n    setEditingCell({ id, field });\n    setEditValue(value?.toString() || \"\");\n  };\n\n  const handleCellBlur = () => {\n    if (editingCell) {\n      handleUpdateReporter(editingCell.id, { [editingCell.field]: editValue });\n      setEditingCell(null);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleCellBlur();\n    } else if (e.key === \"Escape\") {\n      setEditingCell(null);\n    }\n  };\n\n  const handleExportToExcel = async () => {\n    try {\n      const XLSX = await import(\"xlsx\");\n      const { format } = await import(\"date-fns\");\n\n      const data = filteredReporters.map((reporter, index) => ({\n        'SL': index + 1,\n        'Name': reporter.name,\n        'Employee ID': reporter.employeeId,\n        'Designation': reporter.designation || '',\n        'Address': reporter.address || '',\n        'Phone Number': reporter.phoneNumber || '',\n        'Remarks': reporter.remarks || '',\n      }));\n\n      const worksheet = XLSX.utils.json_to_sheet(data);\n      const workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Jela Reporter Data');\n\n      const fileName = `Jela_Reporter_Data_${format(new Date(), 'yyyy-MM-dd')}.xlsx`;\n      XLSX.writeFile(workbook, fileName);\n\n      toast({\n        title: \"Export Successful\",\n        description: \"Reporter data exported to Excel\",\n      });\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      toast({\n        title: \"Export Failed\",\n        description: \"Could not generate Excel file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const renderCell = (reporter: JelaReporter, field: keyof JelaReporter) => {\n    const value = reporter[field];\n    const isEditing = editingCell?.id === reporter.id && editingCell?.field === field;\n\n    if (field === \"id\" || field === \"createdAt\") {\n      return null;\n    }\n\n    if (isEditing) {\n      return (\n        <Input\n          autoFocus\n          value={editValue}\n          onChange={(e) => setEditValue(e.target.value)}\n          onBlur={handleCellBlur}\n          onKeyDown={handleKeyDown}\n          className=\"h-9 text-sm\"\n        />\n      );\n    }\n\n    return (\n      <span className=\"text-sm\">\n        {value !== undefined && value !== null && value !== \"\" ? value.toString() : \"-\"}\n      </span>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <DashboardHeader />\n      <div className=\"w-full px-6 py-6 flex-1\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-foreground\">Jela Reporter Data</h1>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Manage district reporter information and records\n            </p>\n          </div>\n          <div className=\"flex gap-3\">\n            <Button\n              onClick={handleExportToExcel}\n              variant=\"outline\"\n              className=\"gap-2\"\n              disabled={filteredReporters.length === 0}\n            >\n              <Download className=\"w-4 h-4\" />\n              Export to Excel\n            </Button>\n            <Button onClick={handleAddReporter} className=\"gap-2\">\n              <Plus className=\"w-4 h-4\" />\n              Add New Reporter\n            </Button>\n          </div>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"flex gap-4 mb-6\">\n          <div className=\"relative flex-1 max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search by name or employee ID...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          \n          <Select value={filterDesignation} onValueChange={setFilterDesignation}>\n            <SelectTrigger className=\"w-48\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              <SelectValue placeholder=\"Filter by Designation\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Designations</SelectItem>\n              {designations.map(des => (\n                <SelectItem key={des} value={des}>{des}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Reporter Table */}\n        {filteredReporters.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center py-16 text-center border rounded-lg\">\n            <div className=\"w-16 h-16 rounded-full bg-muted flex items-center justify-center mb-4\">\n              <Plus className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"font-medium text-lg mb-2\">No reporters yet</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {searchTerm || filterDesignation !== \"all\"\n                ? \"No reporters match your search criteria\"\n                : \"Click 'Add New Reporter' to get started\"\n              }\n            </p>\n          </div>\n        ) : (\n          <div className=\"border rounded-lg shadow-sm overflow-hidden\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50 border-b-2\">\n                  <tr>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide w-16\">SL</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-40\">Name</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-32\">Employee ID</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-32\">Designation</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-48\">Address</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-32\">Phone Number</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase tracking-wide min-w-48\">Remarks</th>\n                    {hasPermission(\"delete\") && <th className=\"px-4 py-3 text-center text-xs font-semibold uppercase tracking-wide w-20\">Actions</th>}\n                  </tr>\n                </thead>\n                <tbody className=\"bg-card divide-y\">\n                  {filteredReporters.map((reporter, index) => (\n                    <tr key={reporter.id} className=\"hover:bg-muted/30 transition-colors\">\n                      <td className=\"px-4 py-3 text-sm font-medium text-muted-foreground\">{index + 1}</td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(reporter.id, \"name\", reporter.name)}>\n                        {renderCell(reporter, \"name\")}\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(reporter.id, \"employeeId\", reporter.employeeId)}>\n                        {renderCell(reporter, \"employeeId\")}\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(reporter.id, \"designation\", reporter.designation)}>\n                        {renderCell(reporter, \"designation\")}\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(reporter.id, \"address\", reporter.address)}>\n                        {renderCell(reporter, \"address\")}\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(reporter.id, \"phoneNumber\", reporter.phoneNumber)}>\n                        {renderCell(reporter, \"phoneNumber\")}\n                      </td>\n                      <td className=\"px-4 py-3 cursor-pointer hover:bg-muted/50\" onClick={() => handleCellClick(reporter.id, \"remarks\", reporter.remarks)}>\n                        {renderCell(reporter, \"remarks\")}\n                      </td>\n                      {hasPermission(\"delete\") && (\n                        <td className=\"px-4 py-3 text-center\">\n                          <Button\n                            onClick={() => handleDeleteReporter(reporter.id)}\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-8 w-8 text-destructive hover:text-destructive hover:bg-destructive/10\"\n                          >\n                            <span className=\"text-lg\">🗑️</span>\n                          </Button>\n                        </td>\n                      )}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12335},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"server/youtube.ts":{"content":"import { google } from 'googleapis';\n\nlet connectionSettings: any;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=youtube',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\n\n  if (!connectionSettings || !accessToken) {\n    throw new Error('YouTube not connected');\n  }\n  return accessToken;\n}\n\nexport async function getUncachableYouTubeClient() {\n  const accessToken = await getAccessToken();\n  return google.youtube({ version: 'v3', auth: accessToken });\n}\n\nexport function extractVideoId(url: string): string | null {\n  try {\n    const urlObj = new URL(url);\n    \n    if (urlObj.hostname === 'youtu.be') {\n      return urlObj.pathname.slice(1);\n    }\n    \n    if (urlObj.hostname.includes('youtube.com')) {\n      return urlObj.searchParams.get('v');\n    }\n    \n    return null;\n  } catch {\n    return null;\n  }\n}\n","size_bytes":1722},"replit.md":{"content":"# DOB Performance Tracker\n\n## Overview\nA secure performance tracking application for DOB team members with monthly rankings and analytics. The application allows teams to track content performance, manage employee data, and monitor workflow progress.\n\n## Tech Stack\n- **Frontend**: React 18 with TypeScript, Vite\n- **Backend**: Express.js with TypeScript\n- **UI Framework**: Tailwind CSS with shadcn/ui components\n- **State Management**: TanStack Query (React Query)\n- **Routing**: Wouter\n- **Data Storage**: LocalStorage (client-side)\n- **External APIs**: YouTube Data API v3 (via googleapis)\n\n## Project Structure\n```\n.\n├── client/               # Frontend React application\n│   ├── public/          # Static assets\n│   ├── src/\n│   │   ├── components/  # UI components (shadcn/ui)\n│   │   ├── contexts/    # React contexts (Auth)\n│   │   ├── hooks/       # Custom React hooks\n│   │   ├── lib/         # Utility functions\n│   │   └── pages/       # Application pages/routes\n│   └── index.html       # HTML entry point\n├── server/              # Backend Express server\n│   ├── index.ts         # Server entry point\n│   ├── routes.ts        # API routes\n│   ├── vite.ts          # Vite dev server setup\n│   ├── youtube.ts       # YouTube API integration\n│   └── storage.ts       # Storage interface\n└── shared/              # Shared TypeScript types/schemas\n    └── schema.ts        # Zod validation schemas\n\n```\n\n## Features\n- **Authentication System**: Login with user ID and password, IP-based access restrictions\n- **Performance Dashboard**: Track content performance with views, reach, and engagement\n- **Voice Artist Portal**: Dedicated section for voice artists\n- **Attendance Tracking**: Monitor team attendance with auto-late detection, manual time adjustment, and comprehensive summary reports\n- **Work Flow Management**: Track content production workflow with assignee (\"For\") field\n- **Video Upload Time Tracking**: Monitor upload schedules\n- **Employee Data Management**: Admin-only employee information\n- **Jela Reporter Data**: Admin-only reporter data\n- **Rankings**: Admin-only performance rankings\n- **Admin Panel**: Administrative settings with Super Moderator creation and IP Access Control\n- **YouTube Integration**: Fetch video information via YouTube API\n- **Chat Box Page**: Dedicated full-page chat interface accessible from navigation menu (positioned after Dashboard)\n\n## Development Setup\n1. Dependencies are managed via npm\n2. TypeScript configuration is in `tsconfig.json`\n3. Vite configuration is in `vite.config.ts`\n4. Tailwind CSS configuration is in `tailwind.config.js`\n\n## Running the Application\n- **Development**: `npm run dev` (runs on port 5000)\n- **Build**: `npm run build`\n- **Preview**: `npm run preview`\n\n## Deployment\n- Configured for Replit Autoscale deployment\n- Build step: `npm run build`\n- Run command: `tsx server/index.ts`\n- Serves both API and frontend on port 5000\n\n## Environment Variables\n- `PORT`: Server port (default: 5000)\n- `NODE_ENV`: Environment (development/production)\n- YouTube API credentials are managed via Replit connectors\n\n## Key Dependencies\n- React, React DOM, React Router (wouter)\n- Express.js\n- TypeScript, tsx\n- Vite, @vitejs/plugin-react\n- Tailwind CSS, PostCSS, Autoprefixer\n- Radix UI components\n- TanStack Query\n- Zod for validation\n- googleapis for YouTube API\n- xlsx for Excel export functionality\n\n## Recent Changes (October 30, 2025)\n\n### Chat Duplicate Message Fix (October 30, 2025)\n- **Bug Fixed**: Resolved duplicate message issue in chat\n  - Messages were appearing twice because server was broadcasting to ALL clients including the sender\n  - Created `broadcastToOthers` function in server/routes.ts to exclude sender from broadcasts\n  - Updated chat_message handler to use broadcastToOthers instead of broadcastToAll\n  - Implemented optimistic updates in ChatContext.tsx - messages are added to local state immediately when sent\n  - Sender sees their message instantly, other clients receive via WebSocket, no duplicates occur\n\n### Chat Reply and Mention Features (October 30, 2025)\n- **Reply Functionality**: Users can reply to specific messages\n  - Reply button appears on all messages (except own messages)\n  - Reply preview shows when composing a reply with option to cancel\n  - Original message context displayed in replied messages\n  - Reply data (messageId, userName, message) stored with each message\n- **Mention Functionality**: Users can mention other online users\n  - Type `@[` to trigger mention autocomplete dropdown\n  - Dropdown filters online users as you type\n  - Mentions stored in format `@[Full Name]` to support multi-word usernames\n  - Mentioned usernames highlighted with special styling in messages\n  - Mention data extracted and stored with each message\n  - Fixed mention parsing regex to properly capture multi-word usernames using bracket notation\n\n### HMR Disabled to Fix Auto-Reload Issue (October 30, 2025)\n- **Issue Fixed**: Resolved automatic page reloading and logout problem\n  - Disabled Vite Hot Module Replacement (HMR) in both `vite.config.ts` and `server/vite.ts`\n  - HMR WebSocket was conflicting with chat WebSocket on `/ws` path, causing constant reconnection attempts\n  - Authentication state persists correctly in localStorage without HMR interference\n  - Note: Code changes during development now require manual page refresh\n  - Production builds remain unaffected (HMR only active in development)\n\n### Chat Box Dedicated Page (October 30, 2025)\n- **New Chat Box Page**: Created dedicated full-page chat interface at client/src/pages/chat-box.tsx\n  - Full-page layout similar to other application pages (uses DashboardHeader and Footer)\n  - Displays all real-time chat features in dedicated page view\n  - Shows online users list with role badges in sidebar\n  - Pinned messages section displayed separately at top\n  - Message list with all chat functionality (send, read receipts, file sharing, etc.)\n  - Admin moderation controls (pin/unpin messages, block/mute users)\n  - Navigation integrated: \"Chat Box\" menu item added after Dashboard in DashboardHeader\n  - Route configured: /chat-box path added to App.tsx routing\n  - Full integration with ChatContext for all chat functionality\n  - Confirmation dialogs for blocking and muting users with proper userName parameters\n\n### Replit Environment Setup - Fresh Import (October 30, 2025)\n- **GitHub Import Completed**: Successfully cloned and set up the project in Replit environment\n- **Dependencies Installed**: All npm packages installed (448 packages)\n- **Workflow Configuration**: \n  - Server workflow configured running `npm run dev` on port 5000\n  - Development server (Express + Vite) running successfully\n  - Frontend accessible via Replit webview proxy\n- **Environment Configuration**:\n  - Server properly configured with host: 0.0.0.0 and port: 5000\n  - Vite HMR configured for Replit WSS protocol on port 443\n  - allowedHosts enabled for proxy support\n  - Dynamic Replit domain resolution for WebSocket connections\n- **Deployment Setup**:\n  - Configured for Autoscale deployment\n  - Build command: `npm run build`\n  - Run command: `tsx server/index.ts`\n- **Git Configuration**: Created .gitignore for Node.js project\n- **Verification**: Login page displays correctly, application fully functional\n- **Known Issue**: HMR WebSocket conflicts with app's chat WebSocket on `/ws` path (non-critical, app functions normally)\n\n### 💬 Real-Time Chat Box Feature\n- **Complete Chat System**: Added real-time chat functionality with WebSocket support\n  - Real-time messaging using WebSocket (ws library) on path `/ws`\n  - Online/Offline status indicators with green/gray dots\n  - File & image sharing (up to 5MB, admin can toggle on/off)\n  - Pinned messages feature (admin can pin important messages to top)\n  - Message timestamps and read receipts (✔️ = sent, ✔️✔️ = read)\n  - User typing indicators\n  - Floating chat button with unread message badge\n  - Responsive chat UI with message history scrolling\n  \n- **Admin Controls in Settings**:\n  - ON/OFF toggle to enable/disable entire chat system\n  - File sharing toggle (enable/disable file attachments)\n  - Moderator-only mode (restrict chat to moderators and admins only)\n  - Clear all chat data button with confirmation\n  - Block/unblock users from chat\n  - Mute/unmute users from sending messages\n  - View lists of blocked and muted users\n  \n- **Technical Implementation**:\n  - WebSocket server integrated with Express on `/ws` path\n  - ChatProvider context for state management\n  - ChatBox component with full-featured UI\n  - LocalStorage persistence for messages, settings, blocked/muted users\n  - User list showing online users with their roles\n  - Automatic reconnection on disconnect\n  - Heartbeat mechanism for connection health\n\n- **⚠️ Security Limitations**:\n  - **Internal Use Only**: This chat feature is designed for internal team use among trusted users\n  - **Client-Side Auth**: Due to the localStorage-based architecture with no backend database, WebSocket connections cannot be cryptographically authenticated\n  - **Trust-Based Model**: User roles are self-reported and validated client-side\n  - **Production Recommendation**: For production deployment or untrusted environments, implement:\n    - Server-side database for user credentials and roles\n    - JWT or session-based authentication\n    - Proper token validation for WebSocket connections\n    - Server-side authorization for all privileged actions\n  - **Current Mitigation**: Server performs role checks, but roles are client-provided\n  - **Acceptable For**: Internal tools where all team members are trusted\n\n## Recent Changes (October 29, 2025)\n\n### Voice Artist Bill Privacy Enhancement\n- **Admin-Only Bill Visibility**: Bill amounts are now restricted to admin users only\n  - \"Bill\" column in Voice Artist Work Records table hidden from non-admin users\n  - Estimated bill preview when adding work entries visible only to admins\n  - Voice Artist Bill tab already restricted to admin users\n  - Non-admin users can still view and enter work records but without seeing billing amounts\n\n### Voice Artist Setup Privacy Enhancement\n- **Admin-Only Artist Details**: Voice artist list now restricted to admin users only\n  - Voice Artists table (showing names, phones, rates, notes) visible only to admins\n  - Non-admin users see \"Only administrators can view voice artist details\" message\n  - Add New Voice Artist form already restricted to admin users\n  - Non-admin users can still add work entries by selecting from artist dropdown in Work Entry tab\n\n### Work Flow Notes Enhancement\n- **Team Notes Update**: Added both \"To:\" and \"For:\" fields in note creation\n  - Notes now support separate \"To\" and \"For\" person fields\n  - Updated Note interface to include both fields\n  - Create form includes both \"To:\" and \"For:\" input fields\n  - Note display shows both fields prominently\n  - Edit dialog updated to allow editing both fields\n  - Validation requires all three fields (To, For, Message)\n\n### Fresh GitHub Import - Replit Setup Completed\n- **GitHub Import**: Successfully cloned and configured fresh project for Replit environment\n- **Dependencies**: Installed all npm dependencies (446 packages)\n- **Workflow Configuration**: Set up Server workflow running `npm run dev` on port 5000\n- **Development Server**: Express + Vite dev server running successfully\n- **Frontend Verification**: React application loads properly with login page visible\n- **Deployment Configuration**: Configured Autoscale deployment\n  - Build command: `npm run build`\n  - Run command: `tsx server/index.ts`\n- **Git Configuration**: Created .gitignore file for Node.js project\n- **Server Configuration**: Pre-configured for Replit environment:\n  - Host: 0.0.0.0 (frontend accessible via proxy)\n  - Port: 5000 (required for Replit)\n  - Vite allowedHosts: true (proxy support enabled)\n  - HMR configured for WSS on port 443\n- **LSP Status**: All TypeScript errors resolved after dependency installation\n\n## Notes\n- The application uses localStorage for client-side data persistence\n- YouTube API integration requires proper Replit connector setup\n- Admin features require admin role authentication\n- Super Moderators have granular permissions defined per module\n- IP Access Control uses ipapi.co API for real-time IP verification\n- Permission system supports both new granular permissions and legacy permission strings\n- Hot Module Replacement (HMR) is enabled for development\n\n## User Roles & Permissions\n- **Admin**: Full access to all features and settings\n- **Super Moderator**: Granular permissions per module (configurable by admin)\n- **Moderator**: Can add and edit content (no delete or admin access)\n- **User**: Basic viewing permissions\n","size_bytes":12888},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/MonthlyPerformanceReport.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { PerformanceEntry } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n\ninterface MonthlyPerformanceReportProps {\n  entries: PerformanceEntry[];\n  currentMonth?: string;\n}\n\ninterface CategoryReport {\n  category: string;\n  categoryBengali: string;\n  field: keyof PerformanceEntry;\n  stats: { name: string; count: number }[];\n}\n\nexport default function MonthlyPerformanceReport({ \n  entries, \n  currentMonth \n}: MonthlyPerformanceReportProps) {\n  const [isExporting, setIsExporting] = useState(false);\n\n  const filterEntriesByMonth = (entries: PerformanceEntry[], targetMonth?: string) => {\n    if (!targetMonth) {\n      const now = new Date();\n      targetMonth = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, \"0\")}`;\n    }\n\n    return entries.filter((entry) => {\n      if (!entry.createdAt) return false;\n      const entryDate = new Date(entry.createdAt);\n      const entryMonth = `${entryDate.getFullYear()}-${String(entryDate.getMonth() + 1).padStart(2, \"0\")}`;\n      return entryMonth === targetMonth;\n    });\n  };\n\n  const calculateCategoryStats = (\n    entries: PerformanceEntry[],\n    field: keyof PerformanceEntry\n  ): { name: string; count: number }[] => {\n    const countMap = new Map<string, number>();\n\n    entries.forEach((entry) => {\n      const value = entry[field];\n      if (value && typeof value === \"string\" && value.trim() !== \"\") {\n        const currentCount = countMap.get(value) || 0;\n        countMap.set(value, currentCount + 1);\n      }\n    });\n\n    return Array.from(countMap.entries())\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count);\n  };\n\n  const monthlyReport = useMemo((): CategoryReport[] => {\n    const monthlyEntries = filterEntriesByMonth(entries, currentMonth);\n\n    return [\n      {\n        category: \"Script Writer\",\n        categoryBengali: \"স্ক্রিপ্ট লেখক\",\n        field: \"scriptWriter\",\n        stats: calculateCategoryStats(monthlyEntries, \"scriptWriter\"),\n      },\n      {\n        category: \"Video Editor\",\n        categoryBengali: \"ভিডিও এডিটর\",\n        field: \"videoEditor\",\n        stats: calculateCategoryStats(monthlyEntries, \"videoEditor\"),\n      },\n      {\n        category: \"Photo Card Maker\",\n        categoryBengali: \"ফটো কার্ড তৈরিকারী\",\n        field: \"photoCard\",\n        stats: calculateCategoryStats(monthlyEntries, \"photoCard\"),\n      },\n      {\n        category: \"Website News Reporter\",\n        categoryBengali: \"ওয়েবসাইট নিউজ রিপোর্টার\",\n        field: \"websiteNews\",\n        stats: calculateCategoryStats(monthlyEntries, \"websiteNews\"),\n      },\n      {\n        category: \"SEO Specialist\",\n        categoryBengali: \"এসইও বিশেষজ্ঞ\",\n        field: \"seo\",\n        stats: calculateCategoryStats(monthlyEntries, \"seo\"),\n      },\n      {\n        category: \"Voice Artist\",\n        categoryBengali: \"ভয়েস আর্টিস্ট\",\n        field: \"voiceArtist\",\n        stats: calculateCategoryStats(monthlyEntries, \"voiceArtist\"),\n      },\n      {\n        category: \"Mojo Reporter\",\n        categoryBengali: \"মোজো রিপোর্টার\",\n        field: \"mojoReporter\",\n        stats: calculateCategoryStats(monthlyEntries, \"mojoReporter\"),\n      },\n      {\n        category: \"Jela Reporter\",\n        categoryBengali: \"জেলা রিপোর্টার\",\n        field: \"jelaReporter\",\n        stats: calculateCategoryStats(monthlyEntries, \"jelaReporter\"),\n      },\n    ];\n  }, [entries, currentMonth]);\n\n  const handleExportReport = async () => {\n    setIsExporting(true);\n    try {\n      const XLSX = await import(\"xlsx\");\n      \n      const worksheetData: any[] = [\n        [\"📊 Monthly Performance Report\"],\n        [`Month: ${currentMonth || new Date().toISOString().slice(0, 7)}`],\n        [],\n        [\"Category\", \"Name\", \"Total Tasks\"],\n      ];\n\n      monthlyReport.forEach((category) => {\n        if (category.stats.length > 0) {\n          category.stats.forEach((stat, index) => {\n            worksheetData.push([\n              index === 0 ? category.category : \"\",\n              stat.name,\n              stat.count,\n            ]);\n          });\n          worksheetData.push([]);\n        }\n      });\n\n      const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n      \n      worksheet[\"!cols\"] = [\n        { wch: 30 },\n        { wch: 20 },\n        { wch: 15 },\n      ];\n\n      const workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, worksheet, \"Monthly Report\");\n\n      const fileName = `Monthly_Performance_Report_${currentMonth || new Date().toISOString().slice(0, 7)}.xlsx`;\n      XLSX.writeFile(workbook, fileName);\n    } catch (error) {\n      console.error(\"Export error:\", error);\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const hasData = monthlyReport.some((category) => category.stats.length > 0);\n\n  return (\n    <Card className=\"mt-8 border-2 shadow-lg\">\n      <CardHeader className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950 dark:to-purple-950\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-2xl font-bold flex items-center gap-2\">\n            <span>📊</span>\n            <span>Monthly Performance Report</span>\n          </CardTitle>\n          <Button\n            onClick={handleExportReport}\n            disabled={isExporting || !hasData}\n            variant=\"outline\"\n            className=\"gap-2\"\n          >\n            <Download className=\"w-4 h-4\" />\n            {isExporting ? \"Exporting...\" : \"Download Report\"}\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {!hasData ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <p className=\"text-lg\">No performance data available for the current month.</p>\n            <p className=\"text-sm mt-2\">Add entries above to see the monthly report.</p>\n          </div>\n        ) : (\n          <div className=\"space-y-8\">\n            {monthlyReport.map((category) => {\n              if (category.stats.length === 0) return null;\n\n              return (\n                <div key={category.field} className=\"space-y-3\">\n                  <h3 className=\"text-lg font-semibold text-primary border-b pb-2\">\n                    {category.category} ({category.categoryBengali})\n                  </h3>\n                  <div className=\"rounded-lg border overflow-hidden\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow className=\"bg-muted/50\">\n                          <TableHead className=\"font-semibold\">Name</TableHead>\n                          <TableHead className=\"text-right font-semibold w-32\">Total Tasks</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {category.stats.map((stat, index) => (\n                          <TableRow \n                            key={`${category.field}-${stat.name}`}\n                            className={index % 2 === 0 ? \"bg-background\" : \"bg-muted/20\"}\n                          >\n                            <TableCell className=\"font-medium\">{stat.name}</TableCell>\n                            <TableCell className=\"text-right\">\n                              <span className=\"inline-flex items-center justify-center min-w-[3rem] px-3 py-1 rounded-full bg-primary/10 text-primary font-semibold\">\n                                {stat.count}\n                              </span>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8250},"server/storage.ts":{"content":"// Storage interface - not used in this application\n// Data is persisted client-side using localStorage\nexport interface IStorage {}\n\nexport class MemStorage implements IStorage {\n  constructor() {}\n}\n\nexport const storage = new MemStorage();\n","size_bytes":243},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const [userId, setUserId] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n\n    const result = await login(userId, password);\n    if (result.success) {\n      setLocation(\"/\");\n    } else {\n      setError(result.message || \"Invalid User ID or Password\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md shadow-xl\">\n        <CardHeader className=\"space-y-4 text-center pb-8\">\n          <div className=\"mx-auto w-24 h-24 flex items-center justify-center\">\n            <img src=\"/logo.png\" alt=\"DOB Logo\" className=\"w-full h-full object-contain\" />\n          </div>\n          <div>\n            <CardTitle className=\"text-3xl font-bold\">DOB Performance Tracker</CardTitle>\n            <CardDescription className=\"text-sm mt-2\">\n              Enter your credentials to access the dashboard\n            </CardDescription>\n            <p className=\"text-xs mt-2 text-muted-foreground font-normal\">\n              Developed by MOHAMMAD SAIFUDDIN\n            </p>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"userId\" className=\"text-sm font-medium\">\n                User ID\n              </Label>\n              <Input\n                id=\"userId\"\n                data-testid=\"input-userId\"\n                type=\"text\"\n                value={userId}\n                onChange={(e) => setUserId(e.target.value)}\n                placeholder=\"Enter your user ID\"\n                className=\"h-12\"\n                autoComplete=\"username\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                data-testid=\"input-password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter your password\"\n                className=\"h-12\"\n                autoComplete=\"current-password\"\n              />\n            </div>\n            {error && (\n              <div className=\"flex items-center gap-2 text-sm text-destructive bg-destructive/10 p-3 rounded-md\" data-testid=\"text-error\">\n                <AlertCircle className=\"w-4 h-4\" />\n                <span>{error}</span>\n              </div>\n            )}\n            <Button type=\"submit\" className=\"w-full h-12 font-medium\" data-testid=\"button-login\">\n              Sign In\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3429},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/pages/rankings.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { PerformanceEntry } from \"@shared/schema\";\nimport { format } from \"date-fns\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Award, Printer, Trophy } from \"lucide-react\";\nimport DashboardHeader from \"@/components/DashboardHeader\";\nimport Footer from \"@/components/Footer\";\nimport MonthlyPerformanceReport from \"@/components/MonthlyPerformanceReport\";\n\ninterface RankingData {\n  name: string;\n  count: number;\n}\n\nexport default function Rankings() {\n  const [entries, setEntries] = useState<PerformanceEntry[]>([]);\n  const [selectedMonth, setSelectedMonth] = useState<string>(\"\");\n  const [availableMonths, setAvailableMonths] = useState<string[]>([]);\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"dob_entries\");\n    if (stored) {\n      const parsedEntries: PerformanceEntry[] = JSON.parse(stored);\n      setEntries(parsedEntries);\n\n      const months = Array.from(\n        new Set(\n          parsedEntries.map((entry) => {\n            const date = new Date(entry.createdAt);\n            return format(date, \"yyyy-MM\");\n          })\n        )\n      ).sort((a, b) => b.localeCompare(a));\n\n      setAvailableMonths(months);\n      if (months.length > 0 && !selectedMonth) {\n        setSelectedMonth(months[0]);\n      }\n    }\n  }, []);\n\n  const filteredEntries = useMemo(() => {\n    if (!selectedMonth) return entries;\n    return entries.filter((entry) => {\n      const entryMonth = format(new Date(entry.createdAt), \"yyyy-MM\");\n      return entryMonth === selectedMonth;\n    });\n  }, [entries, selectedMonth]);\n\n  const calculateRankings = (field: keyof PerformanceEntry): RankingData[] => {\n    const counts: Record<string, number> = {};\n\n    filteredEntries.forEach((entry) => {\n      const value = entry[field];\n      if (value && typeof value === \"string\" && value.trim()) {\n        counts[value] = (counts[value] || 0) + 1;\n      }\n    });\n\n    return Object.entries(counts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count);\n  };\n\n  const scriptWriterRankings = calculateRankings(\"scriptWriter\");\n  const videoEditorRankings = calculateRankings(\"videoEditor\");\n  const mojoReporterRankings = calculateRankings(\"mojoReporter\");\n  const jelaReporterRankings = calculateRankings(\"jelaReporter\");\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const RankingCard = ({ title, rankings, icon: Icon }: { title: string; rankings: RankingData[]; icon: any }) => (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-4\">\n        <CardTitle className=\"text-lg font-medium\">{title}</CardTitle>\n        <Icon className=\"w-5 h-5 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {rankings.length === 0 ? (\n          <p className=\"text-sm text-muted-foreground text-center py-4\">No data for this month</p>\n        ) : (\n          rankings.slice(0, 2).map((ranking, index) => (\n            <div\n              key={ranking.name}\n              className=\"flex items-center justify-between p-4 rounded-lg bg-muted/50\"\n              data-testid={`ranking-${title.toLowerCase().replace(/\\s+/g, \"-\")}-${index + 1}`}\n            >\n              <div className=\"flex items-center gap-3\">\n                <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                  index === 0 ? \"bg-yellow-500/20\" : \"bg-slate-500/20\"\n                }`}>\n                  <Trophy className={`w-5 h-5 ${index === 0 ? \"text-yellow-600\" : \"text-slate-600\"}`} />\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">{ranking.name}</p>\n                  <p className=\"text-xs text-muted-foreground\">{ranking.count} entries</p>\n                </div>\n              </div>\n              <Badge variant={index === 0 ? \"default\" : \"secondary\"} className=\"gap-1\">\n                <Award className=\"w-3 h-3\" />\n                {index === 0 ? \"1st\" : \"2nd\"}\n              </Badge>\n            </div>\n          ))\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <DashboardHeader />\n      <div className=\"w-full px-6 py-6 print:p-0 flex-1\">\n        <div className=\"flex items-center justify-between mb-6 print:mb-4\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-foreground\">Monthly Rankings</h1>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Top performers by category\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3 print:hidden\">\n            <Select value={selectedMonth} onValueChange={setSelectedMonth}>\n              <SelectTrigger className=\"w-48 h-12\" data-testid=\"select-month\">\n                <SelectValue placeholder=\"Select month\" />\n              </SelectTrigger>\n              <SelectContent>\n                {availableMonths.map((month) => (\n                  <SelectItem key={month} value={month}>\n                    {format(new Date(month + \"-01\"), \"MMMM yyyy\")}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Button onClick={handlePrint} variant=\"outline\" className=\"gap-2\" data-testid=\"button-print\">\n              <Printer className=\"w-4 h-4\" />\n              Print Report\n            </Button>\n          </div>\n        </div>\n\n        {selectedMonth && (\n          <div className=\"mb-6 print:mb-4\">\n            <Card className=\"bg-primary/5 border-primary/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3\">\n                  <Award className=\"w-6 h-6 text-primary\" />\n                  <div>\n                    <h2 className=\"font-semibold text-lg\">\n                      Employee of the Month - {format(new Date(selectedMonth + \"-01\"), \"MMMM yyyy\")}\n                    </h2>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Congratulations to our top performers this month!\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <RankingCard title=\"Script Writer\" rankings={scriptWriterRankings} icon={Award} />\n          <RankingCard title=\"Video Editor\" rankings={videoEditorRankings} icon={Award} />\n          <RankingCard title=\"Mojo Reporter\" rankings={mojoReporterRankings} icon={Award} />\n          <RankingCard title=\"Jela Reporter\" rankings={jelaReporterRankings} icon={Award} />\n        </div>\n\n        <MonthlyPerformanceReport entries={entries} currentMonth={selectedMonth} />\n      </div>\n      <Footer />\n\n      <style>{`\n        @media print {\n          .print\\\\:hidden {\n            display: none !important;\n          }\n          .print\\\\:p-0 {\n            padding: 0 !important;\n          }\n          .print\\\\:mb-4 {\n            margin-bottom: 1rem !important;\n          }\n          @page {\n            margin: 2cm;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":7429},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid/non-secure\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const replitDomain = process.env.REPLIT_DEV_DOMAIN;\n  \n  const serverOptions = {\n    middlewareMode: true,\n    hmr: false,\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"..\", \"dist\", \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2421},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/Footer.tsx":{"content":"export default function Footer() {\n  return (\n    <footer className=\"w-full py-4 bg-card border-t mt-auto\">\n      <div className=\"max-w-screen-2xl mx-auto px-6\">\n        <p className=\"text-center text-sm text-muted-foreground\">\n          Developed by MOHAMMAD SAIFUDDIN\n        </p>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":317},"client/src/pages/complaint-box.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MessageSquare, Send, Filter, AlertCircle, CheckCircle, Clock, XCircle } from \"lucide-react\";\nimport DashboardHeader from \"@/components/DashboardHeader\";\nimport Footer from \"@/components/Footer\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport type { Complaint } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\nexport default function ComplaintBox() {\n  const { toast } = useToast();\n  const { user, userRole } = useAuth();\n  const isAdmin = userRole === \"admin\";\n\n  const [complaints, setComplaints] = useState<Complaint[]>([]);\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [filterPriority, setFilterPriority] = useState<string>(\"all\");\n\n  // New complaint form\n  const [title, setTitle] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [priority, setPriority] = useState<\"low\" | \"medium\" | \"high\" | \"urgent\">(\"medium\");\n  const [showNewComplaintForm, setShowNewComplaintForm] = useState(false);\n\n  // Reply form\n  const [replyMessage, setReplyMessage] = useState(\"\");\n  const [replyingTo, setReplyingTo] = useState<string | null>(null);\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"dob_complaints\");\n    if (stored) {\n      setComplaints(JSON.parse(stored));\n    }\n  }, []);\n\n  const saveComplaints = (newComplaints: Complaint[]) => {\n    setComplaints(newComplaints);\n    localStorage.setItem(\"dob_complaints\", JSON.stringify(newComplaints));\n  };\n\n  const handleSubmitComplaint = () => {\n    if (!title.trim() || !message.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newComplaint: Complaint = {\n      id: crypto.randomUUID(),\n      title: title.trim(),\n      message: message.trim(),\n      submittedBy: user?.name || user?.userId || \"Unknown\",\n      submittedByRole: userRole || \"unknown\",\n      status: \"pending\",\n      priority: priority,\n      replies: [],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    saveComplaints([newComplaint, ...complaints]);\n    setTitle(\"\");\n    setMessage(\"\");\n    setPriority(\"medium\");\n    setShowNewComplaintForm(false);\n\n    toast({\n      title: \"Complaint Submitted\",\n      description: \"Your complaint has been submitted successfully\",\n    });\n  };\n\n  const handleReply = (complaintId: string) => {\n    if (!replyMessage.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a reply message\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const updated = complaints.map(complaint => {\n      if (complaint.id === complaintId) {\n        return {\n          ...complaint,\n          replies: [\n            ...complaint.replies,\n            {\n              id: crypto.randomUUID(),\n              message: replyMessage.trim(),\n              repliedBy: user?.name || user?.userId || \"Unknown\",\n              repliedByRole: userRole || \"unknown\",\n              timestamp: new Date().toISOString(),\n            }\n          ],\n          updatedAt: new Date().toISOString(),\n        };\n      }\n      return complaint;\n    });\n\n    saveComplaints(updated);\n    setReplyMessage(\"\");\n    setReplyingTo(null);\n\n    toast({\n      title: \"Reply Added\",\n      description: \"Your reply has been added successfully\",\n    });\n  };\n\n  const handleUpdateStatus = (complaintId: string, newStatus: Complaint[\"status\"]) => {\n    const updated = complaints.map(complaint => \n      complaint.id === complaintId \n        ? { ...complaint, status: newStatus, updatedAt: new Date().toISOString() } \n        : complaint\n    );\n    saveComplaints(updated);\n\n    toast({\n      title: \"Status Updated\",\n      description: `Complaint status updated to ${newStatus}`,\n    });\n  };\n\n  const handleDeleteComplaint = (complaintId: string) => {\n    if (!isAdmin) {\n      toast({\n        title: \"Permission Denied\",\n        description: \"Only administrators can delete complaints\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const updated = complaints.filter(c => c.id !== complaintId);\n    saveComplaints(updated);\n\n    toast({\n      title: \"Complaint Deleted\",\n      description: \"The complaint has been removed\",\n    });\n  };\n\n  const getStatusIcon = (status: Complaint[\"status\"]) => {\n    switch (status) {\n      case \"pending\":\n        return <Clock className=\"w-4 h-4\" />;\n      case \"in-progress\":\n        return <AlertCircle className=\"w-4 h-4\" />;\n      case \"resolved\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case \"closed\":\n        return <XCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: Complaint[\"status\"]) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-300\";\n      case \"in-progress\":\n        return \"bg-blue-100 text-blue-800 border-blue-300\";\n      case \"resolved\":\n        return \"bg-green-100 text-green-800 border-green-300\";\n      case \"closed\":\n        return \"bg-gray-100 text-gray-800 border-gray-300\";\n    }\n  };\n\n  const getPriorityColor = (priority: Complaint[\"priority\"]) => {\n    switch (priority) {\n      case \"low\":\n        return \"bg-gray-100 text-gray-800 border-gray-300\";\n      case \"medium\":\n        return \"bg-blue-100 text-blue-800 border-blue-300\";\n      case \"high\":\n        return \"bg-orange-100 text-orange-800 border-orange-300\";\n      case \"urgent\":\n        return \"bg-red-100 text-red-800 border-red-300\";\n    }\n  };\n\n  const filteredComplaints = complaints.filter(complaint => {\n    const matchesStatus = filterStatus === \"all\" || complaint.status === filterStatus;\n    const matchesPriority = filterPriority === \"all\" || complaint.priority === filterPriority;\n    return matchesStatus && matchesPriority;\n  });\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      <DashboardHeader />\n      <div className=\"w-full px-6 py-6 flex-1\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\">Complaint Box</h1>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Submit and track complaints or requests\n              </p>\n            </div>\n            <Button onClick={() => setShowNewComplaintForm(!showNewComplaintForm)} className=\"gap-2\">\n              <MessageSquare className=\"w-4 h-4\" />\n              New Complaint\n            </Button>\n          </div>\n\n          {showNewComplaintForm && (\n            <Card className=\"mb-6 shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Submit New Complaint</CardTitle>\n                <CardDescription>Describe your issue or request</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium mb-1.5 block\">Title</label>\n                  <Input\n                    placeholder=\"Brief description of the issue\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-1.5 block\">Priority</label>\n                  <Select value={priority} onValueChange={(value: any) => setPriority(value)}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-1.5 block\">Message</label>\n                  <Textarea\n                    placeholder=\"Describe your complaint or request in detail\"\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    rows={4}\n                  />\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button onClick={handleSubmitComplaint}>\n                    <Send className=\"w-4 h-4 mr-2\" />\n                    Submit Complaint\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => setShowNewComplaintForm(false)}>\n                    Cancel\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Filters */}\n          <Card className=\"mb-6 shadow-sm\">\n            <CardHeader>\n              <div className=\"flex items-center gap-2\">\n                <Filter className=\"w-5 h-5 text-primary\" />\n                <CardTitle className=\"text-lg\">Filters</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium mb-1.5 block\">Status</label>\n                  <Select value={filterStatus} onValueChange={setFilterStatus}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                      <SelectItem value=\"resolved\">Resolved</SelectItem>\n                      <SelectItem value=\"closed\">Closed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-1.5 block\">Priority</label>\n                  <Select value={filterPriority} onValueChange={setFilterPriority}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Priorities</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Complaints List */}\n          <div className=\"space-y-4\">\n            {filteredComplaints.length === 0 ? (\n              <Card className=\"shadow-sm\">\n                <CardContent className=\"py-12 text-center text-muted-foreground\">\n                  <MessageSquare className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                  <p>No complaints found</p>\n                </CardContent>\n              </Card>\n            ) : (\n              filteredComplaints.map((complaint) => (\n                <Card key={complaint.id} className=\"shadow-sm hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between gap-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <CardTitle className=\"text-lg\">{complaint.title}</CardTitle>\n                          <Badge className={`gap-1 border ${getStatusColor(complaint.status)}`}>\n                            {getStatusIcon(complaint.status)}\n                            {complaint.status}\n                          </Badge>\n                          <Badge className={`gap-1 border ${getPriorityColor(complaint.priority)}`}>\n                            {complaint.priority}\n                          </Badge>\n                        </div>\n                        <CardDescription>\n                          Submitted by {complaint.submittedBy} ({complaint.submittedByRole}) •{\" \"}\n                          {format(new Date(complaint.createdAt), \"PPp\")}\n                        </CardDescription>\n                      </div>\n                      {isAdmin && (\n                        <div className=\"flex gap-2\">\n                          <Select\n                            value={complaint.status}\n                            onValueChange={(value: any) => handleUpdateStatus(complaint.id, value)}\n                          >\n                            <SelectTrigger className=\"w-[140px]\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"pending\">Pending</SelectItem>\n                              <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                              <SelectItem value=\"resolved\">Resolved</SelectItem>\n                              <SelectItem value=\"closed\">Closed</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteComplaint(complaint.id)}\n                          >\n                            Delete\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"bg-muted/50 p-4 rounded-lg\">\n                      <p className=\"text-sm whitespace-pre-wrap\">{complaint.message}</p>\n                    </div>\n\n                    {/* Replies */}\n                    {complaint.replies.length > 0 && (\n                      <div className=\"space-y-3 pl-4 border-l-2 border-primary/20\">\n                        {complaint.replies.map((reply) => (\n                          <div key={reply.id} className=\"bg-card border rounded-lg p-3\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <span className=\"text-sm font-medium\">{reply.repliedBy}</span>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {reply.repliedByRole}\n                              </Badge>\n                              <span className=\"text-xs text-muted-foreground ml-auto\">\n                                {format(new Date(reply.timestamp), \"PPp\")}\n                              </span>\n                            </div>\n                            <p className=\"text-sm whitespace-pre-wrap\">{reply.message}</p>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n\n                    {/* Reply Form */}\n                    {isAdmin && replyingTo === complaint.id ? (\n                      <div className=\"space-y-3\">\n                        <Textarea\n                          placeholder=\"Type your reply...\"\n                          value={replyMessage}\n                          onChange={(e) => setReplyMessage(e.target.value)}\n                          rows={3}\n                        />\n                        <div className=\"flex gap-2\">\n                          <Button onClick={() => handleReply(complaint.id)} size=\"sm\">\n                            <Send className=\"w-3 h-3 mr-2\" />\n                            Send Reply\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => setReplyingTo(null)}>\n                            Cancel\n                          </Button>\n                        </div>\n                      </div>\n                    ) : isAdmin ? (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setReplyingTo(complaint.id)}\n                      >\n                        Reply\n                      </Button>\n                    ) : null}\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17085},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { getUncachableYouTubeClient, extractVideoId } from \"./youtube\";\nimport type { WSMessage, ChatUserStatus } from \"@shared/schema\";\n\ninterface WSClient extends WebSocket {\n  userId?: string;\n  userName?: string;\n  userRole?: string;\n  isAlive?: boolean;\n}\n\nconst connectedUsers = new Map<string, WSClient>();\nconst pinnedMessages = new Set<string>();\nconst blockedUsers = new Set<string>();\nconst mutedUsers = new Set<string>();\n\nfunction isAdmin(role?: string): boolean {\n  return role === 'admin';\n}\n\nfunction isModeratorOrAdmin(role?: string): boolean {\n  return role === 'admin' || role === 'moderator';\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.post(\"/api/youtube/video-info\", async (req, res) => {\n    try {\n      const { url } = req.body;\n\n      if (!url) {\n        return res.status(400).json({ error: \"URL is required\" });\n      }\n\n      const videoId = extractVideoId(url);\n      if (!videoId) {\n        return res.status(400).json({ error: \"Invalid YouTube URL\" });\n      }\n\n      const youtube = await getUncachableYouTubeClient();\n      const response = await youtube.videos.list({\n        part: ['snippet', 'statistics'],\n        id: [videoId],\n      });\n\n      const video = response.data.items?.[0];\n      if (!video) {\n        return res.status(404).json({ error: \"Video not found\" });\n      }\n\n      const title = video.snippet?.title || \"\";\n      const views = parseInt(video.statistics?.viewCount || \"0\", 10);\n\n      res.json({ title, views });\n    } catch (error) {\n      console.error(\"YouTube API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch video information\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws: WSClient) => {\n    console.log('New WebSocket connection established');\n    ws.isAlive = true;\n\n    ws.on('pong', () => {\n      ws.isAlive = true;\n    });\n\n    ws.on('message', (data: Buffer) => {\n      try {\n        const message: WSMessage = JSON.parse(data.toString());\n\n        switch (message.type) {\n          case 'user_status':\n            ws.userId = message.data.userId;\n            ws.userName = message.data.userName;\n            ws.userRole = message.data.userRole;\n            connectedUsers.set(message.data.userId, ws);\n            \n            broadcastToAll(message);\n            sendUserList(ws);\n            break;\n\n          case 'chat_message':\n            if (blockedUsers.has(message.data.userId)) {\n              console.log(`Blocked user ${message.data.userId} attempted to send message`);\n              return;\n            }\n            if (mutedUsers.has(message.data.userId)) {\n              console.log(`Muted user ${message.data.userId} attempted to send message`);\n              return;\n            }\n            broadcastToOthers(message, ws);\n            break;\n\n          case 'message_read':\n          case 'user_typing':\n            broadcastToAll(message);\n            break;\n\n          case 'message_pinned':\n            if (!isAdmin(ws.userRole)) {\n              console.log(`Non-admin user ${ws.userId} attempted to pin message`);\n              return;\n            }\n            if (message.data.isPinned) {\n              pinnedMessages.add(message.data.messageId);\n            } else {\n              pinnedMessages.delete(message.data.messageId);\n            }\n            broadcastToAll(message);\n            break;\n\n          case 'user_blocked':\n            if (!isAdmin(ws.userRole)) {\n              console.log(`Non-admin user ${ws.userId} attempted to block user`);\n              return;\n            }\n            blockedUsers.add(message.data.userId);\n            broadcastToAll(message);\n            break;\n\n          case 'user_muted':\n            if (!isAdmin(ws.userRole)) {\n              console.log(`Non-admin user ${ws.userId} attempted to mute user`);\n              return;\n            }\n            mutedUsers.add(message.data.userId);\n            broadcastToAll(message);\n            break;\n\n          case 'user_unblocked':\n            if (!isAdmin(ws.userRole)) {\n              console.log(`Non-admin user ${ws.userId} attempted to unblock user`);\n              return;\n            }\n            blockedUsers.delete(message.data.userId);\n            broadcastToAll(message);\n            break;\n\n          case 'user_unmuted':\n            if (!isAdmin(ws.userRole)) {\n              console.log(`Non-admin user ${ws.userId} attempted to unmute user`);\n              return;\n            }\n            mutedUsers.delete(message.data.userId);\n            broadcastToAll(message);\n            break;\n\n          case 'chat_cleared':\n            if (!isAdmin(ws.userRole)) {\n              console.log(`Non-admin user ${ws.userId} attempted to clear chat`);\n              return;\n            }\n            pinnedMessages.clear();\n            broadcastToAll(message);\n            break;\n\n          case 'request_user_list':\n            sendUserList(ws);\n            break;\n\n          default:\n            console.log('Unknown message type:', message);\n        }\n      } catch (error) {\n        console.error('Error processing WebSocket message:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      if (ws.userId) {\n        connectedUsers.delete(ws.userId);\n        \n        const statusMessage: WSMessage = {\n          type: 'user_status',\n          data: {\n            userId: ws.userId,\n            userName: ws.userName || '',\n            userRole: ws.userRole || '',\n            status: 'offline',\n            lastSeen: new Date().toISOString(),\n          }\n        };\n        broadcastToAll(statusMessage);\n      }\n      console.log('WebSocket connection closed');\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n    });\n  });\n\n  const heartbeatInterval = setInterval(() => {\n    wss.clients.forEach((ws: WSClient) => {\n      if (ws.isAlive === false) {\n        if (ws.userId) {\n          connectedUsers.delete(ws.userId);\n        }\n        return ws.terminate();\n      }\n\n      ws.isAlive = false;\n      ws.ping();\n    });\n  }, 30000);\n\n  wss.on('close', () => {\n    clearInterval(heartbeatInterval);\n  });\n\n  function broadcastToAll(message: WSMessage) {\n    const messageStr = JSON.stringify(message);\n    wss.clients.forEach((client: WSClient) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(messageStr);\n      }\n    });\n  }\n\n  function broadcastToOthers(message: WSMessage, excludeClient: WSClient) {\n    const messageStr = JSON.stringify(message);\n    wss.clients.forEach((client: WSClient) => {\n      if (client !== excludeClient && client.readyState === WebSocket.OPEN) {\n        client.send(messageStr);\n      }\n    });\n  }\n\n  function sendUserList(ws: WSClient) {\n    const userList: ChatUserStatus[] = Array.from(connectedUsers.values())\n      .filter(client => client.userId)\n      .map(client => ({\n        userId: client.userId!,\n        userName: client.userName!,\n        userRole: client.userRole!,\n        status: 'online' as const,\n        lastSeen: new Date().toISOString(),\n      }));\n\n    const message: WSMessage = {\n      type: 'user_list',\n      data: userList,\n    };\n\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }\n\n  return httpServer;\n}\n","size_bytes":7493},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8;\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 94.12%;\n\n  --foreground: 0 0% 10.2%;\n\n  --border: 0 0% 90.98%;\n\n  --card: 0 0% 98.82%;\n\n  --card-foreground: 0 0% 0%;\n\n  --card-border: 0 0% 93%;\n\n  --sidebar: 45 25% 97%;\n\n  --sidebar-foreground: 20 14% 17%;\n\n  --sidebar-border: 45 15% 80%;\n\n  --sidebar-primary: 9 75% 61%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 25 45% 80%;\n\n  --sidebar-accent-foreground: 20 14% 17%;\n\n  --sidebar-ring: 9 75% 61%;\n\n  --popover: 45 25% 97%;\n\n  --popover-foreground: 0 0% 100%;\n\n  --popover-border: 45 15% 92%;\n\n  --primary: 342 85.11% 52.55%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 0 0% 76.86%;\n\n  --secondary-foreground: 0 0% 10.2%;\n\n  --muted: 0 0% 89.02%;\n\n  --muted-foreground: 0 0% 12.94%;\n\n  --accent: 0 0% 100%;\n\n  --accent-foreground: 0 0% 10.2%;\n\n  --destructive: 0 0% 0%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 70.98%;\n  --ring: 0 0% 41.96%;\n  --chart-1: 203.8863 88.2845% 53.1373%;\n  --chart-2: 159.7826 100% 36.0784%;\n  --chart-3: 42.0290 92.8251% 56.2745%;\n  --chart-4: 147.1429 78.5047% 41.9608%;\n  --chart-5: 341.4894 75.2000% 50.9804%;\n\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: 'Inter', sans-serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.8rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(9 75% 61% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(9 75% 61% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(9 75% 61% / 0.00), 0px 1px 2px -1px hsl(9 75% 61% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(9 75% 61% / 0.00), 0px 1px 2px -1px hsl(9 75% 61% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(9 75% 61% / 0.00), 0px 2px 4px -1px hsl(9 75% 61% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(9 75% 61% / 0.00), 0px 4px 6px -1px hsl(9 75% 61% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(9 75% 61% / 0.00), 0px 8px 10px -1px hsl(9 75% 61% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(9 75% 61% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 20 14% 4%;\n\n  --foreground: 45 25% 91%;\n\n  --border: 20 14% 15%;\n\n  --card: 20 14% 8%;\n\n  --card-foreground: 45 25% 85%;\n\n  --card-border: 20 14% 15%;\n\n  --sidebar: 20 14% 8%;\n\n  --sidebar-foreground: 45 25% 85%;\n\n  --sidebar-border: 20 14% 15%;\n\n  --sidebar-primary: 9 75% 61%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 25 45% 20%;\n\n  --sidebar-accent-foreground: 45 25% 85%;\n\n  --sidebar-ring: 9 75% 61%;\n\n  --popover: 20 14% 4%;\n\n  --popover-foreground: 45 25% 91%;\n\n  --popover-border: 20 14% 10%;\n\n  --primary: 9 75% 61%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 30 15% 52%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 20 14% 15%;\n\n  --muted-foreground: 45 15% 46%;\n\n  --accent: 25 45% 20%;\n\n  --accent-foreground: 45 25% 85%;\n\n  --destructive: 356.3033 90.5579% 54.3137%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 20 14% 18%;\n  --ring: 9 75% 61%;\n  --chart-1: 203.8863 88.2845% 53.1373%;\n  --chart-2: 159.7826 100% 36.0784%;\n  --chart-3: 42.0290 92.8251% 56.2745%;\n  --chart-4: 147.1429 78.5047% 41.9608%;\n  --chart-5: 341.4894 75.2000% 50.9804%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(9 75% 61% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(9 75% 61% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(9 75% 61% / 0.00), 0px 1px 2px -1px hsl(9 75% 61% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(9 75% 61% / 0.00), 0px 1px 2px -1px hsl(9 75% 61% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(9 75% 61% / 0.00), 0px 2px 4px -1px hsl(9 75% 61% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(9 75% 61% / 0.00), 0px 4px 6px -1px hsl(9 75% 61% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(9 75% 61% / 0.00), 0px 8px 10px -1px hsl(9 75% 61% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(9 75% 61% / 0.00);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9578},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth, UserRole } from \"@/contexts/AuthContext\";\nimport { ChatProvider } from \"@/contexts/ChatContext\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport ChatBoxPage from \"@/pages/chat-box\";\nimport VoiceArtist from \"@/pages/voice-artist\";\nimport Attendance from \"@/pages/attendance\";\nimport WorkFlow from \"@/pages/work-flow\";\nimport VideoUploadTime from \"@/pages/video-upload-time\";\nimport EmployeeData from \"@/pages/employee-data\";\nimport JelaReporterData from \"@/pages/jela-reporter-data\";\nimport Rankings from \"@/pages/rankings\";\nimport Admin from \"@/pages/admin\";\nimport ComplaintBox from \"@/pages/complaint-box\";\nimport RequisitionSheet from \"@/pages/requisition-sheet\";\nimport ExpenseSheet from \"@/pages/expense-sheet\";\n\nfunction ProtectedRoute({ \n  component: Component, \n  requiredRole \n}: { \n  component: React.ComponentType;\n  requiredRole?: UserRole;\n}) {\n  const { isAuthenticated, userRole } = useAuth();\n\n  if (!isAuthenticated) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  if (requiredRole && userRole !== requiredRole) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return <Component />;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\">\n        {() => <ProtectedRoute component={Dashboard} />}\n      </Route>\n      <Route path=\"/chat-box\">\n        {() => <ProtectedRoute component={ChatBoxPage} />}\n      </Route>\n      <Route path=\"/voice-artist\">\n        {() => <ProtectedRoute component={VoiceArtist} />}\n      </Route>\n      <Route path=\"/attendance\">\n        {() => <ProtectedRoute component={Attendance} />}\n      </Route>\n      <Route path=\"/work-flow\">\n        {() => <ProtectedRoute component={WorkFlow} />}\n      </Route>\n      <Route path=\"/video-upload-time\">\n        {() => <ProtectedRoute component={VideoUploadTime} />}\n      </Route>\n      <Route path=\"/employee-data\">\n        {() => <ProtectedRoute component={EmployeeData} requiredRole=\"admin\" />}\n      </Route>\n      <Route path=\"/jela-reporter-data\">\n        {() => <ProtectedRoute component={JelaReporterData} requiredRole=\"admin\" />}\n      </Route>\n      <Route path=\"/rankings\">\n        {() => <ProtectedRoute component={Rankings} requiredRole=\"admin\" />}\n      </Route>\n      <Route path=\"/admin\">\n        {() => <ProtectedRoute component={Admin} requiredRole=\"admin\" />}\n      </Route>\n      <Route path=\"/complaint-box\">\n        {() => <ProtectedRoute component={ComplaintBox} />}\n      </Route>\n      <Route path=\"/requisition-sheet\">\n        {() => <ProtectedRoute component={RequisitionSheet} requiredRole=\"admin\" />}\n      </Route>\n      <Route path=\"/expense-sheet\">\n        {() => <ProtectedRoute component={ExpenseSheet} requiredRole=\"admin\" />}\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <ChatProvider>\n            <Router />\n          </ChatProvider>\n        </AuthProvider>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3398},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/pages/chat-box.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useChat } from '@/contexts/ChatContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { format } from 'date-fns';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardHeader, CardContent, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport {\n  MessageCircle,\n  Send,\n  Paperclip,\n  Users,\n  Pin,\n  MoreVertical,\n  Ban,\n  VolumeX,\n  Check,\n  CheckCheck,\n  Wifi,\n  WifiOff,\n  Reply,\n  X,\n  AtSign,\n} from 'lucide-react';\nimport DashboardHeader from '@/components/DashboardHeader';\nimport Footer from '@/components/Footer';\n\nexport default function ChatBoxPage() {\n  const { user, userRole } = useAuth();\n  const {\n    messages,\n    onlineUsers,\n    isConnected,\n    settings,\n    sendMessage,\n    sendTypingIndicator,\n    markMessageAsRead,\n    pinMessage,\n    blockUser,\n    muteUser,\n    isUserBlocked,\n    isUserMuted,\n  } = useChat();\n\n  const [messageInput, setMessageInput] = useState('');\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [showUserList, setShowUserList] = useState(false);\n  const [blockDialogUser, setBlockDialogUser] = useState<{ userId: string; userName: string } | null>(null);\n  const [muteDialogUser, setMuteDialogUser] = useState<{ userId: string; userName: string } | null>(null);\n  const [replyingTo, setReplyingTo] = useState<{ messageId: string; userName: string; message: string } | null>(null);\n  const [showMentions, setShowMentions] = useState(false);\n  const [mentionFilter, setMentionFilter] = useState('');\n  const [mentionPosition, setMentionPosition] = useState(0);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const isAdmin = userRole === 'admin';\n  const isModerator = userRole === 'moderator' || userRole === 'admin';\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (user) {\n      const unreadMessages = messages.filter(\n        msg => msg.userId !== user.userId && !msg.readBy.includes(user.userId)\n      );\n      unreadMessages.forEach(msg => markMessageAsRead(msg.id));\n    }\n  }, [messages, user, markMessageAsRead]);\n\n  const extractMentions = (text: string): string[] => {\n    const mentionRegex = /@\\[([^\\]]+)\\]/g;\n    const matches = Array.from(text.matchAll(mentionRegex));\n    return matches.map(m => m[1]);\n  };\n\n  const handleSendMessage = () => {\n    if (!messageInput.trim() && !selectedFile) return;\n    \n    if (settings.moderatorOnlyMode && !isModerator) {\n      return;\n    }\n\n    if (user && isUserMuted(user.userId)) {\n      return;\n    }\n\n    const mentions = extractMentions(messageInput);\n    sendMessage(messageInput, selectedFile || undefined, replyingTo || undefined, mentions);\n    setMessageInput('');\n    setSelectedFile(null);\n    setReplyingTo(null);\n  };\n\n  const handleInputChange = (value: string) => {\n    setMessageInput(value);\n\n    const lastAtSymbol = value.lastIndexOf('@');\n    if (lastAtSymbol !== -1) {\n      const textAfterAt = value.substring(lastAtSymbol + 1);\n      const hasClosingBracket = textAfterAt.includes(']');\n      \n      if (!hasClosingBracket && textAfterAt.startsWith('[')) {\n        const filterText = textAfterAt.substring(1);\n        setMentionFilter(filterText.toLowerCase());\n        setShowMentions(true);\n        setMentionPosition(lastAtSymbol);\n      } else if (textAfterAt === '' || textAfterAt === '[') {\n        setMentionFilter('');\n        setShowMentions(true);\n        setMentionPosition(lastAtSymbol);\n      } else {\n        setShowMentions(false);\n      }\n    } else {\n      setShowMentions(false);\n    }\n\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n\n    sendTypingIndicator(true);\n\n    typingTimeoutRef.current = setTimeout(() => {\n      sendTypingIndicator(false);\n    }, 1000);\n  };\n\n  const handleMentionSelect = (userName: string) => {\n    const beforeMention = messageInput.substring(0, mentionPosition);\n    let afterMentionStart = mentionPosition + 1;\n    \n    if (messageInput[afterMentionStart] === '[') {\n      const closingBracket = messageInput.indexOf(']', afterMentionStart);\n      if (closingBracket !== -1) {\n        afterMentionStart = closingBracket + 1;\n      } else {\n        afterMentionStart = mentionPosition + 2 + mentionFilter.length;\n      }\n    } else {\n      afterMentionStart = mentionPosition + 1;\n    }\n    \n    const afterMention = messageInput.substring(afterMentionStart);\n    setMessageInput(`${beforeMention}@[${userName}] ${afterMention}`);\n    setShowMentions(false);\n    inputRef.current?.focus();\n  };\n\n  const filteredOnlineUsers = onlineUsers.filter(u => \n    u.userId !== user?.userId && \n    u.userName.toLowerCase().includes(mentionFilter)\n  );\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (file.size > 5 * 1024 * 1024) {\n        alert('File size must be less than 5MB');\n        return;\n      }\n      setSelectedFile(file);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const pinnedMessages = messages.filter(msg => msg.isPinned);\n  const regularMessages = messages.filter(msg => !msg.isPinned);\n\n  if (!settings.enabled) {\n    return (\n      <div className=\"min-h-screen flex flex-col bg-background\">\n        <DashboardHeader />\n        <div className=\"w-full px-6 py-6 flex-1\">\n          <div className=\"max-w-7xl mx-auto\">\n            <Card className=\"shadow-sm\">\n              <CardContent className=\"py-12 text-center text-muted-foreground\">\n                <MessageCircle className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <p className=\"text-lg font-medium\">Chat is currently disabled</p>\n                <p className=\"text-sm mt-2\">Please contact an administrator to enable the chat feature</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      <DashboardHeader />\n      <div className=\"w-full px-6 py-6 flex-1\">\n        <div className=\"max-w-7xl mx-auto h-full\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\">Team Chat</h1>\n              <p className=\"text-sm text-muted-foreground mt-1 flex items-center gap-2\">\n                Real-time communication with your team\n                {isConnected ? (\n                  <Badge variant=\"outline\" className=\"gap-1 bg-green-100 text-green-800 border-green-300\">\n                    <Wifi className=\"w-3 h-3\" />\n                    Connected\n                  </Badge>\n                ) : (\n                  <Badge variant=\"outline\" className=\"gap-1 bg-red-100 text-red-800 border-red-300\">\n                    <WifiOff className=\"w-3 h-3\" />\n                    Disconnected\n                  </Badge>\n                )}\n              </p>\n            </div>\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowUserList(!showUserList)}\n              className=\"gap-2\"\n            >\n              <Users className=\"w-4 h-4\" />\n              {onlineUsers.length} Online\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            <div className=\"lg:col-span-3\">\n              <Card className=\"shadow-sm h-[calc(100vh-16rem)]\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <MessageCircle className=\"w-5 h-5\" />\n                      Messages\n                    </CardTitle>\n                  </div>\n                </CardHeader>\n                <Separator />\n                <CardContent className=\"p-0 flex flex-col h-[calc(100%-4rem)]\">\n                  <ScrollArea className=\"flex-1 px-4\">\n                    <div className=\"space-y-4 py-4\">\n                      {pinnedMessages.length > 0 && (\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <Pin className=\"w-4 h-4\" />\n                            <span>Pinned Messages</span>\n                          </div>\n                          {pinnedMessages.map(msg => (\n                            <MessageItem\n                              key={msg.id}\n                              msg={msg}\n                              currentUser={user}\n                              isAdmin={isAdmin}\n                              onPin={pinMessage}\n                              onBlock={setBlockDialogUser}\n                              onMute={setMuteDialogUser}\n                              onReply={(msgId, userName, message) => setReplyingTo({ messageId: msgId, userName, message })}\n                            />\n                          ))}\n                          <Separator className=\"my-4\" />\n                        </div>\n                      )}\n                      \n                      {regularMessages.map(msg => (\n                        <MessageItem\n                          key={msg.id}\n                          msg={msg}\n                          currentUser={user}\n                          isAdmin={isAdmin}\n                          onPin={pinMessage}\n                          onBlock={setBlockDialogUser}\n                          onMute={setMuteDialogUser}\n                          onReply={(msgId, userName, message) => setReplyingTo({ messageId: msgId, userName, message })}\n                        />\n                      ))}\n                      <div ref={messagesEndRef} />\n                    </div>\n                  </ScrollArea>\n\n                  <div className=\"border-t p-4\">\n                    {replyingTo && (\n                      <div className=\"flex items-start gap-2 mb-2 p-2 bg-muted rounded border-l-4 border-primary\">\n                        <Reply className=\"w-4 h-4 mt-0.5\" />\n                        <div className=\"flex-1\">\n                          <div className=\"text-xs font-medium\">Replying to {replyingTo.userName}</div>\n                          <div className=\"text-xs text-muted-foreground truncate\">{replyingTo.message}</div>\n                        </div>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => setReplyingTo(null)}\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    )}\n\n                    {selectedFile && (\n                      <div className=\"flex items-center gap-2 mb-2 p-2 bg-muted rounded\">\n                        <Paperclip className=\"w-4 h-4\" />\n                        <span className=\"text-sm flex-1\">{selectedFile.name}</span>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => setSelectedFile(null)}\n                        >\n                          Remove\n                        </Button>\n                      </div>\n                    )}\n\n                    <div className=\"relative\">\n                      {showMentions && filteredOnlineUsers.length > 0 && (\n                        <div className=\"absolute bottom-full left-0 right-0 mb-2 bg-background border rounded-lg shadow-lg max-h-48 overflow-y-auto z-10\">\n                          <div className=\"p-2 space-y-1\">\n                            {filteredOnlineUsers.map(u => (\n                              <button\n                                key={u.userId}\n                                onClick={() => handleMentionSelect(u.userName)}\n                                className=\"w-full flex items-center gap-2 p-2 hover:bg-muted rounded text-left\"\n                              >\n                                <AtSign className=\"w-4 h-4\" />\n                                <span className=\"font-medium\">{u.userName}</span>\n                                <Badge variant=\"outline\" className=\"text-xs ml-auto\">\n                                  {u.userRole}\n                                </Badge>\n                              </button>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex gap-2\">\n                        <Input\n                          ref={inputRef}\n                          placeholder={\n                            settings.moderatorOnlyMode && !isModerator\n                              ? \"Only moderators can send messages\"\n                              : user && isUserMuted(user.userId)\n                              ? \"You are muted\"\n                              : \"Type a message... (@[ to mention)\"\n                          }\n                          value={messageInput}\n                          onChange={(e) => handleInputChange(e.target.value)}\n                          onKeyPress={handleKeyPress}\n                          disabled={\n                            (settings.moderatorOnlyMode && !isModerator) ||\n                            (user ? isUserMuted(user.userId) : false)\n                          }\n                        />\n                        {settings.fileSharingEnabled && (\n                          <>\n                            <input\n                              ref={fileInputRef}\n                              type=\"file\"\n                              accept=\"image/*,application/pdf,.doc,.docx\"\n                              onChange={handleFileSelect}\n                              className=\"hidden\"\n                            />\n                            <Button\n                              variant=\"outline\"\n                              size=\"icon\"\n                              onClick={() => fileInputRef.current?.click()}\n                              disabled={\n                                (settings.moderatorOnlyMode && !isModerator) ||\n                                (user ? isUserMuted(user.userId) : false)\n                              }\n                            >\n                              <Paperclip className=\"w-4 h-4\" />\n                            </Button>\n                          </>\n                        )}\n                        <Button \n                          onClick={handleSendMessage}\n                          disabled={\n                            (!messageInput.trim() && !selectedFile) ||\n                            (settings.moderatorOnlyMode && !isModerator) ||\n                            (user ? isUserMuted(user.userId) : false)\n                          }\n                        >\n                          <Send className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {showUserList && (\n              <div className=\"lg:col-span-1\">\n                <Card className=\"shadow-sm\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Online Users</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ScrollArea className=\"h-[calc(100vh-20rem)]\">\n                      <div className=\"space-y-2\">\n                        {onlineUsers.map(u => (\n                          <div\n                            key={u.userId}\n                            className=\"flex items-center gap-2 p-2 rounded hover:bg-muted\"\n                          >\n                            <div className={`w-2 h-2 rounded-full ${u.status === 'online' ? 'bg-green-500' : 'bg-gray-400'}`} />\n                            <div className=\"flex-1\">\n                              <div className=\"text-sm font-medium\">{u.userName}</div>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {u.userRole}\n                              </Badge>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </ScrollArea>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      <Footer />\n\n      <AlertDialog open={!!blockDialogUser} onOpenChange={() => setBlockDialogUser(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Block User</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to block {blockDialogUser?.userName}? They will not be able to send messages.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => {\n                if (blockDialogUser) {\n                  blockUser(blockDialogUser.userId, blockDialogUser.userName);\n                  setBlockDialogUser(null);\n                }\n              }}\n            >\n              Block User\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <AlertDialog open={!!muteDialogUser} onOpenChange={() => setMuteDialogUser(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Mute User</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to mute {muteDialogUser?.userName}? They will not be able to send messages.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => {\n                if (muteDialogUser) {\n                  muteUser(muteDialogUser.userId, muteDialogUser.userName);\n                  setMuteDialogUser(null);\n                }\n              }}\n            >\n              Mute User\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n\ninterface MessageItemProps {\n  msg: any;\n  currentUser: any;\n  isAdmin: boolean;\n  onPin: (messageId: string, isPinned: boolean) => void;\n  onBlock: (user: { userId: string; userName: string }) => void;\n  onMute: (user: { userId: string; userName: string }) => void;\n  onReply: (messageId: string, userName: string, message: string) => void;\n}\n\nfunction MessageItem({ msg, currentUser, isAdmin, onPin, onBlock, onMute, onReply }: MessageItemProps) {\n  const isOwnMessage = msg.userId === currentUser?.userId;\n  const isRead = msg.readBy.length > 1;\n\n  const renderMessage = (text: string) => {\n    const parts = text.split(/(@\\[[^\\]]+\\])/g);\n    return parts.map((part, index) => {\n      if (part.match(/^@\\[.+\\]$/)) {\n        return (\n          <span key={index} className=\"font-semibold bg-primary/20 px-1 rounded\">\n            {part}\n          </span>\n        );\n      }\n      return part;\n    });\n  };\n\n  return (\n    <div className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}>\n      <div className={`max-w-[70%] ${isOwnMessage ? 'items-end' : 'items-start'} flex flex-col gap-1`}>\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-sm font-medium\">{msg.userName}</span>\n          <Badge variant=\"outline\" className=\"text-xs\">\n            {msg.userRole}\n          </Badge>\n          {msg.isPinned && <Pin className=\"w-3 h-3 text-primary\" />}\n        </div>\n        \n        <div className={`rounded-lg p-3 ${\n          isOwnMessage \n            ? 'bg-primary text-primary-foreground' \n            : 'bg-muted'\n        }`}>\n          {msg.replyTo && (\n            <div className=\"mb-2 p-2 bg-black/10 rounded border-l-2 border-primary/50\">\n              <div className=\"text-xs font-medium opacity-80\">\n                Replying to {msg.replyTo.userName}\n              </div>\n              <div className=\"text-xs opacity-70 truncate\">\n                {msg.replyTo.message}\n              </div>\n            </div>\n          )}\n          \n          {msg.fileUrl && (\n            <div className=\"mb-2\">\n              {msg.fileName?.match(/\\.(jpg|jpeg|png|gif)$/i) ? (\n                <img \n                  src={msg.fileUrl} \n                  alt={msg.fileName} \n                  className=\"max-w-full rounded\"\n                />\n              ) : (\n                <a \n                  href={msg.fileUrl} \n                  download={msg.fileName}\n                  className=\"flex items-center gap-2 text-sm underline\"\n                >\n                  <Paperclip className=\"w-4 h-4\" />\n                  {msg.fileName}\n                </a>\n              )}\n            </div>\n          )}\n          \n          {msg.message && (\n            <p className=\"text-sm whitespace-pre-wrap break-words\">{renderMessage(msg.message)}</p>\n          )}\n          \n          <div className=\"flex items-center gap-2 mt-1\">\n            <span className=\"text-xs opacity-70\">\n              {format(new Date(msg.timestamp), 'p')}\n            </span>\n            {isOwnMessage && (\n              <span className=\"text-xs opacity-70\">\n                {isRead ? <CheckCheck className=\"w-3 h-3\" /> : <Check className=\"w-3 h-3\" />}\n              </span>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex gap-1\">\n          {!isOwnMessage && (\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"h-6 text-xs\"\n              onClick={() => onReply(msg.id, msg.userName, msg.message || 'file attachment')}\n            >\n              <Reply className=\"w-3 h-3 mr-1\" />\n              Reply\n            </Button>\n          )}\n          \n          {isAdmin && !isOwnMessage && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" className=\"h-6\">\n                  <MoreVertical className=\"w-3 h-3\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => onPin(msg.id, !msg.isPinned)}>\n                  <Pin className=\"w-4 h-4 mr-2\" />\n                  {msg.isPinned ? 'Unpin' : 'Pin'} Message\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => onBlock({ userId: msg.userId, userName: msg.userName })}>\n                  <Ban className=\"w-4 h-4 mr-2\" />\n                  Block User\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => onMute({ userId: msg.userId, userName: msg.userName })}>\n                  <VolumeX className=\"w-4 h-4 mr-2\" />\n                  Mute User\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":24131},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./client/src\"),\n      \"@shared\": path.resolve(__dirname, \"./shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: false,\n    hmr: false,\n  },\n});\n","size_bytes":634},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/pages/voice-artist.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Mic, UserPlus, Edit, Trash2, Save, X, FileText, Printer } from \"lucide-react\";\nimport DashboardHeader from \"@/components/DashboardHeader\";\nimport Footer from \"@/components/Footer\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { format } from \"date-fns\";\n\ninterface VoiceArtist {\n  id: string;\n  name: string;\n  phone: string;\n  perMinuteRate: number;\n  notes: string;\n  createdAt: string;\n}\n\ninterface VoiceWorkEntry {\n  id: string;\n  date: string;\n  title: string;\n  artistId: string;\n  artistName: string;\n  minute: number;\n  second: number;\n  totalMin: number;\n  totalBill: number;\n  createdAt: string;\n}\n\nexport default function VoiceArtist() {\n  const { toast } = useToast();\n  const { userRole } = useAuth();\n  const isAdmin = userRole === \"admin\";\n\n  const [artists, setArtists] = useState<VoiceArtist[]>([]);\n  const [workEntries, setWorkEntries] = useState<VoiceWorkEntry[]>([]);\n  const [editingArtist, setEditingArtist] = useState<string | null>(null);\n\n  // Artist form\n  const [artistName, setArtistName] = useState(\"\");\n  const [artistPhone, setArtistPhone] = useState(\"\");\n  const [artistRate, setArtistRate] = useState(\"\");\n  const [artistNotes, setArtistNotes] = useState(\"\");\n\n  // Work entry form\n  const [workDate, setWorkDate] = useState(new Date().toISOString().slice(0, 10));\n  const [workTitle, setWorkTitle] = useState(\"\");\n  const [selectedArtistId, setSelectedArtistId] = useState(\"\");\n  const [workMinute, setWorkMinute] = useState(\"\");\n  const [workSecond, setWorkSecond] = useState(\"\");\n\n  // Bill report\n  const [selectedMonth, setSelectedMonth] = useState(new Date().toISOString().slice(0, 7));\n\n  useEffect(() => {\n    const storedArtists = localStorage.getItem(\"dob_voice_artists\");\n    if (storedArtists) {\n      setArtists(JSON.parse(storedArtists));\n    }\n\n    const storedWork = localStorage.getItem(\"dob_voice_work\");\n    if (storedWork) {\n      setWorkEntries(JSON.parse(storedWork));\n    }\n  }, []);\n\n  const handleAddArtist = () => {\n    if (!artistName || !artistPhone) {\n      toast({\n        title: \"Invalid Input\",\n        description: \"Please fill in name and phone number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const rate = parseFloat(artistRate) || 0;\n\n    const newArtist: VoiceArtist = {\n      id: crypto.randomUUID(),\n      name: artistName,\n      phone: artistPhone,\n      perMinuteRate: rate,\n      notes: artistNotes,\n      createdAt: new Date().toISOString(),\n    };\n\n    const updated = [...artists, newArtist];\n    setArtists(updated);\n    localStorage.setItem(\"dob_voice_artists\", JSON.stringify(updated));\n\n    setArtistName(\"\");\n    setArtistPhone(\"\");\n    setArtistRate(\"\");\n    setArtistNotes(\"\");\n\n    toast({\n      title: \"Voice Artist Added\",\n      description: `${artistName} has been added successfully`,\n    });\n  };\n\n  const handleEditArtist = (artist: VoiceArtist) => {\n    setEditingArtist(artist.id);\n    setArtistName(artist.name);\n    setArtistPhone(artist.phone);\n    setArtistRate(artist.perMinuteRate.toString());\n    setArtistNotes(artist.notes);\n  };\n\n  const handleSaveEditArtist = () => {\n    if (!editingArtist) return;\n\n    const updated = artists.map(artist =>\n      artist.id === editingArtist\n        ? {\n            ...artist,\n            name: artistName,\n            phone: artistPhone,\n            perMinuteRate: parseFloat(artistRate) || 0,\n            notes: artistNotes,\n          }\n        : artist\n    );\n    setArtists(updated);\n    localStorage.setItem(\"dob_voice_artists\", JSON.stringify(updated));\n    \n    setEditingArtist(null);\n    setArtistName(\"\");\n    setArtistPhone(\"\");\n    setArtistRate(\"\");\n    setArtistNotes(\"\");\n\n    toast({\n      title: \"Artist Updated\",\n      description: \"Voice artist information has been updated\",\n    });\n  };\n\n  const handleDeleteArtist = (id: string, name: string) => {\n    const updated = artists.filter(artist => artist.id !== id);\n    setArtists(updated);\n    localStorage.setItem(\"dob_voice_artists\", JSON.stringify(updated));\n\n    toast({\n      title: \"Artist Removed\",\n      description: `${name} has been removed`,\n    });\n  };\n\n  const handleAddWorkEntry = () => {\n    if (!workDate || !workTitle || !selectedArtistId) {\n      toast({\n        title: \"Invalid Input\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const artist = artists.find(a => a.id === selectedArtistId);\n    if (!artist) return;\n\n    const min = parseInt(workMinute) || 0;\n    const sec = parseInt(workSecond) || 0;\n    const totalMin = min + sec / 60;\n    const totalBill = totalMin * artist.perMinuteRate;\n\n    const newEntry: VoiceWorkEntry = {\n      id: crypto.randomUUID(),\n      date: workDate,\n      title: workTitle,\n      artistId: artist.id,\n      artistName: artist.name,\n      minute: min,\n      second: sec,\n      totalMin: parseFloat(totalMin.toFixed(2)),\n      totalBill: parseFloat(totalBill.toFixed(2)),\n      createdAt: new Date().toISOString(),\n    };\n\n    const updated = [...workEntries, newEntry];\n    setWorkEntries(updated);\n    localStorage.setItem(\"dob_voice_work\", JSON.stringify(updated));\n\n    setWorkDate(new Date().toISOString().slice(0, 10));\n    setWorkTitle(\"\");\n    setSelectedArtistId(\"\");\n    setWorkMinute(\"\");\n    setWorkSecond(\"\");\n\n    toast({\n      title: \"Work Entry Added\",\n      description: `Entry for ${artist.name} has been recorded`,\n    });\n  };\n\n  const handleDeleteWorkEntry = (id: string) => {\n    const updated = workEntries.filter(entry => entry.id !== id);\n    setWorkEntries(updated);\n    localStorage.setItem(\"dob_voice_work\", JSON.stringify(updated));\n\n    toast({\n      title: \"Entry Deleted\",\n      description: \"Work entry has been removed\",\n    });\n  };\n\n  const billReport = useMemo(() => {\n    const filtered = workEntries.filter(entry => {\n      const entryMonth = entry.date.slice(0, 7);\n      return entryMonth === selectedMonth;\n    });\n\n    const grouped: Record<string, { name: string; totalMin: number; totalBill: number }> = {};\n\n    filtered.forEach(entry => {\n      if (!grouped[entry.artistId]) {\n        grouped[entry.artistId] = {\n          name: entry.artistName,\n          totalMin: 0,\n          totalBill: 0,\n        };\n      }\n      grouped[entry.artistId].totalMin += entry.totalMin;\n      grouped[entry.artistId].totalBill += entry.totalBill;\n    });\n\n    return Object.entries(grouped).map(([artistId, data]) => ({\n      artistId,\n      name: data.name,\n      totalMin: parseFloat(data.totalMin.toFixed(2)),\n      totalBill: parseFloat(data.totalBill.toFixed(2)),\n    }));\n  }, [workEntries, selectedMonth]);\n\n  const totalBill = billReport.reduce((sum, item) => sum + item.totalBill, 0);\n\n  const handlePrintBill = () => {\n    window.print();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <DashboardHeader />\n      <div className=\"w-full px-6 py-6 flex-1 print:p-0\">\n        <div className=\"mb-6\">\n          <div className=\"flex items-center gap-2\">\n            <Mic className=\"w-6 h-6 text-primary\" />\n            <h1 className=\"text-2xl font-semibold text-foreground\">Voice Artist Management</h1>\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Manage voice artists, track work, and generate bills\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"setup\" className=\"space-y-6\">\n          <TabsList className=\"print:hidden\">\n            <TabsTrigger value=\"setup\">Voice Artist Setup</TabsTrigger>\n            <TabsTrigger value=\"work\">Voice Work Entry</TabsTrigger>\n            <TabsTrigger value=\"bill\">Voice Artist Bill</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"setup\" className=\"space-y-6\">\n            {isAdmin && (\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center gap-2\">\n                    <UserPlus className=\"w-5 h-5 text-primary\" />\n                    <CardTitle>Add New Voice Artist</CardTitle>\n                  </div>\n                  <CardDescription>Add external voice artists to the system</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"artistName\">Name *</Label>\n                      <Input\n                        id=\"artistName\"\n                        value={artistName}\n                        onChange={(e) => setArtistName(e.target.value)}\n                        placeholder=\"Enter artist name\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"artistPhone\">Phone Number *</Label>\n                      <Input\n                        id=\"artistPhone\"\n                        value={artistPhone}\n                        onChange={(e) => setArtistPhone(e.target.value)}\n                        placeholder=\"Enter phone number\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"artistRate\">Per Minute Rate (৳)</Label>\n                      <Input\n                        id=\"artistRate\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={artistRate}\n                        onChange={(e) => setArtistRate(e.target.value)}\n                        placeholder=\"0.00\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"artistNotes\">Notes</Label>\n                      <Input\n                        id=\"artistNotes\"\n                        value={artistNotes}\n                        onChange={(e) => setArtistNotes(e.target.value)}\n                        placeholder=\"Optional notes\"\n                      />\n                    </div>\n                  </div>\n                  <Button \n                    onClick={editingArtist ? handleSaveEditArtist : handleAddArtist} \n                    className=\"w-full gap-2\"\n                  >\n                    {editingArtist ? (\n                      <>\n                        <Save className=\"w-4 h-4\" />\n                        Update Artist\n                      </>\n                    ) : (\n                      <>\n                        <UserPlus className=\"w-4 h-4\" />\n                        Add Artist\n                      </>\n                    )}\n                  </Button>\n                  {editingArtist && (\n                    <Button \n                      onClick={() => {\n                        setEditingArtist(null);\n                        setArtistName(\"\");\n                        setArtistPhone(\"\");\n                        setArtistRate(\"\");\n                        setArtistNotes(\"\");\n                      }} \n                      variant=\"outline\"\n                      className=\"w-full gap-2\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                      Cancel\n                    </Button>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {isAdmin ? (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Voice Artists ({artists.length})</CardTitle>\n                  <CardDescription>Manage existing voice artists</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {artists.length === 0 ? (\n                    <p className=\"text-sm text-muted-foreground text-center py-8\">\n                      No voice artists added yet. Add one above to get started.\n                    </p>\n                  ) : (\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b\">\n                            <th className=\"text-left py-3 px-4 text-sm font-medium\">SL</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium\">Name</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium\">Phone</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium\">Rate (৳/min)</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium\">Notes</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {artists.map((artist, index) => (\n                            <tr key={artist.id} className=\"border-b hover:bg-muted/50\">\n                              <td className=\"py-3 px-4 text-sm\">{index + 1}</td>\n                              <td className=\"py-3 px-4 text-sm font-medium\">{artist.name}</td>\n                              <td className=\"py-3 px-4 text-sm\">{artist.phone}</td>\n                              <td className=\"py-3 px-4 text-sm\">৳{artist.perMinuteRate.toFixed(2)}</td>\n                              <td className=\"py-3 px-4 text-sm text-muted-foreground\">{artist.notes || \"-\"}</td>\n                              <td className=\"py-3 px-4\">\n                                <div className=\"flex gap-2\">\n                                  <Button\n                                    onClick={() => handleEditArtist(artist)}\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                  >\n                                    <Edit className=\"w-3 h-3\" />\n                                  </Button>\n                                  <AlertDialog>\n                                    <AlertDialogTrigger asChild>\n                                      <Button size=\"sm\" variant=\"destructive\">\n                                        <Trash2 className=\"w-3 h-3\" />\n                                      </Button>\n                                    </AlertDialogTrigger>\n                                    <AlertDialogContent>\n                                      <AlertDialogHeader>\n                                        <AlertDialogTitle>Delete Artist?</AlertDialogTitle>\n                                        <AlertDialogDescription>\n                                          Are you sure you want to remove {artist.name}?\n                                        </AlertDialogDescription>\n                                      </AlertDialogHeader>\n                                      <AlertDialogFooter>\n                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                        <AlertDialogAction\n                                          onClick={() => handleDeleteArtist(artist.id, artist.name)}\n                                          className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                                        >\n                                          Delete\n                                        </AlertDialogAction>\n                                      </AlertDialogFooter>\n                                    </AlertDialogContent>\n                                  </AlertDialog>\n                                </div>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardContent className=\"py-12\">\n                  <p className=\"text-center text-muted-foreground\">\n                    Only administrators can view voice artist details\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"work\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center gap-2\">\n                  <FileText className=\"w-5 h-5 text-primary\" />\n                  <CardTitle>Voice Artist Work Records</CardTitle>\n                </div>\n                <CardDescription>Record voice work entries for billing</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"workDate\">Date *</Label>\n                    <Input\n                      id=\"workDate\"\n                      type=\"date\"\n                      value={workDate}\n                      onChange={(e) => setWorkDate(e.target.value)}\n                    />\n                  </div>\n                  <div className=\"space-y-2 md:col-span-2\">\n                    <Label htmlFor=\"workTitle\">Title *</Label>\n                    <Input\n                      id=\"workTitle\"\n                      value={workTitle}\n                      onChange={(e) => setWorkTitle(e.target.value)}\n                      placeholder=\"Content title\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"workArtist\">Voice Artist *</Label>\n                    <Select value={selectedArtistId} onValueChange={setSelectedArtistId}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select artist\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {artists.map(artist => (\n                          <SelectItem key={artist.id} value={artist.id}>\n                            {artist.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"workMinute\">Minute</Label>\n                    <Input\n                      id=\"workMinute\"\n                      type=\"number\"\n                      min=\"0\"\n                      value={workMinute}\n                      onChange={(e) => setWorkMinute(e.target.value)}\n                      placeholder=\"0\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"workSecond\">Second</Label>\n                    <Input\n                      id=\"workSecond\"\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"59\"\n                      value={workSecond}\n                      onChange={(e) => setWorkSecond(e.target.value)}\n                      placeholder=\"0\"\n                    />\n                  </div>\n                </div>\n                {selectedArtistId && (workMinute || workSecond) && (\n                  <div className=\"p-4 bg-muted rounded-lg\">\n                    <p className=\"text-sm\">\n                      <span className=\"font-medium\">Total Duration:</span>{\" \"}\n                      {((parseInt(workMinute) || 0) + (parseInt(workSecond) || 0) / 60).toFixed(2)} minutes\n                    </p>\n                    {isAdmin && (\n                      <p className=\"text-sm\">\n                        <span className=\"font-medium\">Estimated Bill:</span>{\" \"}\n                        ৳{(((parseInt(workMinute) || 0) + (parseInt(workSecond) || 0) / 60) * \n                          (artists.find(a => a.id === selectedArtistId)?.perMinuteRate || 0)).toFixed(2)}\n                      </p>\n                    )}\n                  </div>\n                )}\n                <Button onClick={handleAddWorkEntry} className=\"w-full gap-2\">\n                  <Save className=\"w-4 h-4\" />\n                  Add Work Entry\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Work Entries ({workEntries.length})</CardTitle>\n                <CardDescription>All recorded voice work entries</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {workEntries.length === 0 ? (\n                  <p className=\"text-sm text-muted-foreground text-center py-8\">\n                    No work entries recorded yet\n                  </p>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"border-b\">\n                          <th className=\"text-left py-3 px-4 text-sm font-medium\">SL</th>\n                          <th className=\"text-left py-3 px-4 text-sm font-medium\">Date</th>\n                          <th className=\"text-left py-3 px-4 text-sm font-medium\">Title</th>\n                          <th className=\"text-left py-3 px-4 text-sm font-medium\">Artist</th>\n                          <th className=\"text-left py-3 px-4 text-sm font-medium\">Duration</th>\n                          <th className=\"text-left py-3 px-4 text-sm font-medium\">Total Min</th>\n                          {isAdmin && <th className=\"text-left py-3 px-4 text-sm font-medium\">Bill</th>}\n                          <th className=\"text-left py-3 px-4 text-sm font-medium\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {workEntries.map((entry, index) => (\n                          <tr key={entry.id} className=\"border-b hover:bg-muted/50\">\n                            <td className=\"py-3 px-4 text-sm\">{index + 1}</td>\n                            <td className=\"py-3 px-4 text-sm\">{format(new Date(entry.date), \"MMM dd, yyyy\")}</td>\n                            <td className=\"py-3 px-4 text-sm\">{entry.title}</td>\n                            <td className=\"py-3 px-4 text-sm font-medium\">{entry.artistName}</td>\n                            <td className=\"py-3 px-4 text-sm\">{entry.minute}m {entry.second}s</td>\n                            <td className=\"py-3 px-4 text-sm\">{entry.totalMin.toFixed(2)}</td>\n                            {isAdmin && <td className=\"py-3 px-4 text-sm font-medium\">৳{entry.totalBill.toFixed(2)}</td>}\n                            <td className=\"py-3 px-4\">\n                              <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                  <Button size=\"sm\" variant=\"destructive\">\n                                    <Trash2 className=\"w-3 h-3\" />\n                                  </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                  <AlertDialogHeader>\n                                    <AlertDialogTitle>Delete Entry?</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                      Are you sure you want to remove this work entry?\n                                    </AlertDialogDescription>\n                                  </AlertDialogHeader>\n                                  <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                    <AlertDialogAction\n                                      onClick={() => handleDeleteWorkEntry(entry.id)}\n                                      className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                                    >\n                                      Delete\n                                    </AlertDialogAction>\n                                  </AlertDialogFooter>\n                                </AlertDialogContent>\n                              </AlertDialog>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"bill\" className=\"space-y-6\">\n            {isAdmin ? (\n              <>\n                <div className=\"flex items-center justify-between print:hidden\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"billMonth\">Select Month</Label>\n                    <Input\n                      id=\"billMonth\"\n                      type=\"month\"\n                      value={selectedMonth}\n                      onChange={(e) => setSelectedMonth(e.target.value)}\n                      className=\"w-48\"\n                    />\n                  </div>\n                  <Button onClick={handlePrintBill} className=\"gap-2\">\n                    <Printer className=\"w-4 h-4\" />\n                    Print Bill\n                  </Button>\n                </div>\n\n                <Card>\n                  <CardHeader className=\"text-center\">\n                    <CardTitle className=\"text-xl\">Daily Our Bangladesh</CardTitle>\n                    <CardTitle className=\"text-lg\">Voice Artist Bill</CardTitle>\n                    <CardDescription>\n                      Month of {format(new Date(selectedMonth + \"-01\"), \"MMMM yyyy\")}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {billReport.length === 0 ? (\n                      <p className=\"text-sm text-muted-foreground text-center py-8\">\n                        No work entries for the selected month\n                      </p>\n                    ) : (\n                      <>\n                        <div className=\"overflow-x-auto\">\n                          <table className=\"w-full border\">\n                            <thead>\n                              <tr className=\"border-b bg-muted/50\">\n                                <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">SL</th>\n                                <th className=\"text-left py-3 px-4 text-sm font-medium border-r\">Name</th>\n                                <th className=\"text-right py-3 px-4 text-sm font-medium border-r\">Total Min</th>\n                                <th className=\"text-right py-3 px-4 text-sm font-medium\">Total Taka (৳)</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {billReport.map((item, index) => (\n                                <tr key={item.artistId} className=\"border-b hover:bg-muted/30\">\n                                  <td className=\"py-3 px-4 text-sm border-r\">{index + 1}</td>\n                                  <td className=\"py-3 px-4 text-sm font-medium border-r\">{item.name}</td>\n                                  <td className=\"py-3 px-4 text-sm text-right border-r\">{item.totalMin.toFixed(2)}</td>\n                                  <td className=\"py-3 px-4 text-sm font-medium text-right\">৳{item.totalBill.toFixed(2)}</td>\n                                </tr>\n                              ))}\n                              <tr className=\"bg-muted font-semibold\">\n                                <td colSpan={3} className=\"py-3 px-4 text-sm text-right border-r\">\n                                  Total:\n                                </td>\n                                <td className=\"py-3 px-4 text-sm text-right\">\n                                  ৳{totalBill.toFixed(2)}\n                                </td>\n                              </tr>\n                            </tbody>\n                          </table>\n                        </div>\n                      </>\n                    )}\n                  </CardContent>\n                </Card>\n              </>\n            ) : (\n              <Card>\n                <CardContent className=\"py-12\">\n                  <p className=\"text-center text-muted-foreground\">\n                    Only administrators can view billing reports\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n      <Footer />\n\n      <style>{`\n        @media print {\n          .print\\\\:hidden {\n            display: none !important;\n          }\n          .print\\\\:p-0 {\n            padding: 0 !important;\n          }\n          @page {\n            margin: 2cm;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":29394}},"version":2}